//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.01.10 at 01:33:09 PM IST 
//


package lexicon.jaxb.impl;

public class MultiWordFrozenLexiconTypeImpl implements lexicon.jaxb.MultiWordFrozenLexiconType, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
{

    protected java.lang.String _Type;
    protected boolean has_Construct1;
    protected boolean _Construct1;
    protected boolean has_Prefix;
    protected boolean _Prefix;
    protected java.lang.String _Number;
    protected boolean has_Consecutive;
    protected boolean _Consecutive;
    protected boolean has_Base2;
    protected boolean _Base2;
    protected java.lang.String _MwPos;
    protected boolean has_Possessive2;
    protected boolean _Possessive2;
    protected boolean has_AcceptDefiniteness;
    protected boolean _AcceptDefiniteness;
    protected boolean has_Definiteness;
    protected boolean _Definiteness;
    public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (lexicon.jaxb.MultiWordFrozenLexiconType.class);
    }

    public java.lang.String getType() {
        if (_Type == null) {
            return "unspecified";
        } else {
            return _Type;
        }
    }

    public void setType(java.lang.String value) {
        _Type = value;
    }

    public boolean isConstruct1() {
        if (!has_Construct1) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Construct1;
        }
    }

    public void setConstruct1(boolean value) {
        _Construct1 = value;
        has_Construct1 = true;
    }

    public boolean isPrefix() {
        if (!has_Prefix) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Prefix;
        }
    }

    public void setPrefix(boolean value) {
        _Prefix = value;
        has_Prefix = true;
    }

    public java.lang.String getNumber() {
        if (_Number == null) {
            return "unspecified";
        } else {
            return _Number;
        }
    }

    public void setNumber(java.lang.String value) {
        _Number = value;
    }

    public boolean isConsecutive() {
        if (!has_Consecutive) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("true"));
        } else {
            return _Consecutive;
        }
    }

    public void setConsecutive(boolean value) {
        _Consecutive = value;
        has_Consecutive = true;
    }

    public boolean isBase2() {
        if (!has_Base2) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Base2;
        }
    }

    public void setBase2(boolean value) {
        _Base2 = value;
        has_Base2 = true;
    }

    public java.lang.String getMwPos() {
        return _MwPos;
    }

    public void setMwPos(java.lang.String value) {
        _MwPos = value;
    }

    public boolean isPossessive2() {
        if (!has_Possessive2) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Possessive2;
        }
    }

    public void setPossessive2(boolean value) {
        _Possessive2 = value;
        has_Possessive2 = true;
    }

    public boolean isAcceptDefiniteness() {
        if (!has_AcceptDefiniteness) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _AcceptDefiniteness;
        }
    }

    public void setAcceptDefiniteness(boolean value) {
        _AcceptDefiniteness = value;
        has_AcceptDefiniteness = true;
    }

    public boolean isDefiniteness() {
        if (!has_Definiteness) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Definiteness;
        }
    }

    public void setDefiniteness(boolean value) {
        _Definiteness = value;
        has_Definiteness = true;
    }

    public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
        return new lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (has_AcceptDefiniteness) {
            context.startAttribute("", "acceptDefiniteness");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _AcceptDefiniteness)), "AcceptDefiniteness");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Base2) {
            context.startAttribute("", "base2");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Base2)), "Base2");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Consecutive) {
            context.startAttribute("", "consecutive");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Consecutive)), "Consecutive");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Construct1) {
            context.startAttribute("", "construct1");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Construct1)), "Construct1");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Definiteness) {
            context.startAttribute("", "definiteness");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Definiteness)), "Definiteness");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_MwPos!= null) {
            context.startAttribute("", "mwPos");
            try {
                context.text(((java.lang.String) _MwPos), "MwPos");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Number!= null) {
            context.startAttribute("", "number");
            try {
                context.text(((java.lang.String) _Number), "Number");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Possessive2) {
            context.startAttribute("", "possessive2");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Possessive2)), "Possessive2");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Prefix) {
            context.startAttribute("", "prefix");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Prefix)), "Prefix");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Type!= null) {
            context.startAttribute("", "type");
            try {
                context.text(((java.lang.String) _Type), "Type");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
    }

    public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public java.lang.Class getPrimaryInterface() {
        return (lexicon.jaxb.MultiWordFrozenLexiconType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;"
+"xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\u001bcom.su"
+"n.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatyp"
+"e/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringP"
+"air;xq\u0000~\u0000\u0003ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000"
+"xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com."
+"sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUr"
+"it\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001dL\u0000\nwhiteSpacet\u0000.Lcom/s"
+"un/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.o"
+"rg/2001/XMLSchemat\u0000\u0007booleansr\u00005com.sun.msv.datatype.xsd.Whit"
+"eSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype."
+"xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar."
+"Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.m"
+"sv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001dL\u0000\fnamespaceUR"
+"Iq\u0000~\u0000\u001dxpq\u0000~\u0000!q\u0000~\u0000 sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001dL\u0000\fnamespaceURIq\u0000~\u0000\u001dxr\u0000\u001dcom.sun.msv"
+".grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0012acceptDefinitenesst\u0000\u0000sr\u00000c"
+"om.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq"
+"\u0000~\u0000\u0003sq\u0000~\u0000\u0013\u0001q\u0000~\u0000/sq\u0000~\u0000\u000eppsq\u0000~\u0000\u0010q\u0000~\u0000\u0014pq\u0000~\u0000\u0018sq\u0000~\u0000)t\u0000\u0005base2q\u0000~\u0000-"
+"q\u0000~\u0000/sq\u0000~\u0000\u000eppsq\u0000~\u0000\u0010q\u0000~\u0000\u0014pq\u0000~\u0000\u0018sq\u0000~\u0000)t\u0000\u000bconsecutiveq\u0000~\u0000-q\u0000~\u0000/"
+"sq\u0000~\u0000\u000eppsq\u0000~\u0000\u0010q\u0000~\u0000\u0014pq\u0000~\u0000\u0018sq\u0000~\u0000)t\u0000\nconstruct1q\u0000~\u0000-q\u0000~\u0000/sq\u0000~\u0000\u000e"
+"ppsq\u0000~\u0000\u0010q\u0000~\u0000\u0014pq\u0000~\u0000\u0018sq\u0000~\u0000)t\u0000\fdefinitenessq\u0000~\u0000-q\u0000~\u0000/sq\u0000~\u0000\u000eppsq"
+"\u0000~\u0000\u0010q\u0000~\u0000\u0014psq\u0000~\u0000\u0015ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFa"
+"cet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.dat"
+"atype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com"
+".sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacet"
+"FixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatyp"
+"e/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype"
+"/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u001dxq\u0000~\u0000\u001cq\u0000~\u0000-t\u0000\u0007PosTypeq\u0000~\u0000"
+"$\u0000\u0000sr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com."
+"sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq"
+"\u0000~\u0000\u001aq\u0000~\u0000 t\u0000\u0005tokenq\u0000~\u0000$\u0001q\u0000~\u0000Nt\u0000\u000benumerationsr\u0000\u0011java.util.Hash"
+"Set\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\tt\u0000\u000bunspecifiedt\u0000\u000bprepositiont\u0000"
+"\finterjectiont\u0000\u0005titlet\u0000\tadjectivet\u0000\u0004verbt\u0000\npropernamet\u0000\u0006adve"
+"rbt\u0000\u0004nounxq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000Kq\u0000~\u0000-sq\u0000~\u0000)t\u0000\u0005mwPosq\u0000~\u0000-q\u0000~\u0000/sq\u0000~\u0000"
+"\u000eppsq\u0000~\u0000\u0010q\u0000~\u0000\u0014psq\u0000~\u0000\u0015ppsq\u0000~\u0000Dq\u0000~\u0000-t\u0000\nNumberTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000Nq"
+"\u0000~\u0000Nq\u0000~\u0000Psq\u0000~\u0000Qw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and p"
+"luralt\u0000\u0004dualt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000&sq\u0000~"
+"\u0000\'q\u0000~\u0000cq\u0000~\u0000-sq\u0000~\u0000)t\u0000\u0006numberq\u0000~\u0000-q\u0000~\u0000/sq\u0000~\u0000\u000eppsq\u0000~\u0000\u0010q\u0000~\u0000\u0014pq\u0000~"
+"\u0000\u0018sq\u0000~\u0000)t\u0000\u000bpossessive2q\u0000~\u0000-q\u0000~\u0000/sq\u0000~\u0000\u000eppsq\u0000~\u0000\u0010q\u0000~\u0000\u0014pq\u0000~\u0000\u0018sq\u0000"
+"~\u0000)t\u0000\u0006prefixq\u0000~\u0000-q\u0000~\u0000/sq\u0000~\u0000\u000eppsq\u0000~\u0000\u0010q\u0000~\u0000\u0014psq\u0000~\u0000\u0015ppq\u0000~\u0000Nq\u0000~\u0000&"
+"sq\u0000~\u0000\'q\u0000~\u0000Oq\u0000~\u0000 sq\u0000~\u0000)t\u0000\u0004typeq\u0000~\u0000-q\u0000~\u0000/sr\u0000\"com.sun.msv.gramm"
+"ar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/gramm"
+"ar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.Expre"
+"ssionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006pa"
+"rentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u0013\u0001pq\u0000~\u0000\u0006q\u0000~\u0000"
+"\u000bq\u0000~\u0000rq\u0000~\u0000\rq\u0000~\u00009q\u0000~\u0000=q\u0000~\u0000Aq\u0000~\u00005q\u0000~\u0000\bq\u0000~\u0000nq\u0000~\u0000\u0005q\u0000~\u0000\u0007q\u0000~\u0000vq\u0000~\u0000"
+"\nq\u0000~\u0000\tq\u0000~\u0000_q\u0000~\u0000\u000fq\u0000~\u0000\fq\u0000~\u00001x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            super(context, "-------------------------------");
        }

        protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        attIdx = context.getAttribute("", "consecutive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText1(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText2(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "prefix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 27;
                            eatText3(v);
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText4(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  27 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 30;
                            eatText5(v);
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "construct1");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText6(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  21 :
                        attIdx = context.getAttribute("", "possessive2");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 24;
                            eatText7(v);
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "base2");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText8(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "acceptDefiniteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText9(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  30 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  15 :
                        attIdx = context.getAttribute("", "mwPos");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText10(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Consecutive = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Consecutive = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Number = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Prefix = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Prefix = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Definiteness = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Definiteness = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Type = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Construct1 = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Construct1 = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Possessive2 = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Possessive2 = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText8(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Base2 = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Base2 = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText9(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AcceptDefiniteness = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_AcceptDefiniteness = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText10(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _MwPos = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        attIdx = context.getAttribute("", "consecutive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText1(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText2(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "prefix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 27;
                            eatText3(v);
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText4(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  27 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 30;
                            eatText5(v);
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "construct1");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText6(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  21 :
                        attIdx = context.getAttribute("", "possessive2");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 24;
                            eatText7(v);
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "base2");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText8(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "acceptDefiniteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText9(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  30 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  15 :
                        attIdx = context.getAttribute("", "mwPos");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText10(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        if (("consecutive" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  18 :
                        if (("number" == ___local)&&("" == ___uri)) {
                            state = 19;
                            return ;
                        }
                        state = 21;
                        continue outer;
                    case  24 :
                        if (("prefix" == ___local)&&("" == ___uri)) {
                            state = 25;
                            return ;
                        }
                        state = 27;
                        continue outer;
                    case  12 :
                        if (("definiteness" == ___local)&&("" == ___uri)) {
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                    case  27 :
                        if (("type" == ___local)&&("" == ___uri)) {
                            state = 28;
                            return ;
                        }
                        state = 30;
                        continue outer;
                    case  9 :
                        if (("construct1" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  21 :
                        if (("possessive2" == ___local)&&("" == ___uri)) {
                            state = 22;
                            return ;
                        }
                        state = 24;
                        continue outer;
                    case  3 :
                        if (("base2" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  0 :
                        if (("acceptDefiniteness" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  30 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  15 :
                        if (("mwPos" == ___local)&&("" == ___uri)) {
                            state = 16;
                            return ;
                        }
                        state = 18;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        attIdx = context.getAttribute("", "consecutive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText1(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText2(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  26 :
                        if (("prefix" == ___local)&&("" == ___uri)) {
                            state = 27;
                            return ;
                        }
                        break;
                    case  23 :
                        if (("possessive2" == ___local)&&("" == ___uri)) {
                            state = 24;
                            return ;
                        }
                        break;
                    case  24 :
                        attIdx = context.getAttribute("", "prefix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 27;
                            eatText3(v);
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText4(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  27 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 30;
                            eatText5(v);
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  29 :
                        if (("type" == ___local)&&("" == ___uri)) {
                            state = 30;
                            return ;
                        }
                        break;
                    case  2 :
                        if (("acceptDefiniteness" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  9 :
                        attIdx = context.getAttribute("", "construct1");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText6(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  21 :
                        attIdx = context.getAttribute("", "possessive2");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 24;
                            eatText7(v);
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  5 :
                        if (("base2" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  20 :
                        if (("number" == ___local)&&("" == ___uri)) {
                            state = 21;
                            return ;
                        }
                        break;
                    case  17 :
                        if (("mwPos" == ___local)&&("" == ___uri)) {
                            state = 18;
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "base2");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText8(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  11 :
                        if (("construct1" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "acceptDefiniteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText9(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  30 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  14 :
                        if (("definiteness" == ___local)&&("" == ___uri)) {
                            state = 15;
                            return ;
                        }
                        break;
                    case  8 :
                        if (("consecutive" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  15 :
                        attIdx = context.getAttribute("", "mwPos");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText10(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  6 :
                            attIdx = context.getAttribute("", "consecutive");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 9;
                                eatText1(v);
                                continue outer;
                            }
                            state = 9;
                            continue outer;
                        case  18 :
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 21;
                                eatText2(v);
                                continue outer;
                            }
                            state = 21;
                            continue outer;
                        case  24 :
                            attIdx = context.getAttribute("", "prefix");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 27;
                                eatText3(v);
                                continue outer;
                            }
                            state = 27;
                            continue outer;
                        case  12 :
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 15;
                                eatText4(v);
                                continue outer;
                            }
                            state = 15;
                            continue outer;
                        case  27 :
                            attIdx = context.getAttribute("", "type");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 30;
                                eatText5(v);
                                continue outer;
                            }
                            state = 30;
                            continue outer;
                        case  13 :
                            state = 14;
                            eatText4(value);
                            return ;
                        case  4 :
                            state = 5;
                            eatText8(value);
                            return ;
                        case  22 :
                            state = 23;
                            eatText7(value);
                            return ;
                        case  25 :
                            state = 26;
                            eatText3(value);
                            return ;
                        case  16 :
                            state = 17;
                            eatText10(value);
                            return ;
                        case  9 :
                            attIdx = context.getAttribute("", "construct1");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 12;
                                eatText6(v);
                                continue outer;
                            }
                            state = 12;
                            continue outer;
                        case  1 :
                            state = 2;
                            eatText9(value);
                            return ;
                        case  19 :
                            state = 20;
                            eatText2(value);
                            return ;
                        case  21 :
                            attIdx = context.getAttribute("", "possessive2");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 24;
                                eatText7(v);
                                continue outer;
                            }
                            state = 24;
                            continue outer;
                        case  7 :
                            state = 8;
                            eatText1(value);
                            return ;
                        case  3 :
                            attIdx = context.getAttribute("", "base2");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 6;
                                eatText8(v);
                                continue outer;
                            }
                            state = 6;
                            continue outer;
                        case  10 :
                            state = 11;
                            eatText6(value);
                            return ;
                        case  0 :
                            attIdx = context.getAttribute("", "acceptDefiniteness");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText9(v);
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  30 :
                            revertToParentFromText(value);
                            return ;
                        case  28 :
                            state = 29;
                            eatText5(value);
                            return ;
                        case  15 :
                            attIdx = context.getAttribute("", "mwPos");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 18;
                                eatText10(v);
                                continue outer;
                            }
                            state = 18;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
