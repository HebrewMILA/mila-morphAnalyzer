//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.01.10 at 01:33:09 PM IST 
//


package lexicon.jaxb.impl;

public class NounLexiconTypeImpl implements lexicon.jaxb.NounLexiconType, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
{

    protected java.lang.String _Direction;
    protected java.lang.String _Feminine;
    protected boolean has_InflectPossessiveS;
    protected boolean _InflectPossessiveS;
    protected java.lang.String _Gender;
    protected java.lang.String _Deverbal;
    protected java.lang.String _Plural;
    protected java.lang.String _DottedPlural;
    protected java.lang.String _LexicalLink;
    protected boolean has_Definiteness;
    protected boolean _Definiteness;
    protected java.lang.String _IpSource;
    protected boolean has_Foreign;
    protected boolean _Foreign;
    protected java.lang.String _InflectionPattern;
    protected boolean has_InflectConstructS;
    protected boolean _InflectConstructS;
    protected java.lang.String _Number;
    protected boolean has_Dual;
    protected boolean _Dual;
    protected java.lang.String _Root;
    protected java.lang.String _InflectionBase;
    protected java.lang.String _Acronym;
    protected boolean has_InflectPossessiveP;
    protected boolean _InflectPossessiveP;
    protected com.sun.xml.bind.util.ListImpl _AddOrReplaceOrRemove;
    protected java.lang.String _Pattern;
    protected boolean has_InflectConstructP;
    protected boolean _InflectConstructP;
    public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    public java.lang.String getDirection() {
        if (_Direction == null) {
            return "false";
        } else {
            return _Direction;
        }
    }

    public void setDirection(java.lang.String value) {
        _Direction = value;
    }

    public java.lang.String getFeminine() {
        if (_Feminine == null) {
            return "unspecified";
        } else {
            return _Feminine;
        }
    }

    public void setFeminine(java.lang.String value) {
        _Feminine = value;
    }

    public boolean isInflectPossessiveS() {
        if (!has_InflectPossessiveS) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("true"));
        } else {
            return _InflectPossessiveS;
        }
    }

    public void setInflectPossessiveS(boolean value) {
        _InflectPossessiveS = value;
        has_InflectPossessiveS = true;
    }

    public java.lang.String getGender() {
        if (_Gender == null) {
            return "masculine";
        } else {
            return _Gender;
        }
    }

    public void setGender(java.lang.String value) {
        _Gender = value;
    }

    public java.lang.String getDeverbal() {
        if (_Deverbal == null) {
            return "false";
        } else {
            return _Deverbal;
        }
    }

    public void setDeverbal(java.lang.String value) {
        _Deverbal = value;
    }

    public java.lang.String getPlural() {
        if (_Plural == null) {
            return "im";
        } else {
            return _Plural;
        }
    }

    public void setPlural(java.lang.String value) {
        _Plural = value;
    }

    public java.lang.String getDottedPlural() {
        if (_DottedPlural == null) {
            return "";
        } else {
            return _DottedPlural;
        }
    }

    public void setDottedPlural(java.lang.String value) {
        _DottedPlural = value;
    }

    public java.lang.String getLexicalLink() {
        if (_LexicalLink == null) {
            return "";
        } else {
            return _LexicalLink;
        }
    }

    public void setLexicalLink(java.lang.String value) {
        _LexicalLink = value;
    }

    public boolean isDefiniteness() {
        if (!has_Definiteness) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("true"));
        } else {
            return _Definiteness;
        }
    }

    public void setDefiniteness(boolean value) {
        _Definiteness = value;
        has_Definiteness = true;
    }

    public java.lang.String getIpSource() {
        if (_IpSource == null) {
            return "";
        } else {
            return _IpSource;
        }
    }

    public void setIpSource(java.lang.String value) {
        _IpSource = value;
    }

    public boolean isForeign() {
        if (!has_Foreign) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Foreign;
        }
    }

    public void setForeign(boolean value) {
        _Foreign = value;
        has_Foreign = true;
    }

    public java.lang.String getInflectionPattern() {
        if (_InflectionPattern == null) {
            return "";
        } else {
            return _InflectionPattern;
        }
    }

    public void setInflectionPattern(java.lang.String value) {
        _InflectionPattern = value;
    }

    public boolean isInflectConstructS() {
        if (!has_InflectConstructS) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("true"));
        } else {
            return _InflectConstructS;
        }
    }

    public void setInflectConstructS(boolean value) {
        _InflectConstructS = value;
        has_InflectConstructS = true;
    }

    public java.lang.String getNumber() {
        if (_Number == null) {
            return "singular";
        } else {
            return _Number;
        }
    }

    public void setNumber(java.lang.String value) {
        _Number = value;
    }

    public boolean isDual() {
        if (!has_Dual) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Dual;
        }
    }

    public void setDual(boolean value) {
        _Dual = value;
        has_Dual = true;
    }

    public java.lang.String getRoot() {
        if (_Root == null) {
            return "";
        } else {
            return _Root;
        }
    }

    public void setRoot(java.lang.String value) {
        _Root = value;
    }

    public java.lang.String getInflectionBase() {
        if (_InflectionBase == null) {
            return "";
        } else {
            return _InflectionBase;
        }
    }

    public void setInflectionBase(java.lang.String value) {
        _InflectionBase = value;
    }

    public java.lang.String getAcronym() {
        if (_Acronym == null) {
            return "false";
        } else {
            return _Acronym;
        }
    }

    public void setAcronym(java.lang.String value) {
        _Acronym = value;
    }

    public boolean isInflectPossessiveP() {
        if (!has_InflectPossessiveP) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("true"));
        } else {
            return _InflectPossessiveP;
        }
    }

    public void setInflectPossessiveP(boolean value) {
        _InflectPossessiveP = value;
        has_InflectPossessiveP = true;
    }

    protected com.sun.xml.bind.util.ListImpl _getAddOrReplaceOrRemove() {
        if (_AddOrReplaceOrRemove == null) {
            _AddOrReplaceOrRemove = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _AddOrReplaceOrRemove;
    }

    public java.util.List getAddOrReplaceOrRemove() {
        return _getAddOrReplaceOrRemove();
    }

    public java.lang.String getPattern() {
        if (_Pattern == null) {
            return "";
        } else {
            return _Pattern;
        }
    }

    public void setPattern(java.lang.String value) {
        _Pattern = value;
    }

    public boolean isInflectConstructP() {
        if (!has_InflectConstructP) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("true"));
        } else {
            return _InflectConstructP;
        }
    }

    public void setInflectConstructP(boolean value) {
        _InflectConstructP = value;
        has_InflectConstructP = true;
    }

    public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
        return new lexicon.jaxb.impl.NounLexiconTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx20 = 0;
        final int len20 = ((_AddOrReplaceOrRemove == null)? 0 :_AddOrReplaceOrRemove.size());
        while (idx20 != len20) {
            while (idx20 != len20) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove.get(idx20 ++)), "AddOrReplaceOrRemove");
            }
        }
    }

    public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx20 = 0;
        final int len20 = ((_AddOrReplaceOrRemove == null)? 0 :_AddOrReplaceOrRemove.size());
        if (_Acronym!= null) {
            context.startAttribute("", "acronym");
            try {
                context.text(((java.lang.String) _Acronym), "Acronym");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Definiteness) {
            context.startAttribute("", "definiteness");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Definiteness)), "Definiteness");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Deverbal!= null) {
            context.startAttribute("", "deverbal");
            try {
                context.text(((java.lang.String) _Deverbal), "Deverbal");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Direction!= null) {
            context.startAttribute("", "direction");
            try {
                context.text(((java.lang.String) _Direction), "Direction");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_DottedPlural!= null) {
            context.startAttribute("", "dottedPlural");
            try {
                context.text(((java.lang.String) _DottedPlural), "DottedPlural");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Dual) {
            context.startAttribute("", "dual");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Dual)), "Dual");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Feminine!= null) {
            context.startAttribute("", "feminine");
            try {
                context.text(((java.lang.String) _Feminine), "Feminine");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Foreign) {
            context.startAttribute("", "foreign");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Foreign)), "Foreign");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Gender!= null) {
            context.startAttribute("", "gender");
            try {
                context.text(((java.lang.String) _Gender), "Gender");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_InflectConstructP) {
            context.startAttribute("", "inflectConstructP");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _InflectConstructP)), "InflectConstructP");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_InflectConstructS) {
            context.startAttribute("", "inflectConstructS");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _InflectConstructS)), "InflectConstructS");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_InflectPossessiveP) {
            context.startAttribute("", "inflectPossessiveP");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _InflectPossessiveP)), "InflectPossessiveP");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_InflectPossessiveS) {
            context.startAttribute("", "inflectPossessiveS");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _InflectPossessiveS)), "InflectPossessiveS");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_InflectionBase!= null) {
            context.startAttribute("", "inflectionBase");
            try {
                context.text(((java.lang.String) _InflectionBase), "InflectionBase");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_InflectionPattern!= null) {
            context.startAttribute("", "inflectionPattern");
            try {
                context.text(((java.lang.String) _InflectionPattern), "InflectionPattern");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_IpSource!= null) {
            context.startAttribute("", "ipSource");
            try {
                context.text(((java.lang.String) _IpSource), "IpSource");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_LexicalLink!= null) {
            context.startAttribute("", "lexicalLink");
            try {
                context.text(((java.lang.String) _LexicalLink), "LexicalLink");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Number!= null) {
            context.startAttribute("", "number");
            try {
                context.text(((java.lang.String) _Number), "Number");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Pattern!= null) {
            context.startAttribute("", "pattern");
            try {
                context.text(((java.lang.String) _Pattern), "Pattern");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Plural!= null) {
            context.startAttribute("", "plural");
            try {
                context.text(((java.lang.String) _Plural), "Plural");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Root!= null) {
            context.startAttribute("", "root");
            try {
                context.text(((java.lang.String) _Root), "Root");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        while (idx20 != len20) {
            while (idx20 != len20) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove.get(idx20 ++)), "AddOrReplaceOrRemove");
            }
        }
    }

    public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx20 = 0;
        final int len20 = ((_AddOrReplaceOrRemove == null)? 0 :_AddOrReplaceOrRemove.size());
        while (idx20 != len20) {
            while (idx20 != len20) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove.get(idx20 ++)), "AddOrReplaceOrRemove");
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (lexicon.jaxb.NounLexiconType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~"
+"\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.m"
+"sv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003ppsr\u0000\u001dcom.sun"
+".msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\u001dppsq\u0000~\u0000\u001dppsq\u0000"
+"~\u0000\u001asr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.sun.m"
+"sv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom"
+"/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementEx"
+"p\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000"
+"\u0002xq\u0000~\u0000\u0003q\u0000~\u0000#p\u0000sq\u0000~\u0000\u001dppsq\u0000~\u0000\u001aq\u0000~\u0000#psr\u0000 com.sun.msv.grammar.At"
+"tributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000%xq\u0000~\u0000\u0003q\u0000~\u0000#"
+"psr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\"\u0001q\u0000~\u0000-sr\u0000 com.sun.msv.grammar.AnyNameClass"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u0000"
+"0com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000"
+"xq\u0000~\u0000\u0003q\u0000~\u0000.q\u0000~\u00003sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u00005x"
+"q\u0000~\u00000t\u0000 lexicon.jaxb.NounLexiconType.Addt\u0000+http://java.sun.c"
+"om/jaxb/xjc/dummy-elementsq\u0000~\u00003sq\u0000~\u0000\u001appsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u001dppsq\u0000~"
+"\u0000\u001aq\u0000~\u0000#psq\u0000~\u0000*q\u0000~\u0000#pq\u0000~\u0000-q\u0000~\u00001q\u0000~\u00003sq\u0000~\u00004t\u0000$lexicon.jaxb.Nou"
+"nLexiconType.Replaceq\u0000~\u00008sq\u0000~\u0000\u001appsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u001dppsq\u0000~\u0000\u001aq\u0000~\u0000"
+"#psq\u0000~\u0000*q\u0000~\u0000#pq\u0000~\u0000-q\u0000~\u00001q\u0000~\u00003sq\u0000~\u00004t\u0000#lexicon.jaxb.NounLexic"
+"onType.Removeq\u0000~\u00008sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#psr\u0000\u001bcom.sun.msv.gramma"
+"r.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L"
+"\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003pp"
+"sr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006v"
+"aluest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataType"
+"WithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype."
+"xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueC"
+"heckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeIm"
+"pl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;"
+"L\u0000\tfacetNameq\u0000~\u00005xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u00005L\u0000\btypeNameq\u0000~\u00005L\u0000\nwhiteSpace"
+"t\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000\u0000t\u0000\u000eThr"
+"eeStateTypesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$"
+"Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpacePr"
+"ocessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0000\u0000sr\u0000\"com.sun.msv.datatype.xsd.TokenType"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicT"
+"ype\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000St\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokenq\u0000~\u0000Z"
+"\u0001q\u0000~\u0000_t\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010"
+"?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004truet\u0000\u0005falsexsr\u00000com.sun.msv.gramma"
+"r.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun"
+".msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u00005L\u0000\fnamespace"
+"URIq\u0000~\u00005xpq\u0000~\u0000Wq\u0000~\u0000Vsq\u0000~\u00004t\u0000\u0007acronymq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*"
+"q\u0000~\u0000#psq\u0000~\u0000Ippsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000]q\u0000~\u0000`t\u0000\u0007booleanq\u0000~\u0000Zq\u0000~\u0000isq\u0000~\u0000jq\u0000~\u0000sq\u0000~\u0000`sq\u0000~\u00004t\u0000"
+"\fdefinitenessq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#pq\u0000~\u0000Lsq\u0000~\u00004t\u0000\bdev"
+"erbalq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#psq\u0000~\u0000Ippsq\u0000~\u0000Mq\u0000~\u0000Vt\u0000\fTwo"
+"StateTypeq\u0000~\u0000Z\u0000\u0000q\u0000~\u0000_q\u0000~\u0000_q\u0000~\u0000bsq\u0000~\u0000cw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\u0004truet\u0000"
+"\u0005falsexq\u0000~\u0000isq\u0000~\u0000jq\u0000~\u0000\u007fq\u0000~\u0000Vsq\u0000~\u00004t\u0000\tdirectionq\u0000~\u0000Vq\u0000~\u00003sq\u0000~"
+"\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#psq\u0000~\u0000Ippq\u0000~\u0000_q\u0000~\u0000isq\u0000~\u0000jq\u0000~\u0000aq\u0000~\u0000`sq\u0000~\u00004t\u0000\fd"
+"ottedPluralq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#pq\u0000~\u0000psq\u0000~\u00004t\u0000\u0004dualq"
+"\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#psq\u0000~\u0000Ippsq\u0000~\u0000Mq\u0000~\u0000Vt\u0000\fFeminineT"
+"ypeq\u0000~\u0000Z\u0000\u0000q\u0000~\u0000_q\u0000~\u0000_q\u0000~\u0000bsq\u0000~\u0000cw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt"
+"\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000isq\u0000~\u0000jq\u0000~\u0000\u0094q\u0000~\u0000Vsq\u0000~\u00004t\u0000\bfeminineq\u0000~\u0000Vq\u0000~\u0000"
+"3sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#pq\u0000~\u0000psq\u0000~\u00004t\u0000\u0007foreignq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dpp"
+"sq\u0000~\u0000*q\u0000~\u0000#psq\u0000~\u0000Ippsq\u0000~\u0000Mq\u0000~\u0000Vt\u0000\nGenderTypeq\u0000~\u0000Z\u0000\u0000q\u0000~\u0000_q\u0000~\u0000"
+"_q\u0000~\u0000bsq\u0000~\u0000cw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016mascul"
+"ine and femininet\u0000\tmasculinexq\u0000~\u0000isq\u0000~\u0000jq\u0000~\u0000\u00a5q\u0000~\u0000Vsq\u0000~\u00004t\u0000\u0006g"
+"enderq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#pq\u0000~\u0000psq\u0000~\u00004t\u0000\u0011inflectCons"
+"tructPq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#pq\u0000~\u0000psq\u0000~\u00004t\u0000\u0011inflectCon"
+"structSq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#pq\u0000~\u0000psq\u0000~\u00004t\u0000\u0012inflectPo"
+"ssessivePq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#pq\u0000~\u0000psq\u0000~\u00004t\u0000\u0012inflect"
+"PossessiveSq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#pq\u0000~\u0000\u0088sq\u0000~\u00004t\u0000\u000einfle"
+"ctionBaseq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#pq\u0000~\u0000\u0088sq\u0000~\u00004t\u0000\u0011inflect"
+"ionPatternq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#pq\u0000~\u0000\u0088sq\u0000~\u00004t\u0000\bipSour"
+"ceq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#pq\u0000~\u0000\u0088sq\u0000~\u00004t\u0000\u000blexicalLinkq\u0000~"
+"\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#psq\u0000~\u0000Ippsq\u0000~\u0000Mq\u0000~\u0000Vt\u0000\nNumberTypeq"
+"\u0000~\u0000Z\u0000\u0000q\u0000~\u0000_q\u0000~\u0000_q\u0000~\u0000bsq\u0000~\u0000cw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013si"
+"ngular and pluralt\u0000\u0004dualt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006plur"
+"alxq\u0000~\u0000isq\u0000~\u0000jq\u0000~\u0000\u00d2q\u0000~\u0000Vsq\u0000~\u00004t\u0000\u0006numberq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000"
+"~\u0000*q\u0000~\u0000#pq\u0000~\u0000\u0088sq\u0000~\u00004t\u0000\u0007patternq\u0000~\u0000Vq\u0000~\u00003sq\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#p"
+"sq\u0000~\u0000Ippsq\u0000~\u0000Mq\u0000~\u0000Vt\u0000\nPluralTypeq\u0000~\u0000Z\u0000\u0000q\u0000~\u0000_q\u0000~\u0000_q\u0000~\u0000bsq\u0000~\u0000c"
+"w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000bunspecifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000\u0002imt\u0000\u0003iimt\u0000\u0001mt\u0000\tim "
+"and wtt\u0000\u0003iwtxq\u0000~\u0000isq\u0000~\u0000jq\u0000~\u0000\u00e5q\u0000~\u0000Vsq\u0000~\u00004t\u0000\u0006pluralq\u0000~\u0000Vq\u0000~\u00003s"
+"q\u0000~\u0000\u001dppsq\u0000~\u0000*q\u0000~\u0000#pq\u0000~\u0000\u0088sq\u0000~\u00004t\u0000\u0004rootq\u0000~\u0000Vq\u0000~\u00003sr\u0000\"com.sun.m"
+"sv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/m"
+"sv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.gramm"
+"ar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVers"
+"ionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u00007\u0001pq"
+"\u0000~\u0000\u0012q\u0000~\u0000 q\u0000~\u0000\u00aeq\u0000~\u0000\u0086q\u0000~\u0000\u0013q\u0000~\u0000\u0015q\u0000~\u0000!q\u0000~\u00009q\u0000~\u0000@q\u0000~\u0000\u0019q\u0000~\u0000\u009dq\u0000~\u0000\rq"
+"\u0000~\u0000)q\u0000~\u0000<q\u0000~\u0000Cq\u0000~\u0000\u00b2q\u0000~\u0000Gq\u0000~\u0000\tq\u0000~\u0000\u0014q\u0000~\u0000(q\u0000~\u0000;q\u0000~\u0000Bq\u0000~\u0000\u0090q\u0000~\u0000\u00a1q"
+"\u0000~\u0000\u00baq\u0000~\u0000\u0018q\u0000~\u0000\u001eq\u0000~\u0000\u0007q\u0000~\u0000\u00f2q\u0000~\u0000\u0016q\u0000~\u0000\u00c6q\u0000~\u0000\u000fq\u0000~\u0000\u00c2q\u0000~\u0000\u001cq\u0000~\u0000\u0005q\u0000~\u0000\u000bq"
+"\u0000~\u0000\fq\u0000~\u0000\u00caq\u0000~\u0000\u0017q\u0000~\u0000\u000eq\u0000~\u0000\u00ceq\u0000~\u0000\bq\u0000~\u0000\u0011q\u0000~\u0000\u00ddq\u0000~\u0000{q\u0000~\u0000\u001fq\u0000~\u0000\u0006q\u0000~\u0000\u0010q"
+"\u0000~\u0000wq\u0000~\u0000\u00beq\u0000~\u0000\u00b6q\u0000~\u0000nq\u0000~\u0000\nq\u0000~\u0000\u00e1q\u0000~\u0000\u008cx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public static class AddImpl
        extends lexicon.jaxb.impl.NounExceptionTypeImpl
        implements lexicon.jaxb.NounLexiconType.Add, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
    {

        public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
        private static com.sun.msv.grammar.Grammar schemaFragment;

        public java.lang.String ____jaxb_ri____getNamespaceURI() {
            return "";
        }

        public java.lang.String ____jaxb_ri____getLocalName() {
            return "add";
        }

        public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            return new lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.Unmarshaller(context);
        }

        public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
            context.startElement("", "add");
            super.serializeURIs(context);
            context.endNamespaceDecls();
            super.serializeAttributes(context);
            context.endAttributes();
            super.serializeBody(context);
            context.endElement();
        }

        public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public java.lang.Class getPrimaryInterface() {
            return (lexicon.jaxb.NounLexiconType.Add.class);
        }

        public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
            if (schemaFragment == null) {
                schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
+"\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.s"
+"un.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/dataty"
+"pe/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/String"
+"Pair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlw"
+"aysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000"
+"\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamesp"
+"aceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000#L\u0000\nwhiteSpacet\u0000.L"
+"com/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www"
+".w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.W"
+"hiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.dataty"
+"pe.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.gram"
+"mar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.s"
+"un.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000#L\u0000\fnamespa"
+"ceURIq\u0000~\u0000#xpq\u0000~\u0000\'q\u0000~\u0000&sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080"
+"\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u001appsr\u0000)com.sun.msv.datatype.xsd.Enum"
+"erationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.su"
+"n.msv.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002"
+"\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z"
+"\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/ms"
+"v/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv"
+"/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000#xq\u0000~\u0000\"t\u0000\u0000t\u0000\u000eThre"
+"eStateTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%t\u0000\u000benumerationsr\u0000\u0011java.util.HashS"
+"et\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004truet\u0000\u0005falsexq"
+"\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000>q\u0000~\u0000=sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000#L\u0000\fnamespaceURIq\u0000~\u0000#xr\u0000\u001dcom.sun.m"
+"sv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\tconstructq\u0000~\u0000=sr\u00000com.su"
+"n.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004s"
+"q\u0000~\u00003\u0001q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004pq\u0000~\u0000\u001dsq\u0000~\u0000Ft\u0000\u0006dottedq\u0000~\u0000=q\u0000~\u0000"
+"Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004pq\u0000~\u00005sq\u0000~\u0000Ft\u0000\u0004dualq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000"
+"~\u00001q\u0000~\u00004psq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\fFeminineTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%"
+"q\u0000~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000,sq"
+"\u0000~\u0000-q\u0000~\u0000Yq\u0000~\u0000=sq\u0000~\u0000Ft\u0000\bfeminineq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004"
+"psq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\nGenderTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000~\u0000?sq\u0000~\u0000"
+"@w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and fem"
+"ininet\u0000\tmasculinexq\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000fq\u0000~\u0000=sq\u0000~\u0000Ft\u0000\u0006genderq\u0000~\u0000=q"
+"\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001appsr\u0000$com.sun.msv.datatype.xsd"
+".BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000 q\u0000~\u0000&t\u0000\u0007booleanq\u0000~\u0000*q\u0000~\u0000,sq\u0000~\u0000-"
+"q\u0000~\u0000tq\u0000~\u0000&sq\u0000~\u0000Ft\u0000\u0011inflectConstructPq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001"
+"q\u0000~\u00004pq\u0000~\u0000qsq\u0000~\u0000Ft\u0000\u0011inflectConstructSq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u0000"
+"1q\u0000~\u00004pq\u0000~\u0000qsq\u0000~\u0000Ft\u0000\u0012inflectPossessivePq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000"
+"~\u00001q\u0000~\u00004pq\u0000~\u0000qsq\u0000~\u0000Ft\u0000\u0012inflectPossessiveSq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/pps"
+"q\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\nNumberTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%"
+"q\u0000~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and plura"
+"lt\u0000\u0004dualt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000,sq\u0000~\u0000-q\u0000"
+"~\u0000\u0088q\u0000~\u0000=sq\u0000~\u0000Ft\u0000\u0006numberq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001ap"
+"psq\u0000~\u00006q\u0000~\u0000=t\u0000\nPluralTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000\u0010?"
+"@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000bunspecifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000\u0002imt\u0000\u0003iimt\u0000\u0001mt\u0000\tim and wtt"
+"\u0000\u0003iwtxq\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000\u0097q\u0000~\u0000=sq\u0000~\u0000Ft\u0000\u0006pluralq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/pp"
+"sq\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\u0007PGNTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000"
+"~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p"
+"/MF/Sgt\u0000\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Pl"
+"t\u0000\u00073p/F/Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073"
+"p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000,sq\u0000~\u0000"
+"-q\u0000~\u0000\u00a8q\u0000~\u0000=sq\u0000~\u0000Ft\u0000\npossessiveq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004p"
+"sq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\fRegisterTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000~\u0000?sq\u0000~"
+"\u0000@w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000"
+"\u00c4q\u0000~\u0000=sq\u0000~\u0000Ft\u0000\bregisterq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001ap"
+"psq\u0000~\u00006q\u0000~\u0000=t\u0000\fSpellingTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000"
+"\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\tirregulart\u0000\bstandardxq\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000\u00d0q\u0000~\u0000=sq\u0000~\u0000F"
+"t\u0000\bspellingq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u00001ppq\u0000~\u0000\u001dsq\u0000~\u0000Ft\u0000\u000etransliteratedq\u0000~"
+"\u0000=sq\u0000~\u00001ppq\u0000~\u0000\u001dsq\u0000~\u0000Ft\u0000\bundottedq\u0000~\u0000=sq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004psq\u0000"
+"~\u0000\u001appsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000 "
+"q\u0000~\u0000&t\u0000\u0005QNameq\u0000~\u0000*q\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000\u00e2q\u0000~\u0000&sq\u0000~\u0000Ft\u0000\u0004typet\u0000)http:"
+"//www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000Ksq\u0000~\u0000Ft\u0000\u0003addq\u0000~\u0000=sr"
+"\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000"
+"/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.su"
+"n.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000"
+"\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPoo"
+"l;xp\u0000\u0000\u0000 \u0001pq\u0000~\u0000\nq\u0000~\u0000\u0080q\u0000~\u0000Uq\u0000~\u0000\fq\u0000~\u0000Mq\u0000~\u0000\u0093q\u0000~\u0000\u000bq\u0000~\u0000\u0015q\u0000~\u0000\u0011q\u0000~\u0000\u0016"
+"q\u0000~\u0000\u0013q\u0000~\u0000\u0012q\u0000~\u0000\u0017q\u0000~\u0000\u0019q\u0000~\u0000\u000fq\u0000~\u0000\u00c0q\u0000~\u0000\u0018q\u0000~\u0000\u0010q\u0000~\u0000xq\u0000~\u0000\u0084q\u0000~\u0000oq\u0000~\u0000\u000e"
+"q\u0000~\u0000|q\u0000~\u00000q\u0000~\u0000\u00ccq\u0000~\u0000bq\u0000~\u0000Qq\u0000~\u0000\u00ddq\u0000~\u0000\rq\u0000~\u0000\tq\u0000~\u0000\u00a4q\u0000~\u0000\u0014x"));
            }
            return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
        }

        public class Unmarshaller
            extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
        {


            public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
                super(context, "----");
            }

            protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
                this(context);
                state = startState;
            }

            public java.lang.Object owner() {
                return lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this;
            }

            public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dual");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "plural");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "possessive");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            break;
                        case  0 :
                            if (("add" == ___local)&&("" == ___uri)) {
                                context.pushAttributes(__atts, true);
                                state = 1;
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                            return ;
                    }
                    super.enterElement(___uri, ___local, ___qname, __atts);
                    break;
                }
            }

            public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dual");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "plural");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "possessive");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  2 :
                            if (("add" == ___local)&&("" == ___uri)) {
                                context.popAttributes();
                                state = 3;
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromLeaveElement(___uri, ___local, ___qname);
                            return ;
                    }
                    super.leaveElement(___uri, ___local, ___qname);
                    break;
                }
            }

            public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            if (("construct" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dotted" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dual" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("feminine" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("gender" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectConstructP" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectConstructS" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectPossessiveP" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectPossessiveS" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("number" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("plural" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("possessive" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("register" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("spelling" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("transliterated" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                            return ;
                    }
                    super.enterAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dual");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "plural");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "possessive");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                            return ;
                    }
                    super.leaveAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void handleText(final java.lang.String value)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    try {
                        switch (state) {
                            case  1 :
                                attIdx = context.getAttribute("", "construct");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dotted");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dual");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "feminine");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "gender");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectConstructP");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectConstructS");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectPossessiveP");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectPossessiveS");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "number");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "plural");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "possessive");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "register");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "spelling");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "transliterated");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                break;
                            case  3 :
                                revertToParentFromText(value);
                                return ;
                        }
                    } catch (java.lang.RuntimeException e) {
                        handleUnexpectedTextException(value, e);
                    }
                    break;
                }
            }

        }

    }

    public static class RemoveImpl
        extends lexicon.jaxb.impl.NounExceptionTypeImpl
        implements lexicon.jaxb.NounLexiconType.Remove, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
    {

        public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
        private static com.sun.msv.grammar.Grammar schemaFragment;

        public java.lang.String ____jaxb_ri____getNamespaceURI() {
            return "";
        }

        public java.lang.String ____jaxb_ri____getLocalName() {
            return "remove";
        }

        public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            return new lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.Unmarshaller(context);
        }

        public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
            context.startElement("", "remove");
            super.serializeURIs(context);
            context.endNamespaceDecls();
            super.serializeAttributes(context);
            context.endAttributes();
            super.serializeBody(context);
            context.endElement();
        }

        public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public java.lang.Class getPrimaryInterface() {
            return (lexicon.jaxb.NounLexiconType.Remove.class);
        }

        public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
            if (schemaFragment == null) {
                schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
+"\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.s"
+"un.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/dataty"
+"pe/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/String"
+"Pair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlw"
+"aysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000"
+"\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamesp"
+"aceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000#L\u0000\nwhiteSpacet\u0000.L"
+"com/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www"
+".w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.W"
+"hiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.dataty"
+"pe.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.gram"
+"mar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.s"
+"un.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000#L\u0000\fnamespa"
+"ceURIq\u0000~\u0000#xpq\u0000~\u0000\'q\u0000~\u0000&sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080"
+"\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u001appsr\u0000)com.sun.msv.datatype.xsd.Enum"
+"erationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.su"
+"n.msv.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002"
+"\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z"
+"\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/ms"
+"v/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv"
+"/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000#xq\u0000~\u0000\"t\u0000\u0000t\u0000\u000eThre"
+"eStateTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%t\u0000\u000benumerationsr\u0000\u0011java.util.HashS"
+"et\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004truet\u0000\u0005falsexq"
+"\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000>q\u0000~\u0000=sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000#L\u0000\fnamespaceURIq\u0000~\u0000#xr\u0000\u001dcom.sun.m"
+"sv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\tconstructq\u0000~\u0000=sr\u00000com.su"
+"n.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004s"
+"q\u0000~\u00003\u0001q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004pq\u0000~\u0000\u001dsq\u0000~\u0000Ft\u0000\u0006dottedq\u0000~\u0000=q\u0000~\u0000"
+"Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004pq\u0000~\u00005sq\u0000~\u0000Ft\u0000\u0004dualq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000"
+"~\u00001q\u0000~\u00004psq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\fFeminineTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%"
+"q\u0000~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000,sq"
+"\u0000~\u0000-q\u0000~\u0000Yq\u0000~\u0000=sq\u0000~\u0000Ft\u0000\bfeminineq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004"
+"psq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\nGenderTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000~\u0000?sq\u0000~\u0000"
+"@w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and fem"
+"ininet\u0000\tmasculinexq\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000fq\u0000~\u0000=sq\u0000~\u0000Ft\u0000\u0006genderq\u0000~\u0000=q"
+"\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001appsr\u0000$com.sun.msv.datatype.xsd"
+".BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000 q\u0000~\u0000&t\u0000\u0007booleanq\u0000~\u0000*q\u0000~\u0000,sq\u0000~\u0000-"
+"q\u0000~\u0000tq\u0000~\u0000&sq\u0000~\u0000Ft\u0000\u0011inflectConstructPq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001"
+"q\u0000~\u00004pq\u0000~\u0000qsq\u0000~\u0000Ft\u0000\u0011inflectConstructSq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u0000"
+"1q\u0000~\u00004pq\u0000~\u0000qsq\u0000~\u0000Ft\u0000\u0012inflectPossessivePq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000"
+"~\u00001q\u0000~\u00004pq\u0000~\u0000qsq\u0000~\u0000Ft\u0000\u0012inflectPossessiveSq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/pps"
+"q\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\nNumberTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%"
+"q\u0000~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and plura"
+"lt\u0000\u0004dualt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000,sq\u0000~\u0000-q\u0000"
+"~\u0000\u0088q\u0000~\u0000=sq\u0000~\u0000Ft\u0000\u0006numberq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001ap"
+"psq\u0000~\u00006q\u0000~\u0000=t\u0000\nPluralTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000\u0010?"
+"@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000bunspecifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000\u0002imt\u0000\u0003iimt\u0000\u0001mt\u0000\tim and wtt"
+"\u0000\u0003iwtxq\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000\u0097q\u0000~\u0000=sq\u0000~\u0000Ft\u0000\u0006pluralq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/pp"
+"sq\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\u0007PGNTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000"
+"~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p"
+"/MF/Sgt\u0000\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Pl"
+"t\u0000\u00073p/F/Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073"
+"p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000,sq\u0000~\u0000"
+"-q\u0000~\u0000\u00a8q\u0000~\u0000=sq\u0000~\u0000Ft\u0000\npossessiveq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004p"
+"sq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\fRegisterTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000~\u0000?sq\u0000~"
+"\u0000@w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000"
+"\u00c4q\u0000~\u0000=sq\u0000~\u0000Ft\u0000\bregisterq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001ap"
+"psq\u0000~\u00006q\u0000~\u0000=t\u0000\fSpellingTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000"
+"\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\tirregulart\u0000\bstandardxq\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000\u00d0q\u0000~\u0000=sq\u0000~\u0000F"
+"t\u0000\bspellingq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u00001ppq\u0000~\u0000\u001dsq\u0000~\u0000Ft\u0000\u000etransliteratedq\u0000~"
+"\u0000=sq\u0000~\u00001ppq\u0000~\u0000\u001dsq\u0000~\u0000Ft\u0000\bundottedq\u0000~\u0000=sq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004psq\u0000"
+"~\u0000\u001appsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000 "
+"q\u0000~\u0000&t\u0000\u0005QNameq\u0000~\u0000*q\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000\u00e2q\u0000~\u0000&sq\u0000~\u0000Ft\u0000\u0004typet\u0000)http:"
+"//www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000Ksq\u0000~\u0000Ft\u0000\u0006removeq\u0000~\u0000"
+"=sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTabl"
+"et\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com"
+".sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005coun"
+"tB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expression"
+"Pool;xp\u0000\u0000\u0000 \u0001pq\u0000~\u0000\nq\u0000~\u0000\u0080q\u0000~\u0000Uq\u0000~\u0000\fq\u0000~\u0000Mq\u0000~\u0000\u0093q\u0000~\u0000\u000bq\u0000~\u0000\u0015q\u0000~\u0000\u0011q\u0000"
+"~\u0000\u0016q\u0000~\u0000\u0013q\u0000~\u0000\u0012q\u0000~\u0000\u0017q\u0000~\u0000\u0019q\u0000~\u0000\u000fq\u0000~\u0000\u00c0q\u0000~\u0000\u0018q\u0000~\u0000\u0010q\u0000~\u0000xq\u0000~\u0000\u0084q\u0000~\u0000oq\u0000"
+"~\u0000\u000eq\u0000~\u0000|q\u0000~\u00000q\u0000~\u0000\u00ccq\u0000~\u0000bq\u0000~\u0000Qq\u0000~\u0000\u00ddq\u0000~\u0000\rq\u0000~\u0000\tq\u0000~\u0000\u00a4q\u0000~\u0000\u0014x"));
            }
            return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
        }

        public class Unmarshaller
            extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
        {


            public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
                super(context, "----");
            }

            protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
                this(context);
                state = startState;
            }

            public java.lang.Object owner() {
                return lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this;
            }

            public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        case  0 :
                            if (("remove" == ___local)&&("" == ___uri)) {
                                context.pushAttributes(__atts, true);
                                state = 1;
                                return ;
                            }
                            break;
                        case  1 :
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dual");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "plural");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "possessive");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            break;
                    }
                    super.enterElement(___uri, ___local, ___qname, __atts);
                    break;
                }
            }

            public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromLeaveElement(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dual");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "plural");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "possessive");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  2 :
                            if (("remove" == ___local)&&("" == ___uri)) {
                                context.popAttributes();
                                state = 3;
                                return ;
                            }
                            break;
                    }
                    super.leaveElement(___uri, ___local, ___qname);
                    break;
                }
            }

            public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            if (("construct" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dotted" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dual" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("feminine" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("gender" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectConstructP" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectConstructS" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectPossessiveP" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectPossessiveS" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("number" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("plural" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("possessive" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("register" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("spelling" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("transliterated" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.enterAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dual");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "plural");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "possessive");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.leaveAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void handleText(final java.lang.String value)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    try {
                        switch (state) {
                            case  3 :
                                revertToParentFromText(value);
                                return ;
                            case  1 :
                                attIdx = context.getAttribute("", "construct");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dotted");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dual");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "feminine");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "gender");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectConstructP");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectConstructS");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectPossessiveP");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectPossessiveS");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "number");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "plural");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "possessive");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "register");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "spelling");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "transliterated");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                break;
                        }
                    } catch (java.lang.RuntimeException e) {
                        handleUnexpectedTextException(value, e);
                    }
                    break;
                }
            }

        }

    }

    public static class ReplaceImpl
        extends lexicon.jaxb.impl.NounExceptionTypeImpl
        implements lexicon.jaxb.NounLexiconType.Replace, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
    {

        public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
        private static com.sun.msv.grammar.Grammar schemaFragment;

        public java.lang.String ____jaxb_ri____getNamespaceURI() {
            return "";
        }

        public java.lang.String ____jaxb_ri____getLocalName() {
            return "replace";
        }

        public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            return new lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.Unmarshaller(context);
        }

        public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
            context.startElement("", "replace");
            super.serializeURIs(context);
            context.endNamespaceDecls();
            super.serializeAttributes(context);
            context.endAttributes();
            super.serializeBody(context);
            context.endElement();
        }

        public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public java.lang.Class getPrimaryInterface() {
            return (lexicon.jaxb.NounLexiconType.Replace.class);
        }

        public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
            if (schemaFragment == null) {
                schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
+"\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.s"
+"un.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/dataty"
+"pe/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/String"
+"Pair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlw"
+"aysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000"
+"\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamesp"
+"aceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000#L\u0000\nwhiteSpacet\u0000.L"
+"com/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www"
+".w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.W"
+"hiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.dataty"
+"pe.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.gram"
+"mar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.s"
+"un.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000#L\u0000\fnamespa"
+"ceURIq\u0000~\u0000#xpq\u0000~\u0000\'q\u0000~\u0000&sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080"
+"\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u001appsr\u0000)com.sun.msv.datatype.xsd.Enum"
+"erationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.su"
+"n.msv.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002"
+"\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z"
+"\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/ms"
+"v/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv"
+"/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000#xq\u0000~\u0000\"t\u0000\u0000t\u0000\u000eThre"
+"eStateTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%t\u0000\u000benumerationsr\u0000\u0011java.util.HashS"
+"et\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004truet\u0000\u0005falsexq"
+"\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000>q\u0000~\u0000=sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000#L\u0000\fnamespaceURIq\u0000~\u0000#xr\u0000\u001dcom.sun.m"
+"sv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\tconstructq\u0000~\u0000=sr\u00000com.su"
+"n.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004s"
+"q\u0000~\u00003\u0001q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004pq\u0000~\u0000\u001dsq\u0000~\u0000Ft\u0000\u0006dottedq\u0000~\u0000=q\u0000~\u0000"
+"Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004pq\u0000~\u00005sq\u0000~\u0000Ft\u0000\u0004dualq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000"
+"~\u00001q\u0000~\u00004psq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\fFeminineTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%"
+"q\u0000~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000,sq"
+"\u0000~\u0000-q\u0000~\u0000Yq\u0000~\u0000=sq\u0000~\u0000Ft\u0000\bfeminineq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004"
+"psq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\nGenderTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000~\u0000?sq\u0000~\u0000"
+"@w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and fem"
+"ininet\u0000\tmasculinexq\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000fq\u0000~\u0000=sq\u0000~\u0000Ft\u0000\u0006genderq\u0000~\u0000=q"
+"\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001appsr\u0000$com.sun.msv.datatype.xsd"
+".BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000 q\u0000~\u0000&t\u0000\u0007booleanq\u0000~\u0000*q\u0000~\u0000,sq\u0000~\u0000-"
+"q\u0000~\u0000tq\u0000~\u0000&sq\u0000~\u0000Ft\u0000\u0011inflectConstructPq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001"
+"q\u0000~\u00004pq\u0000~\u0000qsq\u0000~\u0000Ft\u0000\u0011inflectConstructSq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u0000"
+"1q\u0000~\u00004pq\u0000~\u0000qsq\u0000~\u0000Ft\u0000\u0012inflectPossessivePq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000"
+"~\u00001q\u0000~\u00004pq\u0000~\u0000qsq\u0000~\u0000Ft\u0000\u0012inflectPossessiveSq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/pps"
+"q\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\nNumberTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%"
+"q\u0000~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and plura"
+"lt\u0000\u0004dualt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000,sq\u0000~\u0000-q\u0000"
+"~\u0000\u0088q\u0000~\u0000=sq\u0000~\u0000Ft\u0000\u0006numberq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001ap"
+"psq\u0000~\u00006q\u0000~\u0000=t\u0000\nPluralTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000\u0010?"
+"@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000bunspecifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000\u0002imt\u0000\u0003iimt\u0000\u0001mt\u0000\tim and wtt"
+"\u0000\u0003iwtxq\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000\u0097q\u0000~\u0000=sq\u0000~\u0000Ft\u0000\u0006pluralq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/pp"
+"sq\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\u0007PGNTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000"
+"~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p"
+"/MF/Sgt\u0000\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Pl"
+"t\u0000\u00073p/F/Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073"
+"p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000,sq\u0000~\u0000"
+"-q\u0000~\u0000\u00a8q\u0000~\u0000=sq\u0000~\u0000Ft\u0000\npossessiveq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004p"
+"sq\u0000~\u0000\u001appsq\u0000~\u00006q\u0000~\u0000=t\u0000\fRegisterTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000~\u0000?sq\u0000~"
+"\u0000@w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000"
+"\u00c4q\u0000~\u0000=sq\u0000~\u0000Ft\u0000\bregisterq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004psq\u0000~\u0000\u001ap"
+"psq\u0000~\u00006q\u0000~\u0000=t\u0000\fSpellingTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000%q\u0000~\u0000%q\u0000~\u0000?sq\u0000~\u0000@w\f\u0000\u0000\u0000"
+"\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\tirregulart\u0000\bstandardxq\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000\u00d0q\u0000~\u0000=sq\u0000~\u0000F"
+"t\u0000\bspellingq\u0000~\u0000=q\u0000~\u0000Ksq\u0000~\u00001ppq\u0000~\u0000\u001dsq\u0000~\u0000Ft\u0000\u000etransliteratedq\u0000~"
+"\u0000=sq\u0000~\u00001ppq\u0000~\u0000\u001dsq\u0000~\u0000Ft\u0000\bundottedq\u0000~\u0000=sq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00004psq\u0000"
+"~\u0000\u001appsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000 "
+"q\u0000~\u0000&t\u0000\u0005QNameq\u0000~\u0000*q\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000\u00e2q\u0000~\u0000&sq\u0000~\u0000Ft\u0000\u0004typet\u0000)http:"
+"//www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000Ksq\u0000~\u0000Ft\u0000\u0007replaceq\u0000~"
+"\u0000=sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTab"
+"let\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-co"
+"m.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005cou"
+"ntB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expressio"
+"nPool;xp\u0000\u0000\u0000 \u0001pq\u0000~\u0000\nq\u0000~\u0000\u0080q\u0000~\u0000Uq\u0000~\u0000\fq\u0000~\u0000Mq\u0000~\u0000\u0093q\u0000~\u0000\u000bq\u0000~\u0000\u0015q\u0000~\u0000\u0011q"
+"\u0000~\u0000\u0016q\u0000~\u0000\u0013q\u0000~\u0000\u0012q\u0000~\u0000\u0017q\u0000~\u0000\u0019q\u0000~\u0000\u000fq\u0000~\u0000\u00c0q\u0000~\u0000\u0018q\u0000~\u0000\u0010q\u0000~\u0000xq\u0000~\u0000\u0084q\u0000~\u0000oq"
+"\u0000~\u0000\u000eq\u0000~\u0000|q\u0000~\u00000q\u0000~\u0000\u00ccq\u0000~\u0000bq\u0000~\u0000Qq\u0000~\u0000\u00ddq\u0000~\u0000\rq\u0000~\u0000\tq\u0000~\u0000\u00a4q\u0000~\u0000\u0014x"));
            }
            return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
        }

        public class Unmarshaller
            extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
        {


            public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
                super(context, "----");
            }

            protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
                this(context);
                state = startState;
            }

            public java.lang.Object owner() {
                return lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this;
            }

            public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dual");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "plural");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "possessive");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            break;
                        case  0 :
                            if (("replace" == ___local)&&("" == ___uri)) {
                                context.pushAttributes(__atts, true);
                                state = 1;
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                            return ;
                    }
                    super.enterElement(___uri, ___local, ___qname, __atts);
                    break;
                }
            }

            public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dual");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "plural");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "possessive");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  2 :
                            if (("replace" == ___local)&&("" == ___uri)) {
                                context.popAttributes();
                                state = 3;
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromLeaveElement(___uri, ___local, ___qname);
                            return ;
                    }
                    super.leaveElement(___uri, ___local, ___qname);
                    break;
                }
            }

            public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            if (("construct" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dotted" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dual" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("feminine" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("gender" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectConstructP" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectConstructS" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectPossessiveP" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectPossessiveS" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("number" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("plural" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("possessive" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("register" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("spelling" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("transliterated" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.NounExceptionTypeImpl)lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                            return ;
                    }
                    super.enterAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dual");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstructS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveP");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectPossessiveS");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "plural");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "possessive");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                            return ;
                    }
                    super.leaveAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void handleText(final java.lang.String value)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    try {
                        switch (state) {
                            case  1 :
                                attIdx = context.getAttribute("", "construct");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dotted");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dual");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "feminine");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "gender");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectConstructP");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectConstructS");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectPossessiveP");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectPossessiveS");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "number");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "plural");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "possessive");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "register");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "spelling");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "transliterated");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                break;
                            case  3 :
                                revertToParentFromText(value);
                                return ;
                        }
                    } catch (java.lang.RuntimeException e) {
                        handleUnexpectedTextException(value, e);
                    }
                    break;
                }
            }

        }

    }

    public class Unmarshaller
        extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            super(context, "-----------------------------------------------------------------");
        }

        protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return lexicon.jaxb.impl.NounLexiconTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  57 :
                        attIdx = context.getAttribute("", "plural");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 60;
                            eatText1(v);
                            continue outer;
                        }
                        state = 60;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "acronym");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  63 :
                        if (("add" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.class), 64, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.class), 64, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.class), 64, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 64;
                        continue outer;
                    case  36 :
                        attIdx = context.getAttribute("", "inflectPossessiveS");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 39;
                            eatText3(v);
                            continue outer;
                        }
                        state = 39;
                        continue outer;
                    case  27 :
                        attIdx = context.getAttribute("", "inflectConstructP");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 30;
                            eatText4(v);
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "dottedPlural");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText5(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText6(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  42 :
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 45;
                            eatText7(v);
                            continue outer;
                        }
                        state = 45;
                        continue outer;
                    case  33 :
                        attIdx = context.getAttribute("", "inflectPossessiveP");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 36;
                            eatText8(v);
                            continue outer;
                        }
                        state = 36;
                        continue outer;
                    case  51 :
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 54;
                            eatText9(v);
                            continue outer;
                        }
                        state = 54;
                        continue outer;
                    case  30 :
                        attIdx = context.getAttribute("", "inflectConstructS");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 33;
                            eatText10(v);
                            continue outer;
                        }
                        state = 33;
                        continue outer;
                    case  45 :
                        attIdx = context.getAttribute("", "ipSource");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 48;
                            eatText11(v);
                            continue outer;
                        }
                        state = 48;
                        continue outer;
                    case  21 :
                        attIdx = context.getAttribute("", "foreign");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 24;
                            eatText12(v);
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  64 :
                        if (("add" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl.class), 64, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl.class), 64, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl.class), 64, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  48 :
                        attIdx = context.getAttribute("", "lexicalLink");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 51;
                            eatText13(v);
                            continue outer;
                        }
                        state = 51;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "deverbal");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText14(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  15 :
                        attIdx = context.getAttribute("", "dual");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText15(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 27;
                            eatText16(v);
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  54 :
                        attIdx = context.getAttribute("", "pattern");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 57;
                            eatText17(v);
                            continue outer;
                        }
                        state = 57;
                        continue outer;
                    case  60 :
                        attIdx = context.getAttribute("", "root");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 63;
                            eatText18(v);
                            continue outer;
                        }
                        state = 63;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "direction");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText19(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText20(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  39 :
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 42;
                            eatText21(v);
                            continue outer;
                        }
                        state = 42;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Plural = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Acronym = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _InflectPossessiveS = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_InflectPossessiveS = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _InflectConstructP = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_InflectConstructP = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _DottedPlural = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Feminine = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _InflectionPattern = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText8(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _InflectPossessiveP = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_InflectPossessiveP = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText9(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Number = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText10(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _InflectConstructS = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_InflectConstructS = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText11(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _IpSource = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText12(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Foreign = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Foreign = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText13(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _LexicalLink = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText14(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Deverbal = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText15(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Dual = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Dual = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText16(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Gender = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText17(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Pattern = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText18(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Root = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText19(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Direction = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText20(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Definiteness = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Definiteness = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText21(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _InflectionBase = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  57 :
                        attIdx = context.getAttribute("", "plural");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 60;
                            eatText1(v);
                            continue outer;
                        }
                        state = 60;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "acronym");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  63 :
                        state = 64;
                        continue outer;
                    case  36 :
                        attIdx = context.getAttribute("", "inflectPossessiveS");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 39;
                            eatText3(v);
                            continue outer;
                        }
                        state = 39;
                        continue outer;
                    case  27 :
                        attIdx = context.getAttribute("", "inflectConstructP");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 30;
                            eatText4(v);
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "dottedPlural");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText5(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText6(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  42 :
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 45;
                            eatText7(v);
                            continue outer;
                        }
                        state = 45;
                        continue outer;
                    case  33 :
                        attIdx = context.getAttribute("", "inflectPossessiveP");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 36;
                            eatText8(v);
                            continue outer;
                        }
                        state = 36;
                        continue outer;
                    case  51 :
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 54;
                            eatText9(v);
                            continue outer;
                        }
                        state = 54;
                        continue outer;
                    case  30 :
                        attIdx = context.getAttribute("", "inflectConstructS");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 33;
                            eatText10(v);
                            continue outer;
                        }
                        state = 33;
                        continue outer;
                    case  45 :
                        attIdx = context.getAttribute("", "ipSource");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 48;
                            eatText11(v);
                            continue outer;
                        }
                        state = 48;
                        continue outer;
                    case  21 :
                        attIdx = context.getAttribute("", "foreign");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 24;
                            eatText12(v);
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  64 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  48 :
                        attIdx = context.getAttribute("", "lexicalLink");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 51;
                            eatText13(v);
                            continue outer;
                        }
                        state = 51;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "deverbal");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText14(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  15 :
                        attIdx = context.getAttribute("", "dual");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText15(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 27;
                            eatText16(v);
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  54 :
                        attIdx = context.getAttribute("", "pattern");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 57;
                            eatText17(v);
                            continue outer;
                        }
                        state = 57;
                        continue outer;
                    case  60 :
                        attIdx = context.getAttribute("", "root");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 63;
                            eatText18(v);
                            continue outer;
                        }
                        state = 63;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "direction");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText19(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText20(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  39 :
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 42;
                            eatText21(v);
                            continue outer;
                        }
                        state = 42;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            outer:
            while (true) {
                switch (state) {
                    case  57 :
                        if (("plural" == ___local)&&("" == ___uri)) {
                            state = 58;
                            return ;
                        }
                        state = 60;
                        continue outer;
                    case  0 :
                        if (("acronym" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  63 :
                        state = 64;
                        continue outer;
                    case  36 :
                        if (("inflectPossessiveS" == ___local)&&("" == ___uri)) {
                            state = 37;
                            return ;
                        }
                        state = 39;
                        continue outer;
                    case  27 :
                        if (("inflectConstructP" == ___local)&&("" == ___uri)) {
                            state = 28;
                            return ;
                        }
                        state = 30;
                        continue outer;
                    case  12 :
                        if (("dottedPlural" == ___local)&&("" == ___uri)) {
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                    case  18 :
                        if (("feminine" == ___local)&&("" == ___uri)) {
                            state = 19;
                            return ;
                        }
                        state = 21;
                        continue outer;
                    case  42 :
                        if (("inflectionPattern" == ___local)&&("" == ___uri)) {
                            state = 43;
                            return ;
                        }
                        state = 45;
                        continue outer;
                    case  33 :
                        if (("inflectPossessiveP" == ___local)&&("" == ___uri)) {
                            state = 34;
                            return ;
                        }
                        state = 36;
                        continue outer;
                    case  51 :
                        if (("number" == ___local)&&("" == ___uri)) {
                            state = 52;
                            return ;
                        }
                        state = 54;
                        continue outer;
                    case  30 :
                        if (("inflectConstructS" == ___local)&&("" == ___uri)) {
                            state = 31;
                            return ;
                        }
                        state = 33;
                        continue outer;
                    case  45 :
                        if (("ipSource" == ___local)&&("" == ___uri)) {
                            state = 46;
                            return ;
                        }
                        state = 48;
                        continue outer;
                    case  21 :
                        if (("foreign" == ___local)&&("" == ___uri)) {
                            state = 22;
                            return ;
                        }
                        state = 24;
                        continue outer;
                    case  64 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  48 :
                        if (("lexicalLink" == ___local)&&("" == ___uri)) {
                            state = 49;
                            return ;
                        }
                        state = 51;
                        continue outer;
                    case  6 :
                        if (("deverbal" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  15 :
                        if (("dual" == ___local)&&("" == ___uri)) {
                            state = 16;
                            return ;
                        }
                        state = 18;
                        continue outer;
                    case  24 :
                        if (("gender" == ___local)&&("" == ___uri)) {
                            state = 25;
                            return ;
                        }
                        state = 27;
                        continue outer;
                    case  54 :
                        if (("pattern" == ___local)&&("" == ___uri)) {
                            state = 55;
                            return ;
                        }
                        state = 57;
                        continue outer;
                    case  60 :
                        if (("root" == ___local)&&("" == ___uri)) {
                            state = 61;
                            return ;
                        }
                        state = 63;
                        continue outer;
                    case  9 :
                        if (("direction" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  3 :
                        if (("definiteness" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  39 :
                        if (("inflectionBase" == ___local)&&("" == ___uri)) {
                            state = 40;
                            return ;
                        }
                        state = 42;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  59 :
                        if (("plural" == ___local)&&("" == ___uri)) {
                            state = 60;
                            return ;
                        }
                        break;
                    case  14 :
                        if (("dottedPlural" == ___local)&&("" == ___uri)) {
                            state = 15;
                            return ;
                        }
                        break;
                    case  32 :
                        if (("inflectConstructS" == ___local)&&("" == ___uri)) {
                            state = 33;
                            return ;
                        }
                        break;
                    case  57 :
                        attIdx = context.getAttribute("", "plural");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 60;
                            eatText1(v);
                            continue outer;
                        }
                        state = 60;
                        continue outer;
                    case  20 :
                        if (("feminine" == ___local)&&("" == ___uri)) {
                            state = 21;
                            return ;
                        }
                        break;
                    case  2 :
                        if (("acronym" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "acronym");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  63 :
                        state = 64;
                        continue outer;
                    case  36 :
                        attIdx = context.getAttribute("", "inflectPossessiveS");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 39;
                            eatText3(v);
                            continue outer;
                        }
                        state = 39;
                        continue outer;
                    case  26 :
                        if (("gender" == ___local)&&("" == ___uri)) {
                            state = 27;
                            return ;
                        }
                        break;
                    case  27 :
                        attIdx = context.getAttribute("", "inflectConstructP");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 30;
                            eatText4(v);
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "dottedPlural");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText5(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText6(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  42 :
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 45;
                            eatText7(v);
                            continue outer;
                        }
                        state = 45;
                        continue outer;
                    case  62 :
                        if (("root" == ___local)&&("" == ___uri)) {
                            state = 63;
                            return ;
                        }
                        break;
                    case  23 :
                        if (("foreign" == ___local)&&("" == ___uri)) {
                            state = 24;
                            return ;
                        }
                        break;
                    case  33 :
                        attIdx = context.getAttribute("", "inflectPossessiveP");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 36;
                            eatText8(v);
                            continue outer;
                        }
                        state = 36;
                        continue outer;
                    case  50 :
                        if (("lexicalLink" == ___local)&&("" == ___uri)) {
                            state = 51;
                            return ;
                        }
                        break;
                    case  51 :
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 54;
                            eatText9(v);
                            continue outer;
                        }
                        state = 54;
                        continue outer;
                    case  30 :
                        attIdx = context.getAttribute("", "inflectConstructS");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 33;
                            eatText10(v);
                            continue outer;
                        }
                        state = 33;
                        continue outer;
                    case  47 :
                        if (("ipSource" == ___local)&&("" == ___uri)) {
                            state = 48;
                            return ;
                        }
                        break;
                    case  45 :
                        attIdx = context.getAttribute("", "ipSource");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 48;
                            eatText11(v);
                            continue outer;
                        }
                        state = 48;
                        continue outer;
                    case  21 :
                        attIdx = context.getAttribute("", "foreign");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 24;
                            eatText12(v);
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  64 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  53 :
                        if (("number" == ___local)&&("" == ___uri)) {
                            state = 54;
                            return ;
                        }
                        break;
                    case  48 :
                        attIdx = context.getAttribute("", "lexicalLink");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 51;
                            eatText13(v);
                            continue outer;
                        }
                        state = 51;
                        continue outer;
                    case  17 :
                        if (("dual" == ___local)&&("" == ___uri)) {
                            state = 18;
                            return ;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "deverbal");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText14(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  15 :
                        attIdx = context.getAttribute("", "dual");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText15(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 27;
                            eatText16(v);
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  29 :
                        if (("inflectConstructP" == ___local)&&("" == ___uri)) {
                            state = 30;
                            return ;
                        }
                        break;
                    case  54 :
                        attIdx = context.getAttribute("", "pattern");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 57;
                            eatText17(v);
                            continue outer;
                        }
                        state = 57;
                        continue outer;
                    case  60 :
                        attIdx = context.getAttribute("", "root");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 63;
                            eatText18(v);
                            continue outer;
                        }
                        state = 63;
                        continue outer;
                    case  56 :
                        if (("pattern" == ___local)&&("" == ___uri)) {
                            state = 57;
                            return ;
                        }
                        break;
                    case  11 :
                        if (("direction" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                    case  8 :
                        if (("deverbal" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  5 :
                        if (("definiteness" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  9 :
                        attIdx = context.getAttribute("", "direction");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText19(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  38 :
                        if (("inflectPossessiveS" == ___local)&&("" == ___uri)) {
                            state = 39;
                            return ;
                        }
                        break;
                    case  44 :
                        if (("inflectionPattern" == ___local)&&("" == ___uri)) {
                            state = 45;
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText20(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  39 :
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 42;
                            eatText21(v);
                            continue outer;
                        }
                        state = 42;
                        continue outer;
                    case  35 :
                        if (("inflectPossessiveP" == ___local)&&("" == ___uri)) {
                            state = 36;
                            return ;
                        }
                        break;
                    case  41 :
                        if (("inflectionBase" == ___local)&&("" == ___uri)) {
                            state = 42;
                            return ;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  10 :
                            state = 11;
                            eatText19(value);
                            return ;
                        case  31 :
                            state = 32;
                            eatText10(value);
                            return ;
                        case  57 :
                            attIdx = context.getAttribute("", "plural");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 60;
                                eatText1(v);
                                continue outer;
                            }
                            state = 60;
                            continue outer;
                        case  25 :
                            state = 26;
                            eatText16(value);
                            return ;
                        case  4 :
                            state = 5;
                            eatText20(value);
                            return ;
                        case  7 :
                            state = 8;
                            eatText14(value);
                            return ;
                        case  0 :
                            attIdx = context.getAttribute("", "acronym");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText2(v);
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  63 :
                            state = 64;
                            continue outer;
                        case  36 :
                            attIdx = context.getAttribute("", "inflectPossessiveS");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 39;
                                eatText3(v);
                                continue outer;
                            }
                            state = 39;
                            continue outer;
                        case  46 :
                            state = 47;
                            eatText11(value);
                            return ;
                        case  27 :
                            attIdx = context.getAttribute("", "inflectConstructP");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 30;
                                eatText4(v);
                                continue outer;
                            }
                            state = 30;
                            continue outer;
                        case  55 :
                            state = 56;
                            eatText17(value);
                            return ;
                        case  12 :
                            attIdx = context.getAttribute("", "dottedPlural");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 15;
                                eatText5(v);
                                continue outer;
                            }
                            state = 15;
                            continue outer;
                        case  43 :
                            state = 44;
                            eatText7(value);
                            return ;
                        case  18 :
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 21;
                                eatText6(v);
                                continue outer;
                            }
                            state = 21;
                            continue outer;
                        case  42 :
                            attIdx = context.getAttribute("", "inflectionPattern");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 45;
                                eatText7(v);
                                continue outer;
                            }
                            state = 45;
                            continue outer;
                        case  58 :
                            state = 59;
                            eatText1(value);
                            return ;
                        case  13 :
                            state = 14;
                            eatText5(value);
                            return ;
                        case  33 :
                            attIdx = context.getAttribute("", "inflectPossessiveP");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 36;
                                eatText8(v);
                                continue outer;
                            }
                            state = 36;
                            continue outer;
                        case  51 :
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 54;
                                eatText9(v);
                                continue outer;
                            }
                            state = 54;
                            continue outer;
                        case  19 :
                            state = 20;
                            eatText6(value);
                            return ;
                        case  34 :
                            state = 35;
                            eatText8(value);
                            return ;
                        case  30 :
                            attIdx = context.getAttribute("", "inflectConstructS");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 33;
                                eatText10(v);
                                continue outer;
                            }
                            state = 33;
                            continue outer;
                        case  16 :
                            state = 17;
                            eatText15(value);
                            return ;
                        case  45 :
                            attIdx = context.getAttribute("", "ipSource");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 48;
                                eatText11(v);
                                continue outer;
                            }
                            state = 48;
                            continue outer;
                        case  21 :
                            attIdx = context.getAttribute("", "foreign");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 24;
                                eatText12(v);
                                continue outer;
                            }
                            state = 24;
                            continue outer;
                        case  64 :
                            revertToParentFromText(value);
                            return ;
                        case  22 :
                            state = 23;
                            eatText12(value);
                            return ;
                        case  28 :
                            state = 29;
                            eatText4(value);
                            return ;
                        case  48 :
                            attIdx = context.getAttribute("", "lexicalLink");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 51;
                                eatText13(v);
                                continue outer;
                            }
                            state = 51;
                            continue outer;
                        case  6 :
                            attIdx = context.getAttribute("", "deverbal");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 9;
                                eatText14(v);
                                continue outer;
                            }
                            state = 9;
                            continue outer;
                        case  49 :
                            state = 50;
                            eatText13(value);
                            return ;
                        case  15 :
                            attIdx = context.getAttribute("", "dual");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 18;
                                eatText15(v);
                                continue outer;
                            }
                            state = 18;
                            continue outer;
                        case  1 :
                            state = 2;
                            eatText2(value);
                            return ;
                        case  24 :
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 27;
                                eatText16(v);
                                continue outer;
                            }
                            state = 27;
                            continue outer;
                        case  54 :
                            attIdx = context.getAttribute("", "pattern");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 57;
                                eatText17(v);
                                continue outer;
                            }
                            state = 57;
                            continue outer;
                        case  37 :
                            state = 38;
                            eatText3(value);
                            return ;
                        case  60 :
                            attIdx = context.getAttribute("", "root");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 63;
                                eatText18(v);
                                continue outer;
                            }
                            state = 63;
                            continue outer;
                        case  61 :
                            state = 62;
                            eatText18(value);
                            return ;
                        case  9 :
                            attIdx = context.getAttribute("", "direction");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 12;
                                eatText19(v);
                                continue outer;
                            }
                            state = 12;
                            continue outer;
                        case  52 :
                            state = 53;
                            eatText9(value);
                            return ;
                        case  3 :
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 6;
                                eatText20(v);
                                continue outer;
                            }
                            state = 6;
                            continue outer;
                        case  39 :
                            attIdx = context.getAttribute("", "inflectionBase");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 42;
                                eatText21(v);
                                continue outer;
                            }
                            state = 42;
                            continue outer;
                        case  40 :
                            state = 41;
                            eatText21(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
