//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.01.10 at 01:33:09 PM IST 
//


package lexicon.jaxb.impl;

public class QuantifierLexiconTypeImpl implements lexicon.jaxb.QuantifierLexiconType, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
{

    protected java.lang.String _Type;
    protected boolean has_Inflect;
    protected boolean _Inflect;
    protected java.lang.String _InflectionBase;
    protected com.sun.xml.bind.util.ListImpl _AddOrReplaceOrRemove;
    protected java.lang.String _Definiteness;
    public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (lexicon.jaxb.QuantifierLexiconType.class);
    }

    public java.lang.String getType() {
        if (_Type == null) {
            return "unspecified";
        } else {
            return _Type;
        }
    }

    public void setType(java.lang.String value) {
        _Type = value;
    }

    public boolean isInflect() {
        if (!has_Inflect) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Inflect;
        }
    }

    public void setInflect(boolean value) {
        _Inflect = value;
        has_Inflect = true;
    }

    public java.lang.String getInflectionBase() {
        if (_InflectionBase == null) {
            return "";
        } else {
            return _InflectionBase;
        }
    }

    public void setInflectionBase(java.lang.String value) {
        _InflectionBase = value;
    }

    protected com.sun.xml.bind.util.ListImpl _getAddOrReplaceOrRemove() {
        if (_AddOrReplaceOrRemove == null) {
            _AddOrReplaceOrRemove = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _AddOrReplaceOrRemove;
    }

    public java.util.List getAddOrReplaceOrRemove() {
        return _getAddOrReplaceOrRemove();
    }

    public java.lang.String getDefiniteness() {
        if (_Definiteness == null) {
            return "prohibited";
        } else {
            return _Definiteness;
        }
    }

    public void setDefiniteness(java.lang.String value) {
        _Definiteness = value;
    }

    public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
        return new lexicon.jaxb.impl.QuantifierLexiconTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx4 = 0;
        final int len4 = ((_AddOrReplaceOrRemove == null)? 0 :_AddOrReplaceOrRemove.size());
        while (idx4 != len4) {
            while (idx4 != len4) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove.get(idx4 ++)), "AddOrReplaceOrRemove");
            }
        }
    }

    public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx4 = 0;
        final int len4 = ((_AddOrReplaceOrRemove == null)? 0 :_AddOrReplaceOrRemove.size());
        if (_Definiteness!= null) {
            context.startAttribute("", "definiteness");
            try {
                context.text(((java.lang.String) _Definiteness), "Definiteness");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Inflect) {
            context.startAttribute("", "inflect");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Inflect)), "Inflect");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_InflectionBase!= null) {
            context.startAttribute("", "inflectionBase");
            try {
                context.text(((java.lang.String) _InflectionBase), "InflectionBase");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Type!= null) {
            context.startAttribute("", "type");
            try {
                context.text(((java.lang.String) _Type), "Type");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        while (idx4 != len4) {
            while (idx4 != len4) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove.get(idx4 ++)), "AddOrReplaceOrRemove");
            }
        }
    }

    public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx4 = 0;
        final int len4 = ((_AddOrReplaceOrRemove == null)? 0 :_AddOrReplaceOrRemove.size());
        while (idx4 != len4) {
            while (idx4 != len4) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove.get(idx4 ++)), "AddOrReplaceOrRemove");
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (lexicon.jaxb.QuantifierLexiconType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000 com.sun.msv."
+"grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.Unary"
+"Exp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003ppsr\u0000\u001dcom.sun.msv.grammar.Cho"
+"iceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\fppsq\u0000~\u0000\fppsq\u0000~\u0000\tsr\u0000\u0011java.lang"
+".Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.sun.msv.grammar.trex."
+"ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar"
+"/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001ai"
+"gnoreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0012p\u0000sq"
+"\u0000~\u0000\fppsq\u0000~\u0000\tq\u0000~\u0000\u0012psr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0014xq\u0000~\u0000\u0003q\u0000~\u0000\u0012psr\u00002com.sun.msv"
+".grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~"
+"\u0000\u0011\u0001q\u0000~\u0000\u001csr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dc"
+"om.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.gra"
+"mmar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001dq\u0000~\u0000\""
+"sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNa"
+"met\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000$xq\u0000~\u0000\u001ft\u0000&lexicon."
+"jaxb.QuantifierLexiconType.Addt\u0000+http://java.sun.com/jaxb/xj"
+"c/dummy-elementsq\u0000~\u0000\"sq\u0000~\u0000\tppsq\u0000~\u0000\u0013pp\u0000sq\u0000~\u0000\fppsq\u0000~\u0000\tq\u0000~\u0000\u0012psq"
+"\u0000~\u0000\u0019q\u0000~\u0000\u0012pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u0000*lexicon.jaxb.QuantifierLex"
+"iconType.Replaceq\u0000~\u0000\'sq\u0000~\u0000\tppsq\u0000~\u0000\u0013pp\u0000sq\u0000~\u0000\fppsq\u0000~\u0000\tq\u0000~\u0000\u0012psq"
+"\u0000~\u0000\u0019q\u0000~\u0000\u0012pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u0000)lexicon.jaxb.QuantifierLex"
+"iconType.Removeq\u0000~\u0000\'sq\u0000~\u0000\fppsq\u0000~\u0000\u0019q\u0000~\u0000\u0012psr\u0000\u001bcom.sun.msv.gram"
+"mar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype"
+";L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003"
+"ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataTy"
+"peWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatyp"
+"e.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValu"
+"eCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatype"
+"Impl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteTyp"
+"e;L\u0000\tfacetNameq\u0000~\u0000$xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeIm"
+"pl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000$L\u0000\btypeNameq\u0000~\u0000$L\u0000\nwhiteSpa"
+"cet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000\u0000t\u0000\u000fD"
+"efinitnessTypesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcess"
+"or$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpac"
+"eProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0000\u0000sr\u0000\"com.sun.msv.datatype.xsd.TokenT"
+"ype\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtom"
+"icType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Bt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokenq\u0000"
+"~\u0000I\u0001q\u0000~\u0000Nt\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000"
+"\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\nprohibitedt\u0000\boptionalt\u0000\brequiredt\u0000\ndefinitedlt"
+"\u0000\bexternalt\u0000\binternalxsr\u00000com.sun.msv.grammar.Expression$Nul"
+"lSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.String"
+"Pair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000$L\u0000\fnamespaceURIq\u0000~\u0000$xpq\u0000~\u0000Fq"
+"\u0000~\u0000Esq\u0000~\u0000#t\u0000\fdefinitenessq\u0000~\u0000Eq\u0000~\u0000\"sq\u0000~\u0000\fppsq\u0000~\u0000\u0019q\u0000~\u0000\u0012psq\u0000~\u0000"
+"8ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000L"
+"q\u0000~\u0000Ot\u0000\u0007booleanq\u0000~\u0000Iq\u0000~\u0000[sq\u0000~\u0000\\q\u0000~\u0000eq\u0000~\u0000Osq\u0000~\u0000#t\u0000\u0007inflectq\u0000~"
+"\u0000Eq\u0000~\u0000\"sq\u0000~\u0000\fppsq\u0000~\u0000\u0019q\u0000~\u0000\u0012psq\u0000~\u00008ppq\u0000~\u0000Nq\u0000~\u0000[sq\u0000~\u0000\\q\u0000~\u0000Pq\u0000~\u0000"
+"Osq\u0000~\u0000#t\u0000\u000einflectionBaseq\u0000~\u0000Eq\u0000~\u0000\"sq\u0000~\u0000\fppsq\u0000~\u0000\u0019q\u0000~\u0000\u0012psq\u0000~\u00008"
+"ppsq\u0000~\u0000<q\u0000~\u0000Et\u0000\u0012QuantifierTypeTypeq\u0000~\u0000I\u0000\u0000q\u0000~\u0000Nq\u0000~\u0000Nq\u0000~\u0000Qsq\u0000~"
+"\u0000Rw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\u0006amountt\u0000\tpartitivet\u0000\ndeterm"
+"inerxq\u0000~\u0000[sq\u0000~\u0000\\q\u0000~\u0000sq\u0000~\u0000Esq\u0000~\u0000#t\u0000\u0004typeq\u0000~\u0000Eq\u0000~\u0000\"sr\u0000\"com.sun"
+".msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun"
+"/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.gra"
+"mmar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVe"
+"rsionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u0015\u0001"
+"pq\u0000~\u0000\u000fq\u0000~\u0000\u0010q\u0000~\u0000(q\u0000~\u0000/q\u0000~\u0000\u0006q\u0000~\u0000\u0018q\u0000~\u0000+q\u0000~\u00002q\u0000~\u0000\u0017q\u0000~\u0000*q\u0000~\u00001q\u0000~\u0000"
+"\rq\u0000~\u0000\u000bq\u0000~\u00006q\u0000~\u0000`q\u0000~\u0000\u000eq\u0000~\u0000\u0005q\u0000~\u0000iq\u0000~\u0000\u0007q\u0000~\u0000oq\u0000~\u0000\bx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public static class AddImpl
        extends lexicon.jaxb.impl.QuantifierExceptionTypeImpl
        implements lexicon.jaxb.QuantifierLexiconType.Add, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
    {

        public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
        private static com.sun.msv.grammar.Grammar schemaFragment;

        private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
            return (lexicon.jaxb.QuantifierLexiconType.Add.class);
        }

        public java.lang.String ____jaxb_ri____getNamespaceURI() {
            return "";
        }

        public java.lang.String ____jaxb_ri____getLocalName() {
            return "add";
        }

        public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            return new lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl.Unmarshaller(context);
        }

        public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
            context.startElement("", "add");
            super.serializeURIs(context);
            context.endNamespaceDecls();
            super.serializeAttributes(context);
            context.endAttributes();
            super.serializeBody(context);
            context.endElement();
        }

        public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public java.lang.Class getPrimaryInterface() {
            return (lexicon.jaxb.QuantifierLexiconType.Add.class);
        }

        public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
            if (schemaFragment == null) {
                schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
+"\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/re"
+"laxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv"
+"/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv.datatype.xsd.TokenT"
+"ype\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtom"
+"icType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001dL\u0000\nwh"
+"iteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt"
+"\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.da"
+"tatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.su"
+"n.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com."
+"sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000"
+"\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~"
+"\u0000\u001dL\u0000\fnamespaceURIq\u0000~\u0000\u001dxpq\u0000~\u0000!q\u0000~\u0000 sr\u0000\u001dcom.sun.msv.grammar.Ch"
+"oiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.msv.grammar.AttributeE"
+"xp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang"
+".Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0014ppsr\u0000)com.sun.msv.datat"
+"ype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Se"
+"t;xr\u00009com.sun.msv.datatype.xsd.DataTypeWithValueConstraintFa"
+"cet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000"
+")Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'"
+"Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u001dxq\u0000~"
+"\u0000\u001ct\u0000\u0000t\u0000\u000eThreeStateTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001ft\u0000\u000benumerationsr\u0000\u0011jav"
+"a.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004tr"
+"uet\u0000\u0005falsexq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u00008q\u0000~\u00007sr\u0000#com.sun.msv.grammar.Simp"
+"leNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001dL\u0000\fnamespaceURIq\u0000~\u0000\u001dx"
+"r\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0007acronymq\u0000~\u00007"
+"sr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000-\u0001q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.pq\u0000~\u0000/sq\u0000~\u0000@t\u0000\tconst"
+"ructq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.pq\u0000~\u0000\u0017sq\u0000~\u0000@t\u0000\u0006dottedq\u0000~\u00007q"
+"\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.psq\u0000~\u0000\u0014ppsq\u0000~\u00000q\u0000~\u00007t\u0000\nGenderTypeq\u0000~\u0000"
+"$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u00009sq\u0000~\u0000:w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemin"
+"inet\u0000\u0016masculine and femininet\u0000\tmasculinexq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000Sq\u0000~"
+"\u00007sq\u0000~\u0000@t\u0000\u0006genderq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.psq\u0000~\u0000\u0014ppsr\u0000$c"
+"om.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001aq\u0000~\u0000 t\u0000\u0007"
+"booleanq\u0000~\u0000$q\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000aq\u0000~\u0000 sq\u0000~\u0000@t\u0000\u0010inflectConstructq\u0000"
+"~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.psq\u0000~\u0000\u0014ppsq\u0000~\u00000q\u0000~\u00007t\u0000\u0007PGNTypeq\u0000~"
+"\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u00009sq\u0000~\u0000:w\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/P"
+"lt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p"
+"/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Pl"
+"t\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p"
+"/F/Sgxq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000iq\u0000~\u00007sq\u0000~\u0000@t\u0000\u0003pgnq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000"
+"~\u0000+q\u0000~\u0000.psq\u0000~\u0000\u0014ppsq\u0000~\u00000q\u0000~\u00007t\u0000\fRegisterTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001f"
+"q\u0000~\u00009sq\u0000~\u0000:w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000&s"
+"q\u0000~\u0000\'q\u0000~\u0000\u0085q\u0000~\u00007sq\u0000~\u0000@t\u0000\bregisterq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000"
+".psq\u0000~\u0000\u0014ppsq\u0000~\u00000q\u0000~\u00007t\u0000\fSpellingTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u00009sq"
+"\u0000~\u0000:w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\tirregulart\u0000\bstandardxq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000\u0091q\u0000"
+"~\u00007sq\u0000~\u0000@t\u0000\bspellingq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000+ppq\u0000~\u0000\u0017sq\u0000~\u0000@t\u0000\u000etranslit"
+"eratedq\u0000~\u00007sq\u0000~\u0000+ppq\u0000~\u0000\u0017sq\u0000~\u0000@t\u0000\bundottedq\u0000~\u00007sq\u0000~\u0000)ppsq\u0000~\u0000+"
+"q\u0000~\u0000.psq\u0000~\u0000\u0014ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xq\u0000~\u0000\u001aq\u0000~\u0000 t\u0000\u0005QNameq\u0000~\u0000$q\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000\u00a3q\u0000~\u0000 sq\u0000~\u0000@t\u0000\u0004typ"
+"et\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000Esq\u0000~\u0000@t\u0000\u0003a"
+"ddq\u0000~\u00007sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\be"
+"xpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xps"
+"r\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I"
+"\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expr"
+"essionPool;xp\u0000\u0000\u0000\u0014\u0001pq\u0000~\u0000\rq\u0000~\u0000\u008dq\u0000~\u0000\nq\u0000~\u0000\u000fq\u0000~\u0000\u000bq\u0000~\u0000Oq\u0000~\u0000\\q\u0000~\u0000Gq"
+"\u0000~\u0000\u000eq\u0000~\u0000\u0010q\u0000~\u0000eq\u0000~\u0000\u0013q\u0000~\u0000\u0081q\u0000~\u0000*q\u0000~\u0000\u009eq\u0000~\u0000\tq\u0000~\u0000\fq\u0000~\u0000\u0011q\u0000~\u0000Kq\u0000~\u0000\u0012x"));
            }
            return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
        }

        public class Unmarshaller
            extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
        {


            public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
                super(context, "----");
            }

            protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
                this(context);
                state = startState;
            }

            public java.lang.Object owner() {
                return lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl.this;
            }

            public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  0 :
                            if (("add" == ___local)&&("" == ___uri)) {
                                context.pushAttributes(__atts, true);
                                state = 1;
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "acronym");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstruct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            break;
                    }
                    super.enterElement(___uri, ___local, ___qname, __atts);
                    break;
                }
            }

            public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  2 :
                            if (("add" == ___local)&&("" == ___uri)) {
                                context.popAttributes();
                                state = 3;
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromLeaveElement(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "acronym");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstruct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.leaveElement(___uri, ___local, ___qname);
                    break;
                }
            }

            public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            if (("acronym" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("construct" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dotted" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("gender" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectConstruct" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("pgn" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("register" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("spelling" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("transliterated" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.enterAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "acronym");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstruct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.leaveAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void handleText(final java.lang.String value)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    try {
                        switch (state) {
                            case  3 :
                                revertToParentFromText(value);
                                return ;
                            case  1 :
                                attIdx = context.getAttribute("", "acronym");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "construct");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dotted");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "gender");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectConstruct");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "pgn");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "register");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "spelling");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "transliterated");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                break;
                        }
                    } catch (java.lang.RuntimeException e) {
                        handleUnexpectedTextException(value, e);
                    }
                    break;
                }
            }

        }

    }

    public static class RemoveImpl
        extends lexicon.jaxb.impl.QuantifierExceptionTypeImpl
        implements lexicon.jaxb.QuantifierLexiconType.Remove, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
    {

        public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
        private static com.sun.msv.grammar.Grammar schemaFragment;

        private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
            return (lexicon.jaxb.QuantifierLexiconType.Remove.class);
        }

        public java.lang.String ____jaxb_ri____getNamespaceURI() {
            return "";
        }

        public java.lang.String ____jaxb_ri____getLocalName() {
            return "remove";
        }

        public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            return new lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl.Unmarshaller(context);
        }

        public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
            context.startElement("", "remove");
            super.serializeURIs(context);
            context.endNamespaceDecls();
            super.serializeAttributes(context);
            context.endAttributes();
            super.serializeBody(context);
            context.endElement();
        }

        public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public java.lang.Class getPrimaryInterface() {
            return (lexicon.jaxb.QuantifierLexiconType.Remove.class);
        }

        public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
            if (schemaFragment == null) {
                schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
+"\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/re"
+"laxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv"
+"/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv.datatype.xsd.TokenT"
+"ype\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtom"
+"icType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001dL\u0000\nwh"
+"iteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt"
+"\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.da"
+"tatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.su"
+"n.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com."
+"sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000"
+"\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~"
+"\u0000\u001dL\u0000\fnamespaceURIq\u0000~\u0000\u001dxpq\u0000~\u0000!q\u0000~\u0000 sr\u0000\u001dcom.sun.msv.grammar.Ch"
+"oiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.msv.grammar.AttributeE"
+"xp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang"
+".Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0014ppsr\u0000)com.sun.msv.datat"
+"ype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Se"
+"t;xr\u00009com.sun.msv.datatype.xsd.DataTypeWithValueConstraintFa"
+"cet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000"
+")Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'"
+"Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u001dxq\u0000~"
+"\u0000\u001ct\u0000\u0000t\u0000\u000eThreeStateTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001ft\u0000\u000benumerationsr\u0000\u0011jav"
+"a.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004tr"
+"uet\u0000\u0005falsexq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u00008q\u0000~\u00007sr\u0000#com.sun.msv.grammar.Simp"
+"leNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001dL\u0000\fnamespaceURIq\u0000~\u0000\u001dx"
+"r\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0007acronymq\u0000~\u00007"
+"sr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000-\u0001q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.pq\u0000~\u0000/sq\u0000~\u0000@t\u0000\tconst"
+"ructq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.pq\u0000~\u0000\u0017sq\u0000~\u0000@t\u0000\u0006dottedq\u0000~\u00007q"
+"\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.psq\u0000~\u0000\u0014ppsq\u0000~\u00000q\u0000~\u00007t\u0000\nGenderTypeq\u0000~\u0000"
+"$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u00009sq\u0000~\u0000:w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemin"
+"inet\u0000\u0016masculine and femininet\u0000\tmasculinexq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000Sq\u0000~"
+"\u00007sq\u0000~\u0000@t\u0000\u0006genderq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.psq\u0000~\u0000\u0014ppsr\u0000$c"
+"om.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001aq\u0000~\u0000 t\u0000\u0007"
+"booleanq\u0000~\u0000$q\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000aq\u0000~\u0000 sq\u0000~\u0000@t\u0000\u0010inflectConstructq\u0000"
+"~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.psq\u0000~\u0000\u0014ppsq\u0000~\u00000q\u0000~\u00007t\u0000\u0007PGNTypeq\u0000~"
+"\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u00009sq\u0000~\u0000:w\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/P"
+"lt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p"
+"/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Pl"
+"t\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p"
+"/F/Sgxq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000iq\u0000~\u00007sq\u0000~\u0000@t\u0000\u0003pgnq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000"
+"~\u0000+q\u0000~\u0000.psq\u0000~\u0000\u0014ppsq\u0000~\u00000q\u0000~\u00007t\u0000\fRegisterTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001f"
+"q\u0000~\u00009sq\u0000~\u0000:w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000&s"
+"q\u0000~\u0000\'q\u0000~\u0000\u0085q\u0000~\u00007sq\u0000~\u0000@t\u0000\bregisterq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000"
+".psq\u0000~\u0000\u0014ppsq\u0000~\u00000q\u0000~\u00007t\u0000\fSpellingTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u00009sq"
+"\u0000~\u0000:w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\tirregulart\u0000\bstandardxq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000\u0091q\u0000"
+"~\u00007sq\u0000~\u0000@t\u0000\bspellingq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000+ppq\u0000~\u0000\u0017sq\u0000~\u0000@t\u0000\u000etranslit"
+"eratedq\u0000~\u00007sq\u0000~\u0000+ppq\u0000~\u0000\u0017sq\u0000~\u0000@t\u0000\bundottedq\u0000~\u00007sq\u0000~\u0000)ppsq\u0000~\u0000+"
+"q\u0000~\u0000.psq\u0000~\u0000\u0014ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xq\u0000~\u0000\u001aq\u0000~\u0000 t\u0000\u0005QNameq\u0000~\u0000$q\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000\u00a3q\u0000~\u0000 sq\u0000~\u0000@t\u0000\u0004typ"
+"et\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000Esq\u0000~\u0000@t\u0000\u0006r"
+"emoveq\u0000~\u00007sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L"
+"\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;"
+"xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003"
+"\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/E"
+"xpressionPool;xp\u0000\u0000\u0000\u0014\u0001pq\u0000~\u0000\rq\u0000~\u0000\u008dq\u0000~\u0000\nq\u0000~\u0000\u000fq\u0000~\u0000\u000bq\u0000~\u0000Oq\u0000~\u0000\\q\u0000~"
+"\u0000Gq\u0000~\u0000\u000eq\u0000~\u0000\u0010q\u0000~\u0000eq\u0000~\u0000\u0013q\u0000~\u0000\u0081q\u0000~\u0000*q\u0000~\u0000\u009eq\u0000~\u0000\tq\u0000~\u0000\fq\u0000~\u0000\u0011q\u0000~\u0000Kq\u0000~"
+"\u0000\u0012x"));
            }
            return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
        }

        public class Unmarshaller
            extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
        {


            public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
                super(context, "----");
            }

            protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
                this(context);
                state = startState;
            }

            public java.lang.Object owner() {
                return lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl.this;
            }

            public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "acronym");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstruct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            break;
                        case  0 :
                            if (("remove" == ___local)&&("" == ___uri)) {
                                context.pushAttributes(__atts, true);
                                state = 1;
                                return ;
                            }
                            break;
                    }
                    super.enterElement(___uri, ___local, ___qname, __atts);
                    break;
                }
            }

            public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromLeaveElement(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "acronym");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstruct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  2 :
                            if (("remove" == ___local)&&("" == ___uri)) {
                                context.popAttributes();
                                state = 3;
                                return ;
                            }
                            break;
                    }
                    super.leaveElement(___uri, ___local, ___qname);
                    break;
                }
            }

            public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            if (("acronym" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("construct" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dotted" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("gender" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectConstruct" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("pgn" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("register" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("spelling" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("transliterated" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.enterAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "acronym");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstruct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.leaveAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void handleText(final java.lang.String value)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    try {
                        switch (state) {
                            case  3 :
                                revertToParentFromText(value);
                                return ;
                            case  1 :
                                attIdx = context.getAttribute("", "acronym");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "construct");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dotted");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "gender");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectConstruct");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "pgn");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "register");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "spelling");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "transliterated");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                break;
                        }
                    } catch (java.lang.RuntimeException e) {
                        handleUnexpectedTextException(value, e);
                    }
                    break;
                }
            }

        }

    }

    public static class ReplaceImpl
        extends lexicon.jaxb.impl.QuantifierExceptionTypeImpl
        implements lexicon.jaxb.QuantifierLexiconType.Replace, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
    {

        public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
        private static com.sun.msv.grammar.Grammar schemaFragment;

        private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
            return (lexicon.jaxb.QuantifierLexiconType.Replace.class);
        }

        public java.lang.String ____jaxb_ri____getNamespaceURI() {
            return "";
        }

        public java.lang.String ____jaxb_ri____getLocalName() {
            return "replace";
        }

        public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            return new lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl.Unmarshaller(context);
        }

        public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
            context.startElement("", "replace");
            super.serializeURIs(context);
            context.endNamespaceDecls();
            super.serializeAttributes(context);
            context.endAttributes();
            super.serializeBody(context);
            context.endElement();
        }

        public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public java.lang.Class getPrimaryInterface() {
            return (lexicon.jaxb.QuantifierLexiconType.Replace.class);
        }

        public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
            if (schemaFragment == null) {
                schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
+"\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/re"
+"laxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv"
+"/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv.datatype.xsd.TokenT"
+"ype\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtom"
+"icType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001dL\u0000\nwh"
+"iteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt"
+"\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.da"
+"tatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.su"
+"n.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com."
+"sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000"
+"\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~"
+"\u0000\u001dL\u0000\fnamespaceURIq\u0000~\u0000\u001dxpq\u0000~\u0000!q\u0000~\u0000 sr\u0000\u001dcom.sun.msv.grammar.Ch"
+"oiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.msv.grammar.AttributeE"
+"xp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang"
+".Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0014ppsr\u0000)com.sun.msv.datat"
+"ype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Se"
+"t;xr\u00009com.sun.msv.datatype.xsd.DataTypeWithValueConstraintFa"
+"cet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000"
+")Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'"
+"Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u001dxq\u0000~"
+"\u0000\u001ct\u0000\u0000t\u0000\u000eThreeStateTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001ft\u0000\u000benumerationsr\u0000\u0011jav"
+"a.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004tr"
+"uet\u0000\u0005falsexq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u00008q\u0000~\u00007sr\u0000#com.sun.msv.grammar.Simp"
+"leNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001dL\u0000\fnamespaceURIq\u0000~\u0000\u001dx"
+"r\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0007acronymq\u0000~\u00007"
+"sr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000-\u0001q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.pq\u0000~\u0000/sq\u0000~\u0000@t\u0000\tconst"
+"ructq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.pq\u0000~\u0000\u0017sq\u0000~\u0000@t\u0000\u0006dottedq\u0000~\u00007q"
+"\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.psq\u0000~\u0000\u0014ppsq\u0000~\u00000q\u0000~\u00007t\u0000\nGenderTypeq\u0000~\u0000"
+"$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u00009sq\u0000~\u0000:w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemin"
+"inet\u0000\u0016masculine and femininet\u0000\tmasculinexq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000Sq\u0000~"
+"\u00007sq\u0000~\u0000@t\u0000\u0006genderq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.psq\u0000~\u0000\u0014ppsr\u0000$c"
+"om.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001aq\u0000~\u0000 t\u0000\u0007"
+"booleanq\u0000~\u0000$q\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000aq\u0000~\u0000 sq\u0000~\u0000@t\u0000\u0010inflectConstructq\u0000"
+"~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000.psq\u0000~\u0000\u0014ppsq\u0000~\u00000q\u0000~\u00007t\u0000\u0007PGNTypeq\u0000~"
+"\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u00009sq\u0000~\u0000:w\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/P"
+"lt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p"
+"/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Pl"
+"t\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p"
+"/F/Sgxq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000iq\u0000~\u00007sq\u0000~\u0000@t\u0000\u0003pgnq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000"
+"~\u0000+q\u0000~\u0000.psq\u0000~\u0000\u0014ppsq\u0000~\u00000q\u0000~\u00007t\u0000\fRegisterTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001f"
+"q\u0000~\u00009sq\u0000~\u0000:w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000&s"
+"q\u0000~\u0000\'q\u0000~\u0000\u0085q\u0000~\u00007sq\u0000~\u0000@t\u0000\bregisterq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000"
+".psq\u0000~\u0000\u0014ppsq\u0000~\u00000q\u0000~\u00007t\u0000\fSpellingTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u00009sq"
+"\u0000~\u0000:w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\tirregulart\u0000\bstandardxq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000\u0091q\u0000"
+"~\u00007sq\u0000~\u0000@t\u0000\bspellingq\u0000~\u00007q\u0000~\u0000Esq\u0000~\u0000+ppq\u0000~\u0000\u0017sq\u0000~\u0000@t\u0000\u000etranslit"
+"eratedq\u0000~\u00007sq\u0000~\u0000+ppq\u0000~\u0000\u0017sq\u0000~\u0000@t\u0000\bundottedq\u0000~\u00007sq\u0000~\u0000)ppsq\u0000~\u0000+"
+"q\u0000~\u0000.psq\u0000~\u0000\u0014ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xq\u0000~\u0000\u001aq\u0000~\u0000 t\u0000\u0005QNameq\u0000~\u0000$q\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000\u00a3q\u0000~\u0000 sq\u0000~\u0000@t\u0000\u0004typ"
+"et\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000Esq\u0000~\u0000@t\u0000\u0007r"
+"eplaceq\u0000~\u00007sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001"
+"L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash"
+";xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c"
+"\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/"
+"ExpressionPool;xp\u0000\u0000\u0000\u0014\u0001pq\u0000~\u0000\rq\u0000~\u0000\u008dq\u0000~\u0000\nq\u0000~\u0000\u000fq\u0000~\u0000\u000bq\u0000~\u0000Oq\u0000~\u0000\\q\u0000"
+"~\u0000Gq\u0000~\u0000\u000eq\u0000~\u0000\u0010q\u0000~\u0000eq\u0000~\u0000\u0013q\u0000~\u0000\u0081q\u0000~\u0000*q\u0000~\u0000\u009eq\u0000~\u0000\tq\u0000~\u0000\fq\u0000~\u0000\u0011q\u0000~\u0000Kq\u0000"
+"~\u0000\u0012x"));
            }
            return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
        }

        public class Unmarshaller
            extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
        {


            public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
                super(context, "----");
            }

            protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
                this(context);
                state = startState;
            }

            public java.lang.Object owner() {
                return lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl.this;
            }

            public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "acronym");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstruct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            break;
                        case  0 :
                            if (("replace" == ___local)&&("" == ___uri)) {
                                context.pushAttributes(__atts, true);
                                state = 1;
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                            return ;
                    }
                    super.enterElement(___uri, ___local, ___qname, __atts);
                    break;
                }
            }

            public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "acronym");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstruct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  2 :
                            if (("replace" == ___local)&&("" == ___uri)) {
                                context.popAttributes();
                                state = 3;
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromLeaveElement(___uri, ___local, ___qname);
                            return ;
                    }
                    super.leaveElement(___uri, ___local, ___qname);
                    break;
                }
            }

            public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            if (("acronym" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("construct" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dotted" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("gender" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("inflectConstruct" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("pgn" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("register" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("spelling" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("transliterated" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.QuantifierExceptionTypeImpl)lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                            return ;
                    }
                    super.enterAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "acronym");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectConstruct");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                            return ;
                    }
                    super.leaveAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void handleText(final java.lang.String value)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    try {
                        switch (state) {
                            case  1 :
                                attIdx = context.getAttribute("", "acronym");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "construct");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dotted");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "gender");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "inflectConstruct");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "pgn");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "register");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "spelling");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "transliterated");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                break;
                            case  3 :
                                revertToParentFromText(value);
                                return ;
                        }
                    } catch (java.lang.RuntimeException e) {
                        handleUnexpectedTextException(value, e);
                    }
                    break;
                }
            }

        }

    }

    public class Unmarshaller
        extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            super(context, "--------------");
        }

        protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return lexicon.jaxb.impl.QuantifierLexiconTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  9 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText1(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText2(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  12 :
                        if (("add" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl.class), 13, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl.class), 13, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl.class), 13, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 13;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText3(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText4(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  13 :
                        if (("add" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl.class), 13, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl.class), 13, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl.class), 13, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Type = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _InflectionBase = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Definiteness = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Inflect = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Inflect = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  9 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText1(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText2(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  12 :
                        state = 13;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText3(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText4(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  13 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  9 :
                        if (("type" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  6 :
                        if (("inflectionBase" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  12 :
                        state = 13;
                        continue outer;
                    case  0 :
                        if (("definiteness" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  3 :
                        if (("inflect" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  13 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  9 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText1(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  5 :
                        if (("inflect" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText2(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  12 :
                        state = 13;
                        continue outer;
                    case  11 :
                        if (("type" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText3(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  2 :
                        if (("definiteness" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText4(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  8 :
                        if (("inflectionBase" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  13 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  9 :
                            attIdx = context.getAttribute("", "type");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 12;
                                eatText1(v);
                                continue outer;
                            }
                            state = 12;
                            continue outer;
                        case  6 :
                            attIdx = context.getAttribute("", "inflectionBase");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 9;
                                eatText2(v);
                                continue outer;
                            }
                            state = 9;
                            continue outer;
                        case  12 :
                            state = 13;
                            continue outer;
                        case  0 :
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText3(v);
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  3 :
                            attIdx = context.getAttribute("", "inflect");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 6;
                                eatText4(v);
                                continue outer;
                            }
                            state = 6;
                            continue outer;
                        case  7 :
                            state = 8;
                            eatText2(value);
                            return ;
                        case  10 :
                            state = 11;
                            eatText1(value);
                            return ;
                        case  1 :
                            state = 2;
                            eatText3(value);
                            return ;
                        case  4 :
                            state = 5;
                            eatText4(value);
                            return ;
                        case  13 :
                            revertToParentFromText(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
