//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.02.17 at 12:10:17 GMT+02:00 
//
package lexicon.contents.exception_types;

import java.net.URLEncoder;

import lexicon.contents.Content;
import lexicon.tools.LexiconUtils;

/**
 * ���� �� ���� ������ ������
 * ����� ���� ����� ������� ���
 * ���� ������, ��� ���� �����
 * ����������. ����, ���� ��
 * ���� �� ������ ����� (���� ��
 * ������ ���) ����� �����.
 * �����: ====== �� ���� (gender) ��� ����
 * (feminine), ��� ��� ������ ������ �-
 * feminine (���� ����) ���� �� �����
 * ����� �- feminine (���� ����) ����
 * ��� ������ ��� (gender) ��� ����
 * (feminine). �����: ====== �� ������ (number)
 * ��� ���� (plural), ��� ��� ������
 * ������ �- plural (���� �����) ����
 * �� ����� ����� �- plural (����
 * �����) ���� ��� ������ �����
 * (number) ��� ���� (plural). �����: ====== ��
 * dual="true" ��� �� ���� ����� �-
 * number="singular". �"� ����� �� ����
 * ����� ����� ��� ����� ���
 * ������ ���.
 * 
 * Java content class for NounExceptionType complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this java content object. (defined at file:/C:/hebrew_lexicon.xsd line 342)
 * <p>
 * 
 * <pre>
 * &lt;complexType name="NounExceptionType">
 *   &lt;simpleContent>
 *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>token">
 *       &lt;attribute name="construct" type="{}TriStateType" default="unspecified" />
 *       &lt;attribute name="dotted" type="{http://www.w3.org/2001/XMLSchema}token" default="" />
 *       &lt;attribute name="dual" type="{}TriStateType" default="unspecified" />
 *       &lt;attribute name="feminine" type="{}FeminineType" default="irrelevant" />
 *       &lt;attribute name="gender" type="{}GenderType" default="unspecified" />
 *       &lt;attribute name="inflectConstruct" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" />
 *       &lt;attribute name="inflectPossessive" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" />
 *       &lt;attribute name="number" type="{}NumberType" default="unspecified" />
 *       &lt;attribute name="plural" type="{}PluralType" default="irrelevant" />
 *       &lt;attribute name="possessive" type="{}PGNType" default="unspecified" />
 *       &lt;attribute name="script" type="{}ScriptType" default="formal" />
 *       &lt;attribute name="transliterated" use="required" type="{http://www.w3.org/2001/XMLSchema}token" />
 *       &lt;attribute name="undotted" use="required" type="{http://www.w3.org/2001/XMLSchema}token" />
 *     &lt;/extension>
 *   &lt;/simpleContent>
 * &lt;/complexType>
 * </pre>
 * 
 */
public class NounExceptionType extends Content implements lexicon.jaxb.NounExceptionType {
	protected lexicon.jaxb.NounExceptionType content;

	public NounExceptionType(lexicon.jaxb.NounExceptionType content) {
		this.content = content;
		TABLE = "noun_exception_type";
		IDNAME = "aid";
	}

	public NounExceptionType() {
		content = new lexicon.jaxb.impl.NounExceptionTypeImpl();
		TABLE = "noun_exception_type";
		IDNAME = "aid";
	}

	public lexicon.jaxb.impl.NounExceptionTypeImpl getImpl() {
		return (lexicon.jaxb.impl.NounExceptionTypeImpl) content;
	}

	public int add() {
		return 0;
	}

	/**
	 * An empty implementation to the method add() methods in the different
	 * subclasses of Content. Connects to the DB, commits the different SQL
	 * statements and return feedback.
	 * 
	 * @param sql
	 *           - The SQL statement to be executed.
	 * @return Number of rows affected (0, if nothing happened, 1 if one row added).
	 */
	public int add(int id) {
		String sql = "INSERT INTO " + getTableName() + " VALUES (";
		sql += "0, ";
		sql += id;
		String undotted = getUndotted();
		try {
			undotted = URLEncoder.encode(undotted, Content.ADD_ENCODING);
		} catch (Exception e) {
		}
		sql += ", '" + undotted + "'";
		String transliterated = LexiconUtils.getTransliteration(undotted);
		try {
			transliterated = URLEncoder.encode(transliterated, Content.ADD_ENCODING);
		} catch (Exception e) {
		}
		sql += ", '" + transliterated + "'";
		String dotted = getDotted();
		try {
			dotted = URLEncoder.encode(dotted, Content.ADD_ENCODING);

		} catch (Exception e) {
		}
		sql += ", '" + dotted + "'";
		sql += ", '" + getRegister() + "'";
		sql += ", '" + getSpelling() + "'";
		sql += ", '" + getGender() + "'";
		sql += ", '" + getNumber() + "'";
		sql += ", '" + getFeminine() + "'";
		sql += ", '" + getPlural() + "'";
		sql += ", '" + getPossessive() + "'";
		sql += ", '" + getConstruct() + "'";
		sql += ", '" + getDual() + "'";
		sql += ", " + (isInflectConstructS() ? 1 : 0);
		sql += ", " + (isInflectPossessiveS() ? 1 : 0);
		sql += ", " + (isInflectConstructP() ? 1 : 0);
		sql += ", " + (isInflectPossessiveP() ? 1 : 0);
		sql += ", '" + getAction() + "')";
		int feedback = execute(sql);
		id = getCurrentID(getTableName(), getIDName());
		return id;
	}

	/**
	 * Updates the current record in the DB, so it would resemble the current object
	 * state. The method uses ResultSet.updateRow method in order to implement the
	 * generic update process. The method finds the record of the current object,
	 * generates the meta data (the names and types of the columns) , Runs on the
	 * columns and updateing each one, according with the column type. After these
	 * stages, the method calls <code>ResultSet.updateRow</code> in order to execute
	 * the update in the DB.
	 * 
	 * @see #info
	 * @see ResultSet#updateRow
	 * @see #openRS
	 * @return The number of rows that were affected from the action. If 0, then
	 *         nothing happened
	 */
	public int update() {
		String sql = "UPDATE " + getTableName() + " SET";
		String undotted = getUndotted();
		try {
			undotted = URLEncoder.encode(undotted, Content.UPDATE_ENCODING);
		} catch (Exception e) {
		}
		sql += " undotted='" + undotted + "'";
		String transliterated = LexiconUtils.getTransliteration(undotted);
		try {
			transliterated = URLEncoder.encode(transliterated, Content.UPDATE_ENCODING);
		} catch (Exception e) {
		}
		sql += ", transliterated='" + transliterated + "'";
		String dotted = getDotted();
		try {
			dotted = URLEncoder.encode(dotted, Content.UPDATE_ENCODING);
		} catch (Exception e) {
		}
		sql += ", dotted='" + dotted + "'";
		sql += ", register='" + getRegister() + "'";
		sql += ", spelling='" + getSpelling() + "'";
		sql += ", gender='" + getGender() + "'";
		sql += ", number='" + getNumber() + "'";
		sql += ", feminine='" + getFeminine() + "'";
		sql += ", plural='" + getPlural() + "'";
		sql += ", possessive='" + getPossessive() + "'";
		sql += ", construct='" + getConstruct() + "'";
		sql += ", is_dual='" + getDual() + "'";
		sql += ", inflectConstructS=" + (isInflectConstructS() ? 1 : 0);
		sql += ", inflectPossessiveS=" + (isInflectPossessiveS() ? 1 : 0);
		sql += ", inflectConstructP=" + (isInflectConstructP() ? 1 : 0);
		sql += ", inflectPossessiveP=" + (isInflectPossessiveP() ? 1 : 0);
		sql += ", action='" + getAction() + "' WHERE aid=" + getID();
		int feedback = execute(sql);
		return feedback;
	}

	public void setAction(String action) {
		set("action", action);
	}

	public String getAction() {
		if (getString("action") == null) {
			return "";
		}
		return getString("action");
	}

	public void load() {
		setValue("");
		setDotted(getString("dotted"));
		setUndotted(getString("undotted"));
		setRegister(getString("register"));
		setSpelling(getString("spelling"));
		setTransliterated(getString("transliterated"));
		setPlural(getString("plural"));
		setFeminine(getString("feminine"));
		setDual(getString("is_dual"));
		setConstruct(getString("construct"));
		setNumber(getString("number"));
		setGender(getString("gender"));
		setPossessive(getString("possessive"));
		setInflectConstructS(getInt("inflectConstructS") == 1);
		setInflectPossessiveS(getInt("inflectPossessiveS") == 1);
		setInflectConstructP(getInt("inflectConstructP") == 1);
		setInflectPossessiveP(getInt("inflectPossessiveP") == 1);
	}

	/**
	 * Gets the value of the feminine property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getFeminine() {
		return content.getFeminine();
	}

	/**
	 * Sets the value of the feminine property.
	 * 
	 * @param value
	 *           allowed object is {@link java.lang.String}
	 */
	public void setFeminine(java.lang.String value) {
		content.setFeminine(value);
	}

	/**
	 * Gets the value of the possessive property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getPossessive() {
		return content.getPossessive();
	}

	/**
	 * Sets the value of the possessive property.
	 * 
	 * @param value
	 *           allowed object is {@link java.lang.String}
	 */
	public void setPossessive(java.lang.String value) {
		content.setPossessive(value);
	}

	/**
	 * Gets the value of the gender property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getGender() {
		return content.getGender();
	}

	/**
	 * Sets the value of the gender property.
	 * 
	 * @param value
	 *           allowed object is {@link java.lang.String}
	 */
	public void setGender(java.lang.String value) {
		content.setGender(value);
	}

	/**
	 * Gets the value of the plural property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getPlural() {
		return content.getPlural();
	}

	/**
	 * Sets the value of the plural property.
	 * 
	 * @param value
	 *           allowed object is {@link java.lang.String}
	 */
	public void setPlural(java.lang.String value) {
		content.setPlural(value);
	}

	/**
	 * Gets the value of the script property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getRegister() {
		return content.getRegister();
	}

	/**
	 * Sets the value of the script property.
	 * 
	 * @param value
	 *           allowed object is {@link java.lang.String}
	 */
	public void setRegister(java.lang.String value) {
		content.setRegister(value);
	}

	/**
	 * Gets the value of the script property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getSpelling() {
		return content.getSpelling();
	}

	/**
	 * Sets the value of the script property.
	 * 
	 * @param value
	 *           allowed object is {@link java.lang.String}
	 */
	public void setSpelling(java.lang.String value) {
		content.setSpelling(value);
	}

	/**
	 * Gets the value of the transliterated property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getTransliterated() {
		if (content.getTransliterated() == null) {
			return "";
		}
		return content.getTransliterated();
	}

	/**
	 * Sets the value of the transliterated property.
	 * 
	 * @param value
	 *           allowed object is {@link java.lang.String}
	 */
	public void setTransliterated(java.lang.String value) {
		content.setTransliterated(value);
	}

	/**
	 * Gets the value of the value property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getValue() {
		return content.getValue();
	}

	/**
	 * Sets the value of the value property.
	 * 
	 * @param value
	 *           allowed object is {@link java.lang.String}
	 */
	public void setValue(java.lang.String value) {
		content.setValue(value);
	}

	/**
	 * Gets the value of the construct property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getConstruct() {
		return content.getConstruct();
	}

	/**
	 * Sets the value of the construct property.
	 * 
	 * @param value
	 *           allowed object is {@link java.lang.String}
	 */
	public void setConstruct(java.lang.String value) {
		content.setConstruct(value);
	}

	/**
	 * Gets the value of the dual property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getDual() {
		return content.getDual();
	}

	/**
	 * Sets the value of the dual property.
	 * 
	 * @param value
	 *           allowed object is {@link java.lang.String}
	 */
	public void setDual(java.lang.String value) {
		content.setDual(value);
	}

	/**
	 * Gets the value of the number property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getNumber() {
		return content.getNumber();
	}

	/**
	 * Sets the value of the number property.
	 * 
	 * @param value
	 *           allowed object is {@link java.lang.String}
	 */
	public void setNumber(java.lang.String value) {
		content.setNumber(value);
	}

	/**
	 * Gets the value of the dotted property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getDotted() {
		if (content.getDotted() == null) {
			return "";
		}
		return content.getDotted();
	}

	/**
	 * Sets the value of the dotted property.
	 * 
	 * @param value
	 *           allowed object is {@link java.lang.String}
	 */
	public void setDotted(java.lang.String value) {
		content.setDotted(value);
	}

	/**
	 * Gets the value of the undotted property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getUndotted() {
		if (content.getUndotted() == null) {
			return "";
		}
		return content.getUndotted();
	}

	/**
	 * Sets the value of the undotted property.
	 * 
	 * @param value
	 *           allowed object is {@link java.lang.String}
	 */
	public void setUndotted(java.lang.String value) {
		content.setUndotted(value);
	}

	/**
	 * Gets the value of the inflectConstruct property.
	 * 
	 */

	public boolean isInflectConstructS() {
		return content.isInflectConstructS();
	}

	/**
	 * Sets the value of the inflectConstruct property.
	 * 
	 */
	public void setInflectConstructS(boolean value) {
		content.setInflectConstructS(value);
	}

	public boolean isInflectPossessiveS() {
		return content.isInflectPossessiveS();
	}

	/**
	 * Sets the value of the inflectConstruct property.
	 * 
	 */
	public void setInflectPossessiveS(boolean value) {
		content.setInflectPossessiveS(value);
	}

	/**
	 * Gets the value of the inflectConstruct property.
	 * 
	 */

	public boolean isInflectConstructP() {
		return content.isInflectConstructP();
	}

	/**
	 * Sets the value of the inflectConstruct property.
	 * 
	 */
	public void setInflectConstructP(boolean value) {
		content.setInflectConstructP(value);
	}

	public boolean isInflectPossessiveP() {
		return content.isInflectPossessiveP();
	}

	/**
	 * Sets the value of the inflectConstruct property.
	 * 
	 */
	public void setInflectPossessiveP(boolean value) {
		content.setInflectPossessiveP(value);
	}

}
