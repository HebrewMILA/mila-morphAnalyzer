//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.02.17 at 12:10:17 GMT+02:00 
//
package lexicon.contents.exception_types;

import java.net.URLEncoder;

import lexicon.contents.Content;
import lexicon.tools.LexiconUtils;
/**
 * ���� �� ���� ������ ������ ����� ���� ����� ������� ��� ���� ������, ��� ���� ����� ����������.
 * ����, ���� �� ���� �� ������ ����� (���� �� ������ ���) ����� �����.
 * 
 * Java content class for VerbExceptionType complex type.
 * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/C:/hebrew_lexicon.xsd line 695)
 * <p>
 * <pre>
 * &lt;complexType name="VerbExceptionType">
 *   &lt;simpleContent>
 *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>token">
 *       &lt;attribute name="accusativeSuffix" type="{}PGNType" default="unspecified" />
 *       &lt;attribute name="dotted" type="{http://www.w3.org/2001/XMLSchema}token" default="" />
 *       &lt;attribute name="pgn" use="required" type="{}PGNType" />
 *       &lt;attribute name="script" type="{}ScriptType" default="formal" />
 *       &lt;attribute name="tense" use="required" type="{}TenseType" />
 *       &lt;attribute name="transliterated" use="required" type="{http://www.w3.org/2001/XMLSchema}token" />
 *       &lt;attribute name="undotted" use="required" type="{http://www.w3.org/2001/XMLSchema}token" />
 *     &lt;/extension>
 *   &lt;/simpleContent>
 * &lt;/complexType>
 * </pre>
 * 
 */
public class VerbExceptionType extends Content implements lexicon.jaxb.VerbExceptionType{
	protected lexicon.jaxb.VerbExceptionType content; 
	
	public VerbExceptionType(lexicon.jaxb.VerbExceptionType content) {
		this.content = content;
		TABLE = "verb_exception_type";
		IDNAME = "aid";  
	}
	public VerbExceptionType( ) {
		content = new lexicon.jaxb.impl.VerbExceptionTypeImpl();
		TABLE = "verb_exception_type";
		IDNAME = "aid"; 
	}
	public lexicon.jaxb.impl.VerbExceptionTypeImpl getImpl() {
		return (lexicon.jaxb.impl.VerbExceptionTypeImpl)content;
	}
	public int add() {
		return 0;
	}
	/**
	*An empty implementation to the method add() methods in the different subclasses of Content.
	*Connects to the DB, commits the different SQL statements and return feedback.
	*@param		sql - The SQL statement to be executed.
	*@return	Number of rows affected (0, if nothing happened, 1 if one row added).
	*/
	public int add(int id) {
		String sql = "INSERT INTO "+ getTableName() + " VALUES (";
		sql += "0, ";
		sql += id;
		String undotted = getUndotted(); 
		try {
			undotted = URLEncoder.encode(undotted, Content.ADD_ENCODING);
		}catch (Exception e) {}
		sql += ", '"+undotted+"'";
		String transliterated = LexiconUtils.getTransliteration(undotted);
		try {
			transliterated = URLEncoder.encode(transliterated, Content.ADD_ENCODING);			
		}catch (Exception e) {} 
		sql += ", '"+transliterated+"'";
		String dotted = getDotted(); 
		try {
			dotted = URLEncoder.encode(dotted, Content.ADD_ENCODING);
		}catch (Exception e) {}
		sql += ", '"+dotted+"'";
		sql += ", '"+ getRegister() +"'";
		sql += ", '"+ getSpelling() +"'";
		sql += ", '"+getTense()+"'";
		sql += ", '"+getGender()+"'";
		sql += ", '"+getNumber()+"'";
		sql += ", '"+getPerson()+"'";
		sql += ", '"+getPgn()+"'";
		sql += ", "+(isBeinoniConstruct()?1:0);
		sql += ", "+(isBeinoniDefiniteness()?1:0);
		sql += ", "+(isInflectBeinoniPossessive()?1:0);
		sql += ", '"+getAction()+"')";
		int feedback = execute(sql);
		id = getCurrentID(getTableName(), getIDName());  
		return id;
	}
	/**
	*Updates the current record in the DB, so it would resemble the current object state.
	*The method uses ResultSet.updateRow method in order to implement the generic update process.
	*The method finds the record of the current object, generates the meta data (the names and types of the columns)
	*, Runs on the columns and updateing each one, according with the column type. After these stages, the
	*method calls <code>ResultSet.updateRow</code> in order to execute the update in the DB.
	*@see   #info
	*@see   ResultSet#updateRow
	*@see   #openRS
	*@return	The number of rows that were affected from the action. If 0, then nothing happened
	*/
	public int update() {
		String sql = "UPDATE "+ getTableName() + " SET";
		String undotted = getUndotted(); 
		try {
			undotted = URLEncoder.encode(undotted, Content.UPDATE_ENCODING);
		}catch (Exception e) {}
		sql += " undotted='"+ undotted +"'";
		String transliterated = LexiconUtils.getTransliteration(undotted);
		try {
			transliterated = URLEncoder.encode(transliterated, Content.UPDATE_ENCODING);			
		}catch (Exception e) {} 
		sql += ", transliterated='"+ transliterated +"'";
		String dotted = getDotted(); 
		try {
			dotted = URLEncoder.encode(dotted, Content.UPDATE_ENCODING); 
		}catch (Exception e) {}
		sql += ", dotted='"+ dotted +"'";
		sql += ", register='"+ getRegister() +"'";
		sql += ", spelling='"+ getSpelling() +"'";
		sql += ", tense='"+getTense()+"'";
		sql += ", gender='"+getGender()+"'";
		sql += ", number='"+getNumber()+"'";
		sql += ", person='"+getPerson()+"'";
		sql += ", pgn='"+getPgn()+"'";
		sql += ", beinoniConstruct="+(isBeinoniConstruct()?1:0);
		sql += ", beinoniDefiniteness="+(isBeinoniDefiniteness()?1:0);
		sql += ", InflectBeinoniPossessive="+(isInflectBeinoniPossessive()?1:0);
		sql += ", action='"+getAction()+"' WHERE aid="+getID();
		int feedback = execute(sql);  
		return feedback;
	}
	public void setAction(String action) {
		set("action", action);
	}
	public String getAction() {
		if (getString("action") == null) {
			return "";
		}
		return getString("action");
	}
	public void load() {
		setValue("");
		setDotted(getString("dotted"));
		setUndotted(getString("undotted"));
		setRegister(getString("register"));
		setSpelling(getString("spelling"));
		setTransliterated(getString("transliterated"));
		setTense(getString("tense"));
		setGender(getString("gender"));
		setNumber(getString("number"));
		setPerson(getString("person"));
		setPgn(getString("pgn"));
		setBeinoniConstruct(getInt("beinoniConstruct")==1);
		setBeinoniDefiniteness(getInt("beinoniDefiniteness")==1);
		setInflectBeinoniPossessive(getInt("inflectBeinoniPossessive")==1);
		setValue("");
	}

    /**
     * Gets the value of the tense property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getTense() { 
    	if (content.getTense() == null) {
    		return "";
    	}
    	return content.getTense();
    }

    /**
     * Sets the value of the tense property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setTense(java.lang.String value) { content.setTense(value); }
    
    
    
    /**
     * Gets the value of the tense property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getGender() { 
    	if (content.getGender() == null) {
    		return "";
    	}
    	return content.getGender();
    }

    /**
     * Sets the value of the tense property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setGender(java.lang.String value) { content.setGender(value); }
    
    
    /**
     * Gets the value of the tense property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getNumber() { 
    	if (content.getNumber() == null) {
    		return "";
    	}
    	return content.getNumber();
    }

    /**
     * Sets the value of the tense property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setNumber(java.lang.String value) { content.setNumber(value); }
    
    /**
     * Gets the value of the tense property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getPerson() { 
    	if (content.getPerson() == null) {
    		return "";
    	}
    	return content.getPerson();
    }

    /**
     * Sets the value of the tense property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setPerson(java.lang.String value) { content.setPerson(value); }
    
    /**
     * Gets the value of the value property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getValue() { return content.getValue(); }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setValue(java.lang.String value) { content.setValue(value); }

    /**
     * Gets the value of the pgn property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getPgn() { 
    	if (content.getPgn() == null) {
    		return "";
    	}
    	return content.getPgn(); }

    /**
     * Sets the value of the pgn property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setPgn(java.lang.String value) { content.setPgn(value); }

  
  
    /**
     * Gets the value of the undotted property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getUndotted() { 
    	if (content.getUndotted() == null) {
    		return "";
    	}
    	return content.getUndotted(); }

    /**
     * Sets the value of the undotted property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setUndotted(java.lang.String value) { content.setUndotted(value); }

    /**
     * Gets the value of the dotted property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getDotted() { 
    	if (content.getDotted() == null) {
    		return "";
    	}
    	return content.getDotted(); }

    /**
     * Sets the value of the dotted property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setDotted(java.lang.String value) { content.setDotted(value); }

    /**
     * Gets the value of the script property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getRegister() { 
    	return content.getRegister(); }

    /**
     * Sets the value of the script property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setRegister(java.lang.String value) { content.setRegister(value); }
    
    /**
     * Gets the value of the script property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getSpelling() { 
    	return content.getSpelling(); }

    /**
     * Sets the value of the script property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setSpelling(java.lang.String value) { content.setSpelling(value); }

    /**
     * Gets the value of the transliterated property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getTransliterated() { 
    	if (content.getTransliterated() == null) {
    		return "";
    	}
    	return content.getTransliterated(); }

    /**
     * Sets the value of the transliterated property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setTransliterated(java.lang.String value) { content.setTransliterated(value); }
    
    /**
     * Gets the value of the inflectConstruct property.
     * 
     */
	
	
    public boolean isBeinoniConstruct() {
    	return content.isBeinoniConstruct(); }

    /**
     * Sets the value of the inflectConstruct property.
     * 
     */
    public void setBeinoniConstruct(boolean value) { content.setBeinoniConstruct(value); }
    
    
	
    public boolean isBeinoniDefiniteness() {
    	return content.isBeinoniDefiniteness(); }

    /**
     * Sets the value of the inflectConstruct property.
     * 
     */
    public void setBeinoniDefiniteness(boolean value) { content.setBeinoniDefiniteness(value); }
    

    
    public boolean isInflectBeinoniPossessive() {
    	return content.isInflectBeinoniPossessive(); }

    /**
     * Sets the value of the inflectConstruct property.
     * 
     */
    public void setInflectBeinoniPossessive(boolean value) { content.setInflectBeinoniPossessive(value); }
    
  ///-----------------------------------------------------------------------------------------------------------------------------------
	public String GetExceptionHtml()
	{
		/*
		 * this function is used to create the html for the exception form
		 * it is not the best way to accomplish this but because there was too much code on the jsp file
		 * i had to move some into a java class.
		 */
		String html = null;
		
		String add_sel=null,replace_sel =null ,remove_sel=null;
		if (getAction().equals("add"))  // get the right action to be selected
			add_sel = "SELECTED";
		else if (getAction().equals("replace"))
			replace_sel = "SELECTED";
		else remove_sel = "SELECTED";
		
		html = "<tr><td>פעולה:</td>"
			+ "<td><select name=\'verb_exception_action\'>"
			+ "<option value='add' "+ add_sel +" >הוספה</option>"
			+ "<option value='replace' "+replace_sel +" >החלפה</option>"
			+ "<option value='remove' " +remove_sel +">הסרה</option>"
			+ "</select></td></tr>";
		
		html += "<tr><td>צורה לא מנוקדת:</td>"
			+ "<td><input type='text' name='verb_exception_undotted' size=20 value='"+getUndotted().trim()+"'></td></tr>";
		
		html += "<tr><td>צורת תעתיק:</td>"
			+ "<td>"+getTransliterated() + "</td></tr>";
		
		String formal_sel = null, archaic_sel = null , informal_sel = null;
		if (getRegister().equals("formal"))  // register 
			formal_sel = "SELECTED";
		else if (getRegister().equals("archaic"))
			archaic_sel = "SELECTED";
		else informal_sel = "SELECTED";
		html += "<tr><td>צורה מנוקדת:</td>"
			+ "<td><input type='text' name='verb_exception_dotted' size=20 value='"+getDotted().trim()+"'></td></tr>"
			+ "<tr><td>משלב:</td><td>"
			+ "<select name='verb_exception_register'>"
			+ "<option value='formal' "+ formal_sel +">תקני</option>"
			+ "<option value='archaic' " + archaic_sel + ">ארכאי</option>"
			+ "<option value='informal' " + informal_sel + " >תת-תקני</option>"
			+ "</select></td></tr>";
		
		String standard_sel = null, irregular_sel = null; // spelling
		if (getSpelling().equals("irregular")) // spelling
			irregular_sel = "SELECTED";
		else 
			standard_sel = "SELECTED";
		html += "<tr><td>כתיב:</td>"
			+ "<td><select name='verb_exception_spelling'>"
	        + "<option value='standard' "+ standard_sel +">תקני</option>"
	        + "<option value='irregular' " + irregular_sel +">תת-תקני</option>"
	        + "</select></td></tr>";
		
		//TENSE
		String verb_past_sel=null,verb_beinoni_sel=null,verb_future_sel=null,verb_imperative_sel=null,verb_infinitive_sel=null,verb_unspecified_sel=null;
		String verb_bareInfinitive_sel=null,verb_passiveParticiple_sel=null;
		if (getTense().equals("past"))
			{verb_past_sel="SELECTED";}
		else if (getTense().equals("beinoni"))
			{verb_beinoni_sel="SELECTED";}
		else if (getTense().equals("future"))
			{verb_future_sel="SELECTED";}
		else if (getTense().equals("imperative"))
			{verb_imperative_sel="SELECTED";}
		else if (getTense().equals("infinitive"))
			{verb_infinitive_sel="SELECTED";}
		else if (getTense().equals("unspecified"))
			{verb_unspecified_sel="SELECTED";}
		else if (getTense().equals("bareInfinitive"))
			{verb_bareInfinitive_sel="SELECTED";}
		else 
			{verb_passiveParticiple_sel="SELECTED";}
		
		html +="<tr><td>זמן:</td>" +
			"<td><select name='verb_exception_tense'>" +
			"<option value='past' "+verb_past_sel+">עבר</option>" +
			"<option value='beinoni' "+verb_beinoni_sel+">בינוני</option>" +
			"<option value='future' "+verb_future_sel+">עתיד</option>" +
			"<option value='imperative' "+verb_imperative_sel+">ציווי</option>" +
			"<option value='infinitive' "+verb_infinitive_sel+">שם הפועל</option>" +
			//"<option value='unspecified' '"+verb_unspecified_sel+">לא מוגדר</option>" +
			"<option value='bareInfinitive' "+verb_bareInfinitive_sel+">מקור</option>" +
			"<option value='passiveParticiple' "+verb_passiveParticiple_sel+">בינוני פעול</option>" +
			"</select></td></tr>";
		
		// GENDER
		String masculine_sel = null, feminine_sel= null , unspecified_gender_sel = null,masculine_and_feminine_sel =null;
		String gender = getGender();
		if (gender.equals("masculine"))
			{masculine_sel = "SELECTED";}
		else if (gender.equals("feminine"))
			{feminine_sel = "SELECTED";}
		else if (gender.equals("masculine and feminine"))
			{masculine_and_feminine_sel = "SELECTED";}
		else
		{unspecified_gender_sel = "SELECTED";}
		html +="<tr><td>מין:</td>"
			+ "<td><select name='verb_exception_gender'>"
            + "<option value='masculine' "+masculine_sel+">זכר</option>"
            + "<option value='feminine' "+feminine_sel+">נקבה</option>"
            + "<option value='masculine and feminine' "+masculine_and_feminine_sel+">גם זכר וגם נקבה</option>"
            + "<option value='unspecified' "+unspecified_gender_sel +">לא ידוע</option>"
            + "</select></td></tr>";
		
		// NUMBER
		String singular_sel= null, plural_sel=null,unspecified_number_sel =null;
		if (getNumber().equals("singular"))
			{singular_sel = "SELECTED";}
		else if (getNumber().equals("plural"))
			{plural_sel = "SELECTED";}
		else
		{unspecified_number_sel = "SELECTED";}
		html +="<tr><td>מספר:</td>" +
			"<td><select name='verb_exception_number'>" +
			"<option value='singular' "+singular_sel+">יחיד</option>" +
			"<option value='plural' "+plural_sel+">רבים</option>" +
			"<option value='unspecified' "+unspecified_number_sel+">לא ידוע</option>" +
			"</select></td></tr>";
		
		// PERSON
		String person_unspecified_sel = null ,person_1_sel = null ,person_2_sel = null ,person_3_sel = null ,person_any_sel = null ;
		if (getPerson().equals("unspecified"))
			{person_unspecified_sel="SELECTED";}
		else if (getPerson().equals("1"))
			{person_1_sel="SELECTED";}
		else if (getPerson().equals("2"))
			{person_2_sel="SELECTED";}
		else if (getPerson().equals("3"))
			{person_3_sel="SELECTED";}
		else
			{person_any_sel = "SELECTED";}
		
		html +="<tr><td>גוף:</td>" +
			"<td><select name='verb_exception_person'>" +
			"<option value='unspecified' "+person_unspecified_sel+">לא ידוע</option>" +
			"<option value='1' "+person_1_sel+">גוף ראשון</option>" +
			"<option value='2' "+person_2_sel+">גוף שני</option>" +
			"<option value='3' "+person_3_sel+">גוף שלישי</option>" +
			"<option value='any' "+person_any_sel+">גוף כלשהו</option>" +
			"</select></td></tr>";
		
		
	//  person Gender Number drop down
		String personGenderNumber_unspecified_sel=null,personGenderNumber_1p_MF_Sg_sel=null,personGenderNumber_2p_M_Sg_sel=null,personGenderNumber_2p_F_Sg_sel=null;
		String personGenderNumber_3p_M_Sg_sel=null,personGenderNumber_3p_F_Sg_sel=null,personGenderNumber_1p_MF_Pl_sel=null;
		String personGenderNumber_2p_M_Pl_sel=null,personGenderNumber_2p_F_Pl_sel=null,personGenderNumber_3p_M_Pl_sel=null,personGenderNumber_3p_F_Pl_sel=null;
		String personGenderNumber_3p_MF_Pl_sel=null,personGenderNumber_123p_M_Sg_sel=null,personGenderNumber_123p_F_Sg_sel=null;
		String personGenderNumber_123p_M_Pl_sel=null,personGenderNumber_123p_F_Pl_sel=null;
		String personGenderNumber_1p_M_Sg_sel=null,personGenderNumber_1p_F_Sg_sel=null,personGenderNumber_2p_MF_Pl_sel=null;
		
		String pgn = getPgn();
		if (pgn.equals("unspecified"))
			personGenderNumber_unspecified_sel="SELECTED";
		else if (pgn.equals("1p/MF/Sg"))
			personGenderNumber_1p_MF_Sg_sel="SELECTED";
		else if (pgn.equals("1p/M/Sg"))
			personGenderNumber_1p_M_Sg_sel="SELECTED";
		else if (pgn.equals("1p/F/Sg"))
			personGenderNumber_1p_F_Sg_sel="SELECTED";
		else if (pgn.equals("2p/M/Sg"))
			personGenderNumber_2p_M_Sg_sel="SELECTED";
		else if (pgn.equals("2p/F/Sg"))
			personGenderNumber_2p_F_Sg_sel="SELECTED";
		else if (pgn.equals("3p/M/Sg"))
			personGenderNumber_3p_M_Sg_sel="SELECTED";
		else if (pgn.equals("3p/F/Sg"))
			personGenderNumber_3p_F_Sg_sel="SELECTED";
		else if (pgn.equals("1p/MF/Pl"))
			personGenderNumber_1p_MF_Pl_sel="SELECTED";
		else if (pgn.equals("2p/M/Pl"))
			personGenderNumber_2p_M_Pl_sel="SELECTED";
		else if (pgn.equals("2p/F/Pl"))
			personGenderNumber_2p_F_Pl_sel="SELECTED";
		else if (pgn.equals("3p/M/Pl"))
			personGenderNumber_3p_M_Pl_sel="SELECTED";
		else if (pgn.equals("3p/F/PL"))
			personGenderNumber_3p_F_Pl_sel="SELECTED";
		else if (pgn.equals("3p/MF/Pl"))
			personGenderNumber_3p_MF_Pl_sel="SELECTED";
		else if (pgn.equals("123p/M/Sg"))
			personGenderNumber_123p_M_Sg_sel="SELECTED";
		else if (pgn.equals("123p/F/Sg"))
			personGenderNumber_123p_F_Sg_sel="SELECTED";
		else if (pgn.equals("123p/M/PL"))
			personGenderNumber_123p_M_Pl_sel="SELECTED";
		else if (pgn.equals("123p/F/Sg"))
			personGenderNumber_123p_F_Pl_sel="SELECTED";
			
		html +="<tr><td>גוף/מין/מספר עבור שם פועל מוטה:</td>" +
			"<td><select name='verb_exception_pgn'>" +
			"<option value='1p/M/Sg' "+personGenderNumber_1p_M_Sg_sel+">גוף ראשון / זכר / יחיד</option>"+
			"<option value='1p/F/Sg' <"+personGenderNumber_1p_F_Sg_sel+">גוף ראשון / נקבה / יחיד</option>" +
			"<option value='1p/MF/Sg' "+personGenderNumber_1p_MF_Sg_sel+">גוף ראשון / זכר וגם נקבה / יחיד</option>" +
			"<option value='2p/M/Sg' "+personGenderNumber_2p_M_Sg_sel+">גוף שני   / זכר          / יחיד</option>" +
			"<option value='2p/F/Sg' "+personGenderNumber_2p_F_Sg_sel+">גוף שני   / נקבה         / יחיד</option>" +
			"<option value='3p/M/Sg' "+personGenderNumber_3p_M_Sg_sel+">גוף שלישי / זכר          / יחיד</option>" +
			"<option value='3p/F/Sg' "+personGenderNumber_3p_F_Sg_sel+">גוף שלישי / נקבה         / יחיד</option>" +
			"<option value='1p/MF/Pl' "+personGenderNumber_1p_MF_Pl_sel+">גוף ראשון / זכר וגם נקבה / רבים</option>" +
			"<option value='2p/M/Pl' "+personGenderNumber_2p_M_Pl_sel+">גוף שני   / זכר          / רבים</option>" +
			"<option value='2p/F/Pl' "+personGenderNumber_2p_F_Pl_sel+">גוף שני   / נקבה         / רבים</option>" +
			"<option value='2p/MF/Pl' "+personGenderNumber_2p_MF_Pl_sel+">גוף שני / זכר וגם נקבה / רבים</option>" +
			"<option value='3p/M/Pl' "+personGenderNumber_3p_M_Pl_sel+">גוף שלישי / זכר          / רבים</option>" +
			"<option value='3p/F/Pl' "+personGenderNumber_3p_F_Pl_sel+">גוף שלישי / נקבה         / רבים</option>" +
			"<option value='3p/MF/Pl' "+personGenderNumber_3p_MF_Pl_sel+">גוף שלישי / זכר וגם נקבה          / רבים</option>"+
			"<option value='123p/M/Sg' "+personGenderNumber_123p_M_Sg_sel+">גוף כלשהו / זכר / יחיד</option>" +
			"<option value='123p/F/Sg' "+personGenderNumber_123p_F_Sg_sel+">גוף כלשהו / נקבה / יחיד</option>" +
			"<option value='123p/M/Pl' "+personGenderNumber_123p_M_Pl_sel+">גוף כלשהו / זכר / יחיד</option>" +
			"<option value='123p/F/Pl' "+personGenderNumber_123p_F_Pl_sel+">גוף כלשהו / נקבה / יחיד</option>" +
			"<option value='unspecified' "+personGenderNumber_unspecified_sel+">לא ידוע</option>" +
			"</select></td></tr>";
		
		boolean isBeinoniConstruct = isBeinoniConstruct();
		html +="<tr><td>האם צורת בינוני נסמך?</td>" +
			"<td><select name='verb_exception_beinoniConstruct'> " +
			"<option value='1' "+(isBeinoniConstruct ? "SELECTED" : "")+">כן</option>" +
			"<option value='0' "+(isBeinoniConstruct ? "" : "SELECTED")+">לא</option> " +
			"</select></td></tr>";
		
		boolean isBeinoniDefiniteness = isBeinoniDefiniteness();
		html +="<tr><td> האם צורת בינוני שיש לייצר עבורה יידוע?</td>" +
			"<td><select name='verb_exception_beinoniDefiniteness'> " +
			"<option value='1' "+(isBeinoniDefiniteness ? "SELECTED" : "")+">כן</option>" +
			"<option value='0' "+(isBeinoniDefiniteness ? "" : "SELECTED")+">לא</option>" +
			"</select></td></tr>";
		
		boolean isInflectBeinoniPossessive = isInflectBeinoniPossessive();
		html +="<tr><td>האם לייצר הטיות לצורת הבינוני?</td>" +
			"<td><select name='verb_exception_inflectBeinoniPossessive'>" +
			"<option value='1' "+(isInflectBeinoniPossessive ? "SELECTED" : "")+">כן</option>" +
			"<option value='0' "+(isInflectBeinoniPossessive ? "" : "SELECTED")+">לא</option>" +
			"</select></td></tr>";
		
		return html;
	}
    
}
