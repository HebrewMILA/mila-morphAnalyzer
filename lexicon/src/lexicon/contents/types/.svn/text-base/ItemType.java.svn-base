//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.02.17 at 12:10:17 GMT+02:00 
//
package lexicon.contents.types;

import java.net.*; 
import java.util.ArrayList;
import java.util.List;

import lexicon.contents.pos.*;
import lexicon.contents.Content;
import lexicon.tools.LexiconUtils;
/**
 * ������
 */
public class ItemType extends Content implements lexicon.jaxb.ItemType{
	protected lexicon.jaxb.ItemType item;
	protected List senses = null;
	public ItemType() {
		item = new lexicon.jaxb.impl.ItemTypeImpl();
		TABLE = "item";
		IDNAME = "id"; 
	}
	public ItemType(lexicon.jaxb.ItemType item) {
		this.item = item;
		id = Integer.parseInt(item.getId());
		TABLE = "item";
		IDNAME = "id"; 
	}
	
	public String getPos() {
		if (getAdjective() != null) {
			return "adjective";
		}
		if (getAdverb() != null) {  
			return "adverb";
		}
		if (getConjunction() != null) { 
			return "conjunction";
		}
		if (getInterjection() != null) { 
			return "interjection";
		}
		if (getInterrogative() != null) { 
			return "interrogative";
		}
		if (getNegation() != null ) {
			return "negation";
		}
		if (getNoun() != null) { 
			return "noun";
		}
		if (getPreposition() != null) {  
			return "preposition";
		}
		if (getPronoun() != null) { 
			return "pronoun";
		}
		if (getProperName() != null) { 
			return "properName";
		}
		if (getQuantifier() != null) { 
			return "quantifier";
		}
		if (getVerb() != null) {
			return "verb";
		}
		return getString("pos");
	}
	public lexicon.jaxb.impl.ItemTypeImpl getImpl() {
		return (lexicon.jaxb.impl.ItemTypeImpl)item;
	}
	public void load() {
		setId(Integer.toString(getInt("id")));
		String comment = getString("comment");
		if (comment.equals("")) {
			comment = null;
		}
		setComment(comment);
		setUndotted(getString("undotted"));
		setTransliterated(getString("transliterated"));
		setScript(getString("script"));
		setDotted(getString("dotted"));
		String pos = getString("pos");
		if (pos.equals("adjective")) {
			AdjectiveLexiconType adjective = new AdjectiveLexiconType();
			adjective.open(id);
			setAdjective(adjective.getImpl());
		}
		if (pos.equals("adverb")) {
			AdverbLexiconType adverb = new AdverbLexiconType();
			adverb.open(id);
			setAdverb(adverb.getImpl());
		}
		if (pos.equals("conjunction")) {
			ConjunctionLexiconType conjunction = new ConjunctionLexiconType();
			conjunction.open(id);
			setConjunction(conjunction.getImpl());
		}
		if (pos.equals("interjection")) {
			InterjectionLexiconType interjection = new InterjectionLexiconType();
			interjection.open(id);
			setInterjection(interjection.getImpl());
		}
		if (pos.equals("interrogative")) {
			InterrogativeLexiconType interrogative = new InterrogativeLexiconType();
			interrogative.open(id);
			setInterrogative(interrogative.getImpl());
		}
		if (pos.equals("negation")) {
			setNegation(new lexicon.jaxb.impl.NegationLexiconTypeImpl());
		}
		if (pos.equals("noun")) {
			NounLexiconType noun = new NounLexiconType();
			noun.open(id);
			setNoun(noun.getImpl());
		}
		if (pos.equals("preposition")) {
			PrepositionLexiconType preposition = new PrepositionLexiconType();
			preposition.open(id);
			setPreposition(preposition.getImpl());
		}
		if (pos.equals("pronoun")) {
			PronounLexiconType pronoun = new PronounLexiconType();
			pronoun.open(id);
			setPronoun(pronoun.getImpl());
		}
		if (pos.equals("properName")) {
			ProperNameLexiconType properName = new ProperNameLexiconType();
			properName.open(id);
			setProperName(properName.getImpl());
		}
		if (pos.equals("quantifier")) {
			QuantifierLexiconType quantifier = new QuantifierLexiconType();
			quantifier.open(id);
			setQuantifier(quantifier.getImpl());
		}
		if (pos.equals("verb")) {
			VerbLexiconType verb = new VerbLexiconType();
			verb.open(id);
			setVerb(verb.getImpl());
		}
		senses = null;
		senses = getSenses();
		getSense().clear();
		getSense().addAll(senses);
	}
	public int add(int i) {
		return 0;
	}
	public int add() {
		String sql = "INSERT INTO "+ getTableName() + " VALUES (";
		sql += getId();
		sql += ", '"+getPos()+"'";
		String comment = getComment();
		if (comment == null) {
			comment = "";
		} 
		try {
			comment = URLEncoder.encode(comment, Content.ADD_ENCODING);
		}catch (Exception e) {}
		sql += ", '"+comment+"'";
		String undotted = getUndotted(); 
		try {
			undotted = URLEncoder.encode(undotted, Content.ADD_ENCODING);
		}catch (Exception e) {}
		sql += ", '"+undotted+"'";
		String transliterated = LexiconUtils.getTransliteration(undotted);
		try {
			transliterated = URLEncoder.encode(transliterated, Content.ADD_ENCODING);			
		}catch (Exception e) {} 
		sql += ", '"+transliterated+"'";
		sql += ", '"+ getScript() +"'";
		String dotted = getDotted(); 
		try {
			dotted = URLEncoder.encode(dotted, Content.ADD_ENCODING);
 
		}catch (Exception e) {}
		sql += ", '"+dotted+"', 0)";
		int feedback = execute(sql);
		id = getCurrentID(getTableName(), getIDName()); 
		addPos();
		addSense();
		return id;
	}
	public int addSense() {
		int result = 0;
		for (int i=0; i< getSense().size(); i++) {
			SenseType source = new SenseType((lexicon.jaxb.SenseType)getSense().get(i));
			result += source.add(id); 
		}
		return result;
	}
	/**
	*Updates the current record in the DB, so it would resemble the current object state.
	*The method uses ResultSet.updateRow method in order to implement the generic update process.
	*The method finds the record of the current object, generates the meta data (the names and types of the columns)
	*, Runs on the columns and updateing each one, according with the column type. After these stages, the
	*method calls <code>ResultSet.updateRow</code> in order to execute the update in the DB.
	*@see   #info
	*@see   ResultSet#updateRow
	*@see   #openRS
	*@return	The number of rows that were affected from the action. If 0, then nothing happened
	*/
	public int update() {
		String sql = "UPDATE "+ getTableName() + " SET"; 
		sql += " pos='"+getPos()+"'";
		String comment = getComment(); 
		try {
			comment = URLEncoder.encode(comment, Content.UPDATE_ENCODING); 
		}catch (Exception e) {}
		sql += ", comment='"+comment+"'";
		String undotted = getUndotted(); 
		try {
			undotted = URLEncoder.encode(undotted, Content.UPDATE_ENCODING);
		}catch (Exception e) {} 
		sql += ", undotted='"+ undotted +"'";
		String transliterated = LexiconUtils.getTransliteration(undotted); 
		try {
			transliterated = URLEncoder.encode(transliterated, Content.UPDATE_ENCODING);			
		}catch (Exception e) {} 
		sql += ", transliterated='"+ transliterated +"'";
		sql += ", script='"+ getScript() +"'";
		String dotted = getDotted(); 
		try {
			dotted = URLEncoder.encode(dotted, Content.UPDATE_ENCODING); 
		}catch (Exception e) {}
		sql += ", dotted='"+ dotted +"' WHERE id="+id;
		int feedback = execute(sql);
		updatePos();
		return feedback;
	}
	public int remove() {
		removePos();
		removeSense();
		int result = super.remove();
		return result;
	}
	protected int removeSense() {
		return removeContents("sense", "id", "sid", id);
	}
	protected java.util.List getSenses() {
		if (senses == null) {
			senses = new ArrayList();
			String sql = "SELECT sid from sense WHERE id="+id;
			List sources = getContents(sql, "sid");
			ArrayList result = new ArrayList();
			for (int i=0; i< sources.size(); i++) {
				SenseType source = new SenseType();
				source.open(((Integer)sources.get(i)).intValue());
				senses.add(source.getImpl());
			}
		}
		return senses;
	}
	protected int removePos() {
		int result = 0;
		if (getAdjective() != null) {
			AdjectiveLexiconType adjective = new AdjectiveLexiconType();
			adjective.open(id);
			result += adjective.remove();
		}
		if (getAdverb() != null) {  
			AdverbLexiconType adverb = new AdverbLexiconType();
			adverb.open(id);
			result += adverb.remove();
		}
		if (getConjunction() != null) { 
			ConjunctionLexiconType conjunction = new ConjunctionLexiconType();
			conjunction.open(id);
			result += conjunction.remove();
		}
		if (getInterjection() != null) { 
			InterjectionLexiconType interjection = new InterjectionLexiconType();
			interjection.open(id);
			result += interjection.remove();
		}
		if (getInterrogative() != null) { 
			InterrogativeLexiconType interrogative = new InterrogativeLexiconType();
			interrogative.open(id);
			result += interrogative.remove();
		}
		if (getNegation() != null ) {
			//NegationLexiconType negation = new NegationLexiconType();
			//negation.open(id);
			//setNegation(negation);
		}
		if (getNoun() != null) { 
			NounLexiconType noun = new NounLexiconType();
			noun.open(id);
			result += noun.remove();
		}
		if (getPreposition() != null) {  
			PrepositionLexiconType preposition = new PrepositionLexiconType();
			preposition.open(id);
			result += preposition.remove();
		}
		if (getPronoun() != null) { 
			PronounLexiconType pronoun = new PronounLexiconType();
			pronoun.open(id);
			result += pronoun.remove();
		}
		if (getProperName() != null) { 
			ProperNameLexiconType properName = new ProperNameLexiconType();
			properName.open(id);
			result += properName.remove();
		}
		if (getQuantifier() != null) { 
			QuantifierLexiconType quantifier = new QuantifierLexiconType();
			quantifier.open(id);
			result += result += quantifier.remove();
		}
		if (getVerb() != null) {
			VerbLexiconType verb = new VerbLexiconType();
			verb.open(id);
			result += verb.remove();
		}
		return result;
	}
	protected int addPos() {
		int result = 0;
		if (getAdjective() != null) {
			AdjectiveLexiconType adjective = new AdjectiveLexiconType(getAdjective());
			result += adjective.add(id);
		}
		if (getAdverb() != null) {  
			AdverbLexiconType adverb = new AdverbLexiconType(getAdverb());
			result += adverb.add(id);
		}
		if (getConjunction() != null) { 
			ConjunctionLexiconType conjunction = new ConjunctionLexiconType(getConjunction());
			result += conjunction.add(id);
		}
		if (getInterjection() != null) { 
			InterjectionLexiconType interjection = new InterjectionLexiconType(getInterjection());
			result += interjection.add(id);
		}
		if (getInterrogative() != null) { 
			InterrogativeLexiconType interrogative = new InterrogativeLexiconType(getInterrogative());
			result += interrogative.add(id);
		}
		if (getNegation() != null ) {
			//NegationLexiconType negation = new NegationLexiconType();
			//negation.open(id);
			//setNegation(negation);
		}
		if (getNoun() != null) { 
			NounLexiconType noun = new NounLexiconType(getNoun());
			result += noun.add(id);
		}
		if (getPreposition() != null) {  
			PrepositionLexiconType preposition = new PrepositionLexiconType(getPreposition());
			result += preposition.add(id);
		}
		if (getPronoun() != null) { 
			PronounLexiconType pronoun = new PronounLexiconType(getPronoun());
			result += pronoun.add(id);
		}
		if (getProperName() != null) { 
			ProperNameLexiconType properName = new ProperNameLexiconType(getProperName());
			result += properName.add(id);
		}
		if (getQuantifier() != null) { 
			QuantifierLexiconType quantifier = new QuantifierLexiconType(getQuantifier());
			result += result += quantifier.add(id);
		}
		if (getVerb() != null) {
			VerbLexiconType verb = new VerbLexiconType(getVerb());
			result += verb.add(id);
		}
		return result;
	}
	protected int updatePos() {
		int result = 0;
		if (getAdjective() != null) {
			AdjectiveLexiconType adjective = new AdjectiveLexiconType(getAdjective());
			result += adjective.update();
		}
		if (getAdverb() != null) {  
			AdverbLexiconType adverb = new AdverbLexiconType(getAdverb());
			result += adverb.update();
		}
		if (getConjunction() != null) { 
			ConjunctionLexiconType conjunction = new ConjunctionLexiconType(getConjunction());
			result += conjunction.update();
		}
		if (getInterjection() != null) { 
			InterjectionLexiconType interjection = new InterjectionLexiconType(getInterjection());
			result += interjection.update();
		}
		if (getInterrogative() != null) { 
			InterrogativeLexiconType interrogative = new InterrogativeLexiconType(getInterrogative());
			result += interrogative.update();
		}
		if (getNegation() != null ) {
			//NegationLexiconType negation = new NegationLexiconType();
			//negation.open(id);
			//setNegation(negation);
		}
		if (getNoun() != null) { 
			NounLexiconType noun = new NounLexiconType(getNoun());
			result += noun.update();
		}
		if (getPreposition() != null) {  
			PrepositionLexiconType preposition = new PrepositionLexiconType(getPreposition());
			result += preposition.update();
		}
		if (getPronoun() != null) { 
			PronounLexiconType pronoun = new PronounLexiconType(getPronoun());
			result += pronoun.update();
		}
		if (getProperName() != null) { 
			ProperNameLexiconType properName = new ProperNameLexiconType(getProperName());
			result += properName.update();
		}
		if (getQuantifier() != null) { 
			QuantifierLexiconType quantifier = new QuantifierLexiconType(getQuantifier());
			result += result += quantifier.update();
		}
		if (getVerb() != null) {
			VerbLexiconType verb = new VerbLexiconType(getVerb());
			result += verb.update();
		}
		return result;
	}
	/**
     * Gets the value of the adjective property.
     * 
     * @return
     *     possible object is
     *     {@link lexicon.jaxb.AdjectiveLexiconType}
     */
    public lexicon.jaxb.AdjectiveLexiconType getAdjective() {
    	return item.getAdjective();
    }
    /*public java.util.List getSense() {
    	return item.getSense();
    }
    /**
     * Sets the value of the adjective property.
     * 
     * @param value
     *     allowed object is
     *     {@link lexicon.jaxb.AdjectiveLexiconType}
     */
    public void setAdjective(lexicon.jaxb.AdjectiveLexiconType value) {
    	item.setAdjective(value);
    }

    /**
     * Gets the value of the comment property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getComment() {
    	if (item.getComment() == null) {
    		return "";
    	}
    	return item.getComment();
    }

    /**
     * Sets the value of the comment property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setComment(java.lang.String value) {
    	item.setComment(value);
    }

    /**
     * Gets the value of the interjection property.
     * 
     * @return
     *     possible object is
     *     {@link lexicon.jaxb.InterjectionLexiconType}
     */
    public lexicon.jaxb.InterjectionLexiconType getInterjection() {
    	return item.getInterjection();
    }

    /**
     * Sets the value of the interjection property.
     * 
     * @param value
     *     allowed object is
     *     {@link lexicon.jaxb.InterjectionLexiconType}
     */
    public void setInterjection(lexicon.jaxb.InterjectionLexiconType value) {
    	item.setInterjection(value);
    }

    /**
     * Gets the value of the adverb property.
     * 
     * @return
     *     possible object is
     *     {@link lexicon.jaxb.AdverbLexiconType}
     */
    public lexicon.jaxb.AdverbLexiconType getAdverb() {
    	return item.getAdverb();
    }

    /**
     * Sets the value of the adverb property.
     * 
     * @param value
     *     allowed object is
     *     {@link lexicon.jaxb.AdverbLexiconType}
     */
    public void setAdverb(lexicon.jaxb.AdverbLexiconType value) {
    	item.setAdverb(value);
    }

    /**
     * Gets the value of the script property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getScript() {
    	return item.getScript();
    }

    /**
     * Sets the value of the script property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setScript(java.lang.String value) {
    	item.setScript(value);
    }

    /**
     * Gets the value of the transliterated property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getTransliterated() {
    	if (item.getTransliterated() == null) {
    		return "";
    	}
    	return item.getTransliterated();
    }

    /**
     * Sets the value of the transliterated property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setTransliterated(java.lang.String value) {
    	item.setTransliterated(value);
    }

    /**
     * Gets the value of the quantifier property.
     * 
     * @return
     *     possible object is
     *     {@link lexicon.jaxb.QuantifierLexiconType}
     */
    public lexicon.jaxb.QuantifierLexiconType getQuantifier() {
    	return item.getQuantifier();
    }

    /**
     * Sets the value of the quantifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link lexicon.jaxb.QuantifierLexiconType}
     */
    public void setQuantifier(lexicon.jaxb.QuantifierLexiconType value) {
    	item.setQuantifier(value);
    }

    /**
     * Gets the value of the preposition property.
     * 
     * @return
     *     possible object is
     *     {@link lexicon.jaxb.PrepositionLexiconType}
     */
    public lexicon.jaxb.PrepositionLexiconType getPreposition() {
    	return item.getPreposition();
    }

    /**
     * Sets the value of the preposition property.
     * 
     * @param value
     *     allowed object is
     *     {@link lexicon.jaxb.PrepositionLexiconType}
     */
    public void setPreposition(lexicon.jaxb.PrepositionLexiconType value) {
    	item.setPreposition(value);
    }/**
     * Gets the value of the verb property.
     * 
     * @return
     *     possible object is
     *     {@link lexicon.jaxb.VerbLexiconType}
     */
    public lexicon.jaxb.VerbLexiconType getVerb() {
    	return item.getVerb();
    }

    /**
     * Sets the value of the verb property.
     * 
     * @param value
     *     allowed object is
     *     {@link lexicon.jaxb.VerbLexiconType}
     */
    public void setVerb(lexicon.jaxb.VerbLexiconType value) {
    	item.setVerb(value);
    }

    /**
     * Gets the value of the pronoun property.
     * 
     * @return
     *     possible object is
     *     {@link lexicon.jaxb.PronounLexiconType}
     */
    public lexicon.jaxb.PronounLexiconType getPronoun() {
    	return item.getPronoun();
    }

    /**
     * Sets the value of the pronoun property.
     * 
     * @param value
     *     allowed object is
     *     {@link lexicon.jaxb.PronounLexiconType}
     */
    public void setPronoun(lexicon.jaxb.PronounLexiconType value) {
    	item.setPronoun(value);
    }

    /**
     * Gets the value of the noun property.
     * 
     * @return
     *     possible object is
     *     {@link lexicon.jaxb.NounLexiconType}
     */
    public lexicon.jaxb.NounLexiconType getNoun() {
    	return item.getNoun();
    }

    /**
     * Sets the value of the noun property.
     * 
     * @param value
     *     allowed object is
     *     {@link lexicon.jaxb.NounLexiconType}
     */
    public void setNoun(lexicon.jaxb.NounLexiconType value) {
    	item.setNoun(value);
    }

    /**
     * Gets the value of the negation property.
     * 
     * @return
     *     possible object is
     *     {@link lexicon.jaxb.NegationLexiconType}
     */
    public lexicon.jaxb.NegationLexiconType getNegation() {
    	return item.getNegation();
    }

    /**
     * Sets the value of the negation property.
     * 
     * @param value
     *     allowed object is
     *     {@link lexicon.jaxb.NegationLexiconType}
     */
    public void setNegation(lexicon.jaxb.NegationLexiconType value) {
    	item.setNegation(value);
    }

    /**
     * Gets the value of the dotted property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getDotted() {
    	if (item.getDotted() == null) {
    		return "";
    	}
    	return item.getDotted();
    }

    /**
     * Sets the value of the dotted property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setDotted(java.lang.String value) {
    	item.setDotted(value);
    }

    /**
     * Gets the value of the undotted property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getUndotted() {
    	if (item.getUndotted() == null) {
    		return "";
    	}
    	return item.getUndotted();
    }

    /**
     * Sets the value of the undotted property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setUndotted(java.lang.String value) {
    	item.setUndotted(value);
    }

    /**
     * Gets the value of the interrogative property.
     * 
     * @return
     *     possible object is
     *     {@link lexicon.jaxb.InterrogativeLexiconType}
     */
    public lexicon.jaxb.InterrogativeLexiconType getInterrogative() {
    	return item.getInterrogative();
    }

    /**
     * Sets the value of the interrogative property.
     * 
     * @param value
     *     allowed object is
     *     {@link lexicon.jaxb.InterrogativeLexiconType}
     */
    public void setInterrogative(lexicon.jaxb.InterrogativeLexiconType value) {
    	item.setInterrogative(value);
    }

    /**
     * Gets the value of the properName property.
     * 
     * @return
     *     possible object is
     *     {@link lexicon.jaxb.ProperNameLexiconType}
     */
    public lexicon.jaxb.ProperNameLexiconType getProperName() {
    	return item.getProperName();
    }

    /**
     * Sets the value of the properName property.
     * 
     * @param value
     *     allowed object is
     *     {@link lexicon.jaxb.ProperNameLexiconType}
     */
    public void setProperName(lexicon.jaxb.ProperNameLexiconType value) {
    	item.setProperName(value);
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public java.lang.String getId() {
    	return item.getId();
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setId(java.lang.String value) {
    	item.setId(value);
    }

    /**
     * Gets the value of the conjunction property.
     * 
     * @return
     *     possible object is
     *     {@link lexicon.jaxb.ConjunctionLexiconType}
     */
    public lexicon.jaxb.ConjunctionLexiconType getConjunction() {
    	return item.getConjunction();
    }

    /**
     * Sets the value of the conjunction property.
     * 
     * @param value
     *     allowed object is
     *     {@link lexicon.jaxb.ConjunctionLexiconType}
     */
    public void setConjunction(lexicon.jaxb.ConjunctionLexiconType value){
    	item.setConjunction(value);
    }
	public List getSense() {
		return item.getSense();
	}
}
