//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.02.17 at 12:10:17 GMT+02:00 
//
package lexicon.contents.types;

import java.net.*;
import java.util.ArrayList;
import java.util.List;

import lexicon.contents.pos.*;
import lexicon.contents.Content;
import lexicon.tools.LexiconUtils;

/**
 * ������
 */
public class ItemType extends Content implements lexicon.jaxb.ItemType {
	protected lexicon.jaxb.ItemType item;

	protected List senses = null;

	public ItemType() {
		item = new lexicon.jaxb.impl.ItemTypeImpl();
		TABLE = "item";
		IDNAME = "id";
	}

	public ItemType(lexicon.jaxb.ItemType item) {
		this.item = item;
		id = Integer.parseInt(item.getId());
		TABLE = "item";
		IDNAME = "id";
	}

	public String getPos() {
		if (getAdjective() != null) {
			return "adjective";
		}
		if (getAdverb() != null) {
			return "adverb";
		}
		if (getConjunction() != null) {
			return "conjunction";
		}
		if (getInterjection() != null) {
			return "interjection";
		}
		if (getInterrogative() != null) {
			return "interrogative";
		}
		if (getNegation() != null) {
			return "negation";
		}
		if (getNoun() != null) {
			return "noun";
		}
		if (getPreposition() != null) {
			return "preposition";
		}
		if (getPronoun() != null) {
			return "pronoun";
		}
		if (getProperName() != null) {
			return "properName";
		}
		if (getModal() != null) {
			return "modal";
		}
		if (getQuantifier() != null) {
			return "quantifier";
		}
		if (getVerb() != null) {
			return "verb";
		}
		if (getExistential() != null) {
			return "existential";
		}
		if (getImpersonal() != null) {
			return "impersonal";
		}
		if (getCopula() != null) {
			return "copula";
		}
		if (getWPrefix() != null) {
			return "wPrefix";
		}
		if (getNumeral() != null) {
			return "numeral";
		}
		if (getAcronym() != null) {
			return "acronym";
		}
		if (getTitle() != null) {
			return "title";
		}
		if (getMultiWordFrozen() != null) {
			return "multiWordFrozen";
		}

		if (getMultiWordPreposition() != null) {
			return "multiWordPreposition";
		}
		if (getMultiWordNoun() != null) {
			return "multiWordNoun";
		}
		if (getMultiWordNounAdjective() != null) {
			return "multiWordNounAdjective";
		}
		if (getMultiWordVerbPhrase() != null) {
			return "multiWordVerbPhrase";
		}
		return getString("pos");
	}

	public lexicon.jaxb.impl.ItemTypeImpl getImpl() {
		return (lexicon.jaxb.impl.ItemTypeImpl) item;
	}

	public void load() {
		setId(Integer.toString(getInt("id")));
		String comment = getString("comment");
		if (comment.equals("")) {
			comment = null;
		}
		setComment(comment);
		setUndotted(getString("undotted"));
		setTransliterated(getString("transliterated"));
		setRegister(getString("register"));
		setSpelling(getString("spelling"));
		setDotted(getString("dotted"));
		String pos = getString("pos");
		if (pos.equals("adjective")) {
			AdjectiveLexiconType adjective = new AdjectiveLexiconType();
			adjective.open(id);
			setAdjective(adjective.getImpl());
		}
		if (pos.equals("adverb")) {
			AdverbLexiconType adverb = new AdverbLexiconType();
			adverb.open(id);
			setAdverb(adverb.getImpl());
		}
		if (pos.equals("conjunction")) {
			ConjunctionLexiconType conjunction = new ConjunctionLexiconType();
			conjunction.open(id);
			setConjunction(conjunction.getImpl());
		}
		if (pos.equals("interjection")) {
			InterjectionLexiconType interjection = new InterjectionLexiconType();
			interjection.open(id);
			setInterjection(interjection.getImpl());
		}
		if (pos.equals("interrogative")) {
			InterrogativeLexiconType interrogative = new InterrogativeLexiconType();
			interrogative.open(id);
			setInterrogative(interrogative.getImpl());
		}
		if (pos.equals("negation")) {
			setNegation(new lexicon.jaxb.impl.NegationLexiconTypeImpl());
		}
		if (pos.equals("title")) {
			TitleLexiconType title = new TitleLexiconType();
			title.open(id);
			setTitle(title.getImpl());
		}
		if (pos.equals("noun")) {
			NounLexiconType noun = new NounLexiconType();
			noun.open(id);
			setNoun(noun.getImpl());
		}
		if (pos.equals("copula")) {
			CopulaLexiconType copula = new CopulaLexiconType();
			copula.open(id);
			setCopula(copula.getImpl());
		}
		if (pos.equals("acronym")) {
			AcronymLexiconType acronym = new AcronymLexiconType();
			acronym.open(id);
			setAcronym(acronym.getImpl());
		}
		if (pos.equals("preposition")) {
			PrepositionLexiconType preposition = new PrepositionLexiconType();
			preposition.open(id);
			setPreposition(preposition.getImpl());
		}
		if (pos.equals("pronoun")) {
			PronounLexiconType pronoun = new PronounLexiconType();
			pronoun.open(id);
			setPronoun(pronoun.getImpl());
		}
		if (pos.equals("properName")) {
			ProperNameLexiconType properName = new ProperNameLexiconType();
			properName.open(id);
			setProperName(properName.getImpl());
		}
		if (pos.equals("modal")) {
			ModalLexiconType modal = new ModalLexiconType();
			modal.open(id);
			setModal(modal.getImpl());
		}
		if (pos.equals("quantifier")) {
			QuantifierLexiconType quantifier = new QuantifierLexiconType();
			quantifier.open(id);
			setQuantifier(quantifier.getImpl());
		}
		if (pos.equals("numeral")) {
			NumeralLexiconType numeral = new NumeralLexiconType();
			numeral.open(id);
			setNumeral(numeral.getImpl());
		}
		if (pos.equals("verb")) {
			VerbLexiconType verb = new VerbLexiconType();
			verb.open(id);
			setVerb(verb.getImpl());
		}
		if (pos.equals("existential")) {
			ExistentialLexiconType existential = new ExistentialLexiconType();
			existential.open(id);
			setExistential(existential.getImpl());
		}
		if (pos.equals("imperasonal")) {
			setImpersonal(new lexicon.jaxb.impl.ImpersonalLexiconTypeImpl());
		}

		if (pos.equals("wPrefix")) {
			WprefixLexiconType wPrefix = new WprefixLexiconType();
			wPrefix.open(id);
			setWPrefix(wPrefix.getImpl());
		}
		if (pos.equals("multiWordFrozen")) {
			MultiWordFrozenLexiconType multiWordFrozen = new MultiWordFrozenLexiconType();
			multiWordFrozen.open(id);
			setMultiWordFrozen(multiWordFrozen.getImpl());
		}
		if (pos.equals("multiWordPreposition")) {
			MultiWordPrepositionLexiconType multiWordPreposition = new MultiWordPrepositionLexiconType();
			multiWordPreposition.open(id);
			setMultiWordPreposition(multiWordPreposition.getImpl());
		}
		if (pos.equals("multiWordNoun")) {
			MultiWordNounLexiconType multiWordNoun = new MultiWordNounLexiconType();
			multiWordNoun.open(id);
			setMultiWordNoun(multiWordNoun.getImpl());
		}

		if (pos.equals("multiWordNounAdjective")) {
			MultiWordNounAdjectiveLexiconType multiWordNounAdjective = new MultiWordNounAdjectiveLexiconType();
			multiWordNounAdjective.open(id);
			setMultiWordNounAdjective(multiWordNounAdjective.getImpl());
		}

		if (pos.equals("multiWordVerbPhrase")) {
			MultiWordVerbPhraseLexiconType multiWordVerbPhrase = new MultiWordVerbPhraseLexiconType();
			multiWordVerbPhrase.open(id);
			setMultiWordVerbPhrase(multiWordVerbPhrase.getImpl());
		}

		senses = null;
		senses = getSenses();
		getSense().clear();
		getSense().addAll(senses);
	}

	public int add(int i) {
		return 0;
	}

	// ---------------------------------------------------------------------------------------
	public int add() {
		String sql = "INSERT INTO " + getTableName() + " VALUES (";
		sql += getId();
		sql += ", '" + getPos() + "'";
		String comment = getComment();
		if (comment == null) {
			comment = "";
		}
		try {
			comment = URLEncoder.encode(comment, Content.ADD_ENCODING);
		} catch (Exception e) {
		}
		sql += ", '" + comment + "'";
		String undotted = getUndotted();
		try {
			undotted = URLEncoder.encode(undotted, Content.ADD_ENCODING);
		} catch (Exception e) {
		}
		sql += ", '" + undotted + "'";
		String transliterated = LexiconUtils.getTransliteration(undotted);
		try {
			transliterated = URLEncoder.encode(transliterated,
					Content.ADD_ENCODING);
		} catch (Exception e) {
		}
		sql += ", '" + transliterated + "'";
		sql += ", '" + getRegister() + "'";
		sql += ", '" + getSpelling() + "'";
		String dotted = getDotted();
		try {
			dotted = URLEncoder.encode(dotted, Content.ADD_ENCODING);
		} catch (Exception e) {
		}
		sql += ", '" + dotted + "', 0)";
		System.out.println("sql=" + sql);
		int feedback = execute(sql);
		id = getCurrentID(getTableName(), getIDName());
		System.out.println("id======" + id);
		addPos(); // adds to specific table
		addSense();
		return id;
	}

	// ---------------------------------------------------------------------------------------
	public int addSense() {
		int result = 0;
		for (int i = 0; i < getSense().size(); i++) {
			SenseType source = new SenseType(
					(lexicon.jaxb.SenseType) getSense().get(i));
			result += source.add(id);
		}
		return result;
	}

	/**
	 * Updates the current record in the DB, so it would resemble the current
	 * object state. The method uses ResultSet.updateRow method in order to
	 * implement the generic update process. The method finds the record of the
	 * current object, generates the meta data (the names and types of the
	 * columns) , Runs on the columns and updateing each one, according with the
	 * column type. After these stages, the method calls
	 * <code>ResultSet.updateRow</code> in order to execute the update in the
	 * DB.
	 * 
	 * @see #info
	 * @see ResultSet#updateRow
	 * @see #openRS
	 * @return The number of rows that were affected from the action. If 0, then
	 *         nothing happened
	 */
	public int update() {
		String sql = "UPDATE " + getTableName() + " SET";
		sql += " pos='" + getPos() + "'";
		String comment = getComment();
		try {
			comment = URLEncoder.encode(comment, Content.UPDATE_ENCODING);
		} catch (Exception e) {
		}
		sql += ", comment='" + comment + "'";
		String undotted = getUndotted();
		try {
			undotted = URLEncoder.encode(undotted, Content.UPDATE_ENCODING);
		} catch (Exception e) {
		}
		sql += ", undotted='" + undotted + "'";
		String transliterated = LexiconUtils.getTransliteration(undotted);
		try {
			transliterated = URLEncoder.encode(transliterated,
					Content.UPDATE_ENCODING);
		} catch (Exception e) {
		}
		sql += ", transliterated='" + transliterated + "'";
		sql += ", register='" + getRegister() + "'";
		sql += ", spelling='" + getSpelling() + "'";
		String dotted = getDotted();
		try {
			dotted = URLEncoder.encode(dotted, Content.UPDATE_ENCODING);
		} catch (Exception e) {
		}
		sql += ", dotted='" + dotted + "' WHERE id=" + id;
		int feedback = execute(sql);
		feedback += updatePos(); // update the specific table if problem in
									// specific update will be large negativ
		return feedback;
	}

	public int remove() {
		removePos();
		removeSense();
		int result = super.remove();
		return result;
	}

	protected int removeSense() {
		return removeContents("sense", "id", "sid", id);
	}

	protected java.util.List getSenses() {
		if (senses == null) {
			senses = new ArrayList();
			String sql = "SELECT sid from sense WHERE id=" + id;
			List sources = getContents(sql, "sid");
			ArrayList result = new ArrayList();
			for (int i = 0; i < sources.size(); i++) {
				SenseType source = new SenseType();
				source.open(((Integer) sources.get(i)).intValue());
				senses.add(source.getImpl());
			}
		}
		return senses;
	}

	protected int removePos() {
		int result = 0;
		if (getAdjective() != null) {
			AdjectiveLexiconType adjective = new AdjectiveLexiconType();
			adjective.open(id);
			result += adjective.remove();
		}
		if (getAdverb() != null) {
			AdverbLexiconType adverb = new AdverbLexiconType();
			adverb.open(id);
			result += adverb.remove();
		}
		if (getConjunction() != null) {
			ConjunctionLexiconType conjunction = new ConjunctionLexiconType();
			conjunction.open(id);
			result += conjunction.remove();
		}
		if (getInterjection() != null) {
			InterjectionLexiconType interjection = new InterjectionLexiconType();
			interjection.open(id);
			result += interjection.remove();
		}
		if (getInterrogative() != null) {
			InterrogativeLexiconType interrogative = new InterrogativeLexiconType();
			interrogative.open(id);
			result += interrogative.remove();
		}
		if (getNegation() != null) {
			// NegationLexiconType negation = new NegationLexiconType();
			// negation.open(id);
			// setNegation(negation);
		}
		if (getTitle() != null) {
			TitleLexiconType title = new TitleLexiconType();
			title.open(id);
			result += title.remove();
		}
		if (getNoun() != null) {
			NounLexiconType noun = new NounLexiconType();
			noun.open(id);
			result += noun.remove();
		}
		if (getCopula() != null) {
			CopulaLexiconType copula = new CopulaLexiconType();
			copula.open(id);
			result += copula.remove();
		}
		if (getPreposition() != null) {
			PrepositionLexiconType preposition = new PrepositionLexiconType();
			preposition.open(id);
			result += preposition.remove();
		}
		if (getPronoun() != null) {
			PronounLexiconType pronoun = new PronounLexiconType();
			pronoun.open(id);
			result += pronoun.remove();
		}
		if (getProperName() != null) {
			ProperNameLexiconType properName = new ProperNameLexiconType();
			properName.open(id);
			result += properName.remove();
		}
		if (getModal() != null) {
			ModalLexiconType modal = new ModalLexiconType();
			modal.open(id);
			result += modal.remove();
		}
		if (getQuantifier() != null) {
			QuantifierLexiconType quantifier = new QuantifierLexiconType();
			quantifier.open(id);
			result += quantifier.remove();
		}
		if (getNumeral() != null) {
			NumeralLexiconType numeral = new NumeralLexiconType();
			numeral.open(id);
			result += numeral.remove();
		}
		if (getVerb() != null) {
			VerbLexiconType verb = new VerbLexiconType();
			verb.open(id);
			result += verb.remove();
		}
		if (getExistential() != null) {
			ExistentialLexiconType existential = new ExistentialLexiconType();
			existential.open(id);
			result += existential.remove();
		}
		if (getAcronym() != null) {
			AcronymLexiconType acronym = new AcronymLexiconType();
			acronym.open(id);
			result += acronym.remove();
		}
		if (getImpersonal() != null) {
		}
		if (getMultiWordFrozen() != null) {
			MultiWordFrozenLexiconType multiWordFrozen = new MultiWordFrozenLexiconType();
			multiWordFrozen.open(id);
			result += result += multiWordFrozen.remove();
		}
		if (getMultiWordPreposition() != null) {
			MultiWordPrepositionLexiconType multiWordPreposition = new MultiWordPrepositionLexiconType();
			multiWordPreposition.open(id);
			result += result += multiWordPreposition.remove();
		}
		if (getMultiWordNoun() != null) {
			MultiWordNounLexiconType multiWordNoun = new MultiWordNounLexiconType();
			multiWordNoun.open(id);
			result += result += multiWordNoun.remove();
		}
		if (getMultiWordNounAdjective() != null) {
			MultiWordNounAdjectiveLexiconType multiWordNounAdjective = new MultiWordNounAdjectiveLexiconType();
			multiWordNounAdjective.open(id);
			result += result += multiWordNounAdjective.remove();
		}
		if (getMultiWordVerbPhrase() != null) {
			MultiWordVerbPhraseLexiconType multiWordVerbPhrase = new MultiWordVerbPhraseLexiconType();
			multiWordVerbPhrase.open(id);
			result += result += multiWordVerbPhrase.remove();
		}
		if (getWPrefix() != null) {
			WprefixLexiconType wPrefix = new WprefixLexiconType();
			wPrefix.open(id);
			result += wPrefix.remove();
		}

		return result;
	}

	protected int addPos() {
		System.out.println("===========in addPos================");
		int result = 0;
		if (getAdjective() != null) {
			System.out.println("===========in addPos=============Adjective");
			AdjectiveLexiconType adjective = new AdjectiveLexiconType(
					getAdjective());
			result += adjective.add(id);
		}
		if (getAdverb() != null) {
			AdverbLexiconType adverb = new AdverbLexiconType(getAdverb());
			result += adverb.add(id);
		}
		if (getConjunction() != null) {
			ConjunctionLexiconType conjunction = new ConjunctionLexiconType(
					getConjunction());
			result += conjunction.add(id);
		}
		if (getInterjection() != null) {
			InterjectionLexiconType interjection = new InterjectionLexiconType(
					getInterjection());
			result += interjection.add(id);
		}
		if (getInterrogative() != null) {
			InterrogativeLexiconType interrogative = new InterrogativeLexiconType(
					getInterrogative());
			result += interrogative.add(id);
		}
		if (getNegation() != null) {
			// NegationLexiconType negation = new NegationLexiconType();
			// negation.open(id);
			// setNegation(negation);
		}
		if (getTitle() != null) {
			TitleLexiconType title = new TitleLexiconType(getTitle());
			result += title.add(id);
		}
		if (getNoun() != null) {
			NounLexiconType noun = new NounLexiconType(getNoun());
			result += noun.add(id);
		}
		if (getCopula() != null) {
			CopulaLexiconType copula = new CopulaLexiconType(getCopula());
			result += copula.add(id);
		}
		if (getPreposition() != null) {
			PrepositionLexiconType preposition = new PrepositionLexiconType(
					getPreposition());
			result += preposition.add(id);
		}
		if (getPronoun() != null) {
			PronounLexiconType pronoun = new PronounLexiconType(getPronoun());
			result += pronoun.add(id);
		}
		if (getProperName() != null) {
			ProperNameLexiconType properName = new ProperNameLexiconType(
					getProperName());
			result += properName.add(id);
		}
		if (getModal() != null) {
			ModalLexiconType modal = new ModalLexiconType(getModal());
			result += modal.add(id);
		}
		if (getQuantifier() != null) {
			QuantifierLexiconType quantifier = new QuantifierLexiconType(
					getQuantifier());
			result += result += quantifier.add(id);
		}
		if (getNumeral() != null) {
			NumeralLexiconType numeral = new NumeralLexiconType(getNumeral());
			result += numeral.add(id);
		}
		if (getVerb() != null) {
			VerbLexiconType verb = new VerbLexiconType(getVerb());
			result += verb.add(id);
		}

		if (getExistential() != null) {
			ExistentialLexiconType existential = new ExistentialLexiconType(
					getExistential());
			result += existential.add(id);
		}
		if (getAcronym() != null) {
			AcronymLexiconType acronym = new AcronymLexiconType(getAcronym());
			result += acronym.add(id);
		}
		if (getImpersonal() != null) {
		}
		if (getMultiWordFrozen() != null) {
			MultiWordFrozenLexiconType multiWordFrozen = new MultiWordFrozenLexiconType(
					getMultiWordFrozen());
			result += multiWordFrozen.add(id);
		}
		if (getMultiWordPreposition() != null) {
			MultiWordPrepositionLexiconType multiWordPreposition = new MultiWordPrepositionLexiconType(
					getMultiWordPreposition());
			result += multiWordPreposition.add(id);
		}
		if (getMultiWordNoun() != null) {
			MultiWordNounLexiconType multiWordNoun = new MultiWordNounLexiconType(
					getMultiWordNoun());
			result += multiWordNoun.add(id);
		}
		if (getMultiWordNounAdjective() != null) {
			MultiWordNounAdjectiveLexiconType multiWordNounAdjective = new MultiWordNounAdjectiveLexiconType(
					getMultiWordNounAdjective());
			result += multiWordNounAdjective.add(id);
		}
		if (getMultiWordVerbPhrase() != null) {
			MultiWordVerbPhraseLexiconType multiWordVerbPhrase = new MultiWordVerbPhraseLexiconType(
					getMultiWordVerbPhrase());
			result += multiWordVerbPhrase.add(id);
		}
		if (getWPrefix() != null) {
			WprefixLexiconType wPrefix = new WprefixLexiconType(getWPrefix());
			result += wPrefix.add(id);
		}
		return result;
	}

	protected int updatePos() {
		int result = 0;
		if (getAdjective() != null) {
			AdjectiveLexiconType adjective = new AdjectiveLexiconType(
					getAdjective());
			result += adjective.update();
		}
		if (getAdverb() != null) {
			AdverbLexiconType adverb = new AdverbLexiconType(getAdverb());
			result += adverb.update();
		}
		if (getConjunction() != null) {
			ConjunctionLexiconType conjunction = new ConjunctionLexiconType(
					getConjunction());
			result += conjunction.update();
		}
		if (getInterjection() != null) {
			InterjectionLexiconType interjection = new InterjectionLexiconType(
					getInterjection());
			result += interjection.update();
		}
		if (getInterrogative() != null) {
			InterrogativeLexiconType interrogative = new InterrogativeLexiconType(
					getInterrogative());
			result += interrogative.update();
		}
		if (getNegation() != null) {
			// NegationLexiconType negation = new NegationLexiconType();
			// negation.open(id);
			// setNegation(negation);
		}
		if (getTitle() != null) {
			TitleLexiconType title = new TitleLexiconType(getTitle());
			result += title.update();
		}

		if (getNoun() != null) {
			NounLexiconType noun = new NounLexiconType(getNoun());
			result += noun.update();
		}
		if (getCopula() != null) {
			CopulaLexiconType copula = new CopulaLexiconType(getCopula());
			result += copula.update();
		}
		if (getPreposition() != null) {
			PrepositionLexiconType preposition = new PrepositionLexiconType(
					getPreposition());
			result += preposition.update();
		}
		if (getPronoun() != null) {
			PronounLexiconType pronoun = new PronounLexiconType(getPronoun());
			result += pronoun.update();
		}
		if (getProperName() != null) {
			ProperNameLexiconType properName = new ProperNameLexiconType(
					getProperName());
			result += properName.update();
		}
		if (getModal() != null) {
			ModalLexiconType modal = new ModalLexiconType(getModal());
			result += modal.update();
		}
		if (getQuantifier() != null) {
			QuantifierLexiconType quantifier = new QuantifierLexiconType(
					getQuantifier());
			result += quantifier.update();
		}
		if (getNumeral() != null) {
			NumeralLexiconType numeral = new NumeralLexiconType(getNumeral());
			result += numeral.update();
		}
		if (getVerb() != null) {
			VerbLexiconType verb = new VerbLexiconType(getVerb());
			result += verb.update();
		}
		if (getExistential() != null) {
			ExistentialLexiconType existential = new ExistentialLexiconType(
					getExistential());
			result += existential.update();
		}
		if (getAcronym() != null) {
			AcronymLexiconType acronym = new AcronymLexiconType(getAcronym());
			result += acronym.update();
		}
		if (getImpersonal() != null) {
		}
		if (getWPrefix() != null) {
			WprefixLexiconType wPrefix = new WprefixLexiconType(getWPrefix());
			result += wPrefix.update();
		}
		if (getMultiWordFrozen() != null) {
			MultiWordFrozenLexiconType multiWordFrozen = new MultiWordFrozenLexiconType(
					getMultiWordFrozen());
			result += multiWordFrozen.update();
		}
		if (getMultiWordPreposition() != null) {
			MultiWordPrepositionLexiconType multiWordPreposition = new MultiWordPrepositionLexiconType(
					getMultiWordPreposition());
			result += multiWordPreposition.update();
		}
		if (getMultiWordNoun() != null) {
			MultiWordNounLexiconType multiWordNoun = new MultiWordNounLexiconType(
					getMultiWordNoun());
			result += multiWordNoun.update();
		}

		if (getMultiWordNounAdjective() != null) {
			MultiWordNounAdjectiveLexiconType multiWordNounAdjective = new MultiWordNounAdjectiveLexiconType(
					getMultiWordNounAdjective());
			result += multiWordNounAdjective.update();
		}

		if (getMultiWordVerbPhrase() != null) {
			MultiWordVerbPhraseLexiconType multiWordVerbPhrase = new MultiWordVerbPhraseLexiconType(
					getMultiWordVerbPhrase());
			result += multiWordVerbPhrase.update();
		}

		return result;
	}

	/**
	 * Gets the value of the adjective property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.AdjectiveLexiconType}
	 */
	public lexicon.jaxb.AdjectiveLexiconType getAdjective() {
		return item.getAdjective();
	}

	/*
	 * public java.util.List getSense() { return item.getSense(); } /** Sets the
	 * value of the adjective property.
	 * 
	 * @param value allowed object is {@link lexicon.jaxb.AdjectiveLexiconType}
	 */
	public void setAdjective(lexicon.jaxb.AdjectiveLexiconType value) {
		item.setAdjective(value);
	}

	/**
	 * Gets the value of the comment property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getComment() {
		if (item.getComment() == null) {
			return "";
		}
		return item.getComment();
	}

	/**
	 * Sets the value of the comment property.
	 * 
	 * @param value
	 *            allowed object is {@link java.lang.String}
	 */
	public void setComment(java.lang.String value) {
		item.setComment(value);
	}

	/**
	 * Gets the value of the interjection property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.InterjectionLexiconType}
	 */
	public lexicon.jaxb.InterjectionLexiconType getInterjection() {
		return item.getInterjection();
	}

	/**
	 * Sets the value of the interjection property.
	 * 
	 * @param value
	 *            allowed object is {@link lexicon.jaxb.InterjectionLexiconType}
	 */
	public void setInterjection(lexicon.jaxb.InterjectionLexiconType value) {
		item.setInterjection(value);
	}

	/**
	 * Gets the value of the adverb property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.AdverbLexiconType}
	 */
	public lexicon.jaxb.AdverbLexiconType getAdverb() {
		return item.getAdverb();
	}

	/**
	 * Sets the value of the adverb property.
	 * 
	 * @param value
	 *            allowed object is {@link lexicon.jaxb.AdverbLexiconType}
	 */
	public void setAdverb(lexicon.jaxb.AdverbLexiconType value) {
		item.setAdverb(value);
	}

	/**
	 * Gets the value of the script property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getRegister() {
		return item.getRegister();
	}

	/**
	 * Sets the value of the script property.
	 * 
	 * @param value
	 *            allowed object is {@link java.lang.String}
	 */
	public void setRegister(java.lang.String value) {
		item.setRegister(value);
	}

	/**
	 * Gets the value of the script property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getSpelling() {
		return item.getSpelling();
	}

	/**
	 * Sets the value of the script property.
	 * 
	 * @param value
	 *            allowed object is {@link java.lang.String}
	 */
	public void setSpelling(java.lang.String value) {
		item.setSpelling(value);
	}

	/**
	 * Gets the value of the transliterated property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getTransliterated() {
		if (item.getTransliterated() == null) {
			return "";
		}
		return item.getTransliterated();
	}

	/**
	 * Sets the value of the transliterated property.
	 * 
	 * @param value
	 *            allowed object is {@link java.lang.String}
	 */
	public void setTransliterated(java.lang.String value) {
		item.setTransliterated(value);
	}

	/**
	 * Gets the value of the quantifier property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.QuantifierLexiconType}
	 */
	public lexicon.jaxb.QuantifierLexiconType getQuantifier() {
		return item.getQuantifier();
	}

	/**
	 * Sets the value of the quantifier property.
	 * 
	 * @param value
	 *            allowed object is {@link lexicon.jaxb.QuantifierLexiconType}
	 */
	public void setQuantifier(lexicon.jaxb.QuantifierLexiconType value) {
		item.setQuantifier(value);
	}

	/**
	 * Gets the value of the preposition property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.PrepositionLexiconType}
	 */
	public lexicon.jaxb.PrepositionLexiconType getPreposition() {
		return item.getPreposition();
	}

	/**
	 * Sets the value of the preposition property.
	 * 
	 * @param value
	 *            allowed object is {@link lexicon.jaxb.PrepositionLexiconType}
	 */
	public void setPreposition(lexicon.jaxb.PrepositionLexiconType value) {
		item.setPreposition(value);
	}

	/**
	 * Gets the value of the verb property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.VerbLexiconType}
	 */
	public lexicon.jaxb.VerbLexiconType getVerb() {
		return item.getVerb();
	}

	/**
	 * Sets the value of the verb property.
	 * 
	 * @param value
	 *            allowed object is {@link lexicon.jaxb.VerbLexiconType}
	 */
	public void setVerb(lexicon.jaxb.VerbLexiconType value) {
		item.setVerb(value);
	}

	/**
	 * Gets the value of the pronoun property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.PronounLexiconType}
	 */
	public lexicon.jaxb.PronounLexiconType getPronoun() {
		return item.getPronoun();
	}

	/**
	 * Sets the value of the pronoun property.
	 * 
	 * @param value
	 *            allowed object is {@link lexicon.jaxb.PronounLexiconType}
	 */
	public void setPronoun(lexicon.jaxb.PronounLexiconType value) {
		item.setPronoun(value);
	}

	/**
	 * Gets the value of the noun property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.NounLexiconType}
	 */
	public lexicon.jaxb.NounLexiconType getNoun() {
		return item.getNoun();
	}

	/**
	 * Sets the value of the noun property.
	 * 
	 * @param value
	 *            allowed object is {@link lexicon.jaxb.NounLexiconType}
	 */
	public void setNoun(lexicon.jaxb.NounLexiconType value) {
		item.setNoun(value);
	}

	public void setCopula(lexicon.jaxb.CopulaLexiconType value) {
		item.setCopula(value);
	}

	public lexicon.jaxb.CopulaLexiconType getCopula() {
		return item.getCopula();
	}

	/**
	 * Gets the value of the negation property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.NegationLexiconType}
	 */
	public lexicon.jaxb.NegationLexiconType getNegation() {
		return item.getNegation();
	}

	/**
	 * Sets the value of the negation property.
	 * 
	 * @param value
	 *            allowed object is {@link lexicon.jaxb.NegationLexiconType}
	 */
	public void setNegation(lexicon.jaxb.NegationLexiconType value) {
		item.setNegation(value);
	}

	/**
	 * Gets the value of the dotted property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getDotted() {
		if (item.getDotted() == null) {
			return "";
		}
		return item.getDotted();
	}

	/**
	 * Sets the value of the dotted property.
	 * 
	 * @param value
	 *            allowed object is {@link java.lang.String}
	 */
	public void setDotted(java.lang.String value) {
		item.setDotted(value);
	}

	/**
	 * Gets the value of the undotted property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getUndotted() {
		if (item.getUndotted() == null) {
			return "";
		}
		return item.getUndotted();
	}

	/**
	 * Sets the value of the undotted property.
	 * 
	 * @param value
	 *            allowed object is {@link java.lang.String}
	 */
	public void setUndotted(java.lang.String value) {
		item.setUndotted(value);
	}

	/**
	 * Gets the value of the interrogative property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.InterrogativeLexiconType}
	 */
	public lexicon.jaxb.InterrogativeLexiconType getInterrogative() {
		return item.getInterrogative();
	}

	/**
	 * Sets the value of the interrogative property.
	 * 
	 * @param value
	 *            allowed object is
	 *            {@link lexicon.jaxb.InterrogativeLexiconType}
	 */
	public void setInterrogative(lexicon.jaxb.InterrogativeLexiconType value) {
		item.setInterrogative(value);
	}

	public lexicon.jaxb.ModalLexiconType getModal() {
		return item.getModal();
	}

	public void setModal(lexicon.jaxb.ModalLexiconType value) {
		item.setModal(value);
	}

	/**
	 * Gets the value of the properName property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.ProperNameLexiconType}
	 */
	public lexicon.jaxb.ProperNameLexiconType getProperName() {
		return item.getProperName();
	}

	/**
	 * Sets the value of the properName property.
	 * 
	 * @param value
	 *            allowed object is {@link lexicon.jaxb.ProperNameLexiconType}
	 */
	public void setProperName(lexicon.jaxb.ProperNameLexiconType value) {
		item.setProperName(value);
	}

	/**
	 * Gets the value of the id property.
	 * 
	 * @return possible object is {@link java.lang.String}
	 */
	public java.lang.String getId() {
		return item.getId();
	}

	/**
	 * Sets the value of the id property.
	 * 
	 * @param value
	 *            allowed object is {@link java.lang.String}
	 */
	public void setId(java.lang.String value) {
		item.setId(value);
	}

	/**
	 * Gets the value of the conjunction property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.ConjunctionLexiconType}
	 */
	public lexicon.jaxb.ConjunctionLexiconType getConjunction() {
		return item.getConjunction();
	}

	/**
	 * Sets the value of the conjunction property.
	 * 
	 * @param value
	 *            allowed object is {@link lexicon.jaxb.ConjunctionLexiconType}
	 */
	public void setConjunction(lexicon.jaxb.ConjunctionLexiconType value) {
		item.setConjunction(value);
	}

	public List getSense() {
		return item.getSense();
	}

	/**
	 * Gets the value of the existential property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.ExistentialLexiconType}
	 */
	public lexicon.jaxb.ExistentialLexiconType getExistential() {
		return item.getExistential();
	}

	/**
	 * Sets the value of the existential property.
	 * 
	 * @param value
	 *            allowed object is {@link lexicon.jaxb.ExistentialLexiconType}
	 */
	public void setExistential(lexicon.jaxb.ExistentialLexiconType value) {
		item.setExistential(value);
	}

	/**
	 * Gets the value of the impersonal property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.ImpersonalLexiconType}
	 */
	public lexicon.jaxb.ImpersonalLexiconType getImpersonal() {
		return item.getImpersonal();
	}

	/**
	 * Sets the value of the impersonal property.
	 * 
	 * @param value
	 *            allowed object is {@link lexicon.jaxb.ImpersonalLexiconType}
	 */
	public void setImpersonal(lexicon.jaxb.ImpersonalLexiconType value) {
		item.setImpersonal(value);
	}

	/**
	 * Gets the value of the prefixes property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.PrefixesLexiconType}
	 */
	public lexicon.jaxb.WprefixLexiconType getWPrefix() {
		return item.getWPrefix();
	}

	/**
	 * Sets the value of the prefixes property.
	 * 
	 * @param value
	 *            allowed object is {@link lexicon.jaxb.PrefixesLexiconType}
	 */
	public void setWPrefix(lexicon.jaxb.WprefixLexiconType value) {
		item.setWPrefix(value);
	}

	/**
	 * Gets the value of the quantifier property.
	 * 
	 * @return possible object is {@link lexicon.jaxb.NumeralLexiconType}
	 */
	public lexicon.jaxb.NumeralLexiconType getNumeral() {
		return item.getNumeral();
	}

	/**
	 * Sets the value of the quantifier property.
	 * 
	 * @param value
	 *            allowed object is {@link lexicon.jaxb.NumeralLexiconType}
	 */
	public void setNumeral(lexicon.jaxb.NumeralLexiconType value) {
		item.setNumeral(value);
	}

	public lexicon.jaxb.TitleLexiconType getTitle() {
		return item.getTitle();
	}

	public void setTitle(lexicon.jaxb.TitleLexiconType value) {
		item.setTitle(value);

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see lexicon.jaxb.ItemType#getAcronym()
	 */
	public lexicon.jaxb.AcronymLexiconType getAcronym() {
		return item.getAcronym();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see lexicon.jaxb.ItemType#setAcronym(lexicon.jaxb.AcronymLexiconType)
	 */
	public void setAcronym(lexicon.jaxb.AcronymLexiconType value) {
		item.setAcronym(value);

	}

	public lexicon.jaxb.MultiWordFrozenLexiconType getMultiWordFrozen() {
		return item.getMultiWordFrozen();
	}

	public void setMultiWordFrozen(lexicon.jaxb.MultiWordFrozenLexiconType value) {
		item.setMultiWordFrozen(value);

	}

	public lexicon.jaxb.MultiWordPrepositionLexiconType getMultiWordPreposition() {
		return item.getMultiWordPreposition();
	}

	public void setMultiWordPreposition(
			lexicon.jaxb.MultiWordPrepositionLexiconType value) {
		item.setMultiWordPreposition(value);

	}

	public lexicon.jaxb.MultiWordNounLexiconType getMultiWordNoun() {
		return item.getMultiWordNoun();
	}

	public void setMultiWordNoun(lexicon.jaxb.MultiWordNounLexiconType value) {
		item.setMultiWordNoun(value);
	}

	public lexicon.jaxb.MultiWordNounAdjectiveLexiconType getMultiWordNounAdjective() {
		return item.getMultiWordNounAdjective();
	}

	public void setMultiWordNounAdjective(
			lexicon.jaxb.MultiWordNounAdjectiveLexiconType value) {
		item.setMultiWordNounAdjective(value);
	}

	public lexicon.jaxb.MultiWordVerbPhraseLexiconType getMultiWordVerbPhrase() {
		return item.getMultiWordVerbPhrase();
	}

	public void setMultiWordVerbPhrase(
			lexicon.jaxb.MultiWordVerbPhraseLexiconType value) {
		item.setMultiWordVerbPhrase(value);
	}
}
