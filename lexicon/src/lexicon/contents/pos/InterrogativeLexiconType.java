//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.02.17 at 12:10:17 GMT+02:00 
//

package lexicon.contents.pos;

import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import lexicon.contents.exception_types.InterrogativeExceptionType; 
import lexicon.contents.Content;
/**
 * ���� �� ���� ������ ���� ����.
 * �����:
 * ======
 * inflectionBase �� ����� �� inflect="false".
 * ������ ��� ���� ����� ����� ������ ����, ����� ����� ������� add/replace/remove.
 * 
 * Java content class for InterrogativeLexiconType complex type.
 * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/C:/hebrew_lexicon.xsd line 976)
 * <p>
 * <pre>
 * &lt;complexType name="InterrogativeLexiconType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice maxOccurs="unbounded" minOccurs="0">
 *           &lt;element name="add" type="{}InterrogativeExceptionType" maxOccurs="unbounded" minOccurs="0"/>
 *           &lt;element name="replace" type="{}InterrogativeExceptionType" maxOccurs="unbounded" minOccurs="0"/>
 *           &lt;element name="remove" type="{}InterrogativeExceptionType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *       &lt;attribute name="inflect" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *       &lt;attribute name="inflectionBase" type="{http://www.w3.org/2001/XMLSchema}token" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 */
public class InterrogativeLexiconType extends Content implements lexicon.jaxb.InterrogativeLexiconType{
	lexicon.jaxb.InterrogativeLexiconType content;
	
	public InterrogativeLexiconType(lexicon.jaxb.InterrogativeLexiconType content) {
		this.content = content;
		TABLE = "interrogative";
		IDNAME = "id"; 
	}
	public InterrogativeLexiconType() {
		content = new lexicon.jaxb.impl.InterrogativeLexiconTypeImpl();
		TABLE = "interrogative";
		IDNAME = "id"; 
	}
	public lexicon.jaxb.impl.InterrogativeLexiconTypeImpl getImpl() {
		return (lexicon.jaxb.impl.InterrogativeLexiconTypeImpl)content;
	}
	public int add() {
		return 0;
	}
	/**
	*An empty implementation to the method add() methods in the different subclasses of Content.
	*Connects to the DB, commits the different SQL statements and return feedback.
	*@param		sql - The SQL statement to be executed.
	*@return	Number of rows affected (0, if nothing happened, 1 if one row added).
	*/
	public int add(int id) {
		String sql = "INSERT INTO "+ getTableName() + " VALUES (";
		sql += id;
		sql += ", "+(isInflect()?1:0);
		String inflectionBase = getInflectionBase();
		if (inflectionBase == null) {
			inflectionBase = "";
		} 
		try {
			inflectionBase = URLEncoder.encode(inflectionBase, Content.ADD_ENCODING); 
		}catch (Exception e) {}
		sql += ", '"+ inflectionBase +"'";
		sql += ", '"+ getInterrogativeType() +"'"
		+")";
		int feedback = execute(sql);
		id = getCurrentID(getTableName(), getIDName()); 
		addActions(id);
		return feedback;
	}
	/**
	*Updates the current record in the DB, so it would resemble the current object state.
	*The method uses ResultSet.updateRow method in order to implement the generic update process.
	*The method finds the record of the current object, generates the meta data (the names and types of the columns)
	*, Runs on the columns and updateing each one, according with the column type. After these stages, the
	*method calls <code>ResultSet.updateRow</code> in order to execute the update in the DB.
	*@see   #info
	*@see   ResultSet#updateRow
	*@see   #openRS
	*@return	The number of rows that were affected from the action. If 0, then nothing happened
	*/
	public int update() {
		String sql = "UPDATE "+ getTableName() + " SET"; 
		sql += " inflect="+(isInflect()?1:0);
		sql += " ,type='"+ getInterrogativeType() +"'";
		String inflectionBase = getInflectionBase();
		if (inflectionBase == null) {
			inflectionBase = "";
		}
		try {
			inflectionBase = URLEncoder.encode(inflectionBase, Content.UPDATE_ENCODING);			
		}catch (Exception e) {} 
		sql += ", inflectionBase='"+ inflectionBase +"' WHERE id="+getID();
		int feedback = execute(sql); 
		//updateActions();
		return feedback;
	}
	protected int addActions(int id) {
		int result = 0;
		for (int i=0; i< getAddOrReplaceOrRemove().size(); i++) {
			InterrogativeExceptionType exceptionType = new InterrogativeExceptionType((lexicon.jaxb.InterrogativeExceptionType)getAddOrReplaceOrRemove().get(i));
			exceptionType.setAction(getAction(getAddOrReplaceOrRemove().get(i)));
			result += exceptionType.add(id);
		}
		return result;
	}
	protected int updateActions() {
		int result = 0;
		for (int i=0; i< getAddOrReplaceOrRemove().size(); i++) {
			InterrogativeExceptionType exceptionType = new InterrogativeExceptionType((lexicon.jaxb.InterrogativeExceptionType)getAddOrReplaceOrRemove().get(i));
			exceptionType.setAction(getAction(getAddOrReplaceOrRemove().get(i)));
			result += exceptionType.update();
		}
		return result;
	} 
	protected int removeActions(int id) {
		return removeContents("interrogative_exception_type", "id", "aid", id);  
	}	
	public int remove() {
		removeActions(id);
		int result = super.remove();
		return result;
	}
	protected String getAction(Object obj) {
		String name = obj.getClass().getName();
		if (name.indexOf("Add") >=0) {
			return "add";
		}
		if (name.indexOf("Replace") >=0) {
			return "replace";
		}
		if (name.indexOf("Remove") >=0) {
			return "remove";
		}
		return "";
	}
	public void load() {
		List actions = getActions();
		getAddOrReplaceOrRemove().clear();
		getAddOrReplaceOrRemove().addAll(actions);
		setInflect(getInt("inflect") == 1); 
		setInflectionBase(getString("inflectionBase"));
		setInterrogativeType(getString("type"));
	}
	public java.util.List getActions() {
		List actions = getContents("interrogative_exception_type", "id", id);
		ArrayList result = new ArrayList();
		for (int i=0; i< actions.size(); i++) {
			Content content = (Content)actions.get(i);
			if (content.getString("action").equals("add")) {
				Add action = new Add();
				action.open(content.getInt("aid"));
				result.add(action.getActionImpl());
			}
			if (content.getString("action").equals("remove")) {
				Remove action = new Remove();
				action.open(content.getInt("aid"));
				result.add(action.getActionImpl());
			}
			if (content.getString("action").equals("replace")) {
				Replace action = new Replace();
				action.open(content.getInt("aid"));
				result.add(action.getActionImpl());
			}
		}
		return result;
	}	
    /**
     * Gets the value of the inflect property.
     * 
     */
	public boolean isInflect() {
    	return content.isInflect();
    }

    /**
     * Sets the value of the inflect property.
     * 
     */
	public void setInflect(boolean value) {
		content.setInflect(value);
	}

    /**
     * Gets the value of the inflectionBase property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
	public java.lang.String getInflectionBase() {
		if (content.getInflectionBase() == null) {
			return "";
		}
		return content.getInflectionBase();
	}

    /**
     * Sets the value of the inflectionBase property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
	public void setInflectionBase(String value) {
		content.setInflectionBase(value);
	}

	 /**
     * Gets the value of the inflectionBase property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
	public java.lang.String getInterrogativeType() {
		return content.getInterrogativeType();
	}

    /**
     * Sets the value of the inflectionBase property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
	public void setInterrogativeType(String value) {
		content.setInterrogativeType(value);
	}

	
    /**
     * Gets the value of the AddOrReplaceOrRemove property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the AddOrReplaceOrRemove property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddOrReplaceOrRemove().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link lexicon.jaxb.InterjectionLexiconType.Remove}
     * {@link lexicon.jaxb.InterjectionLexiconType.Replace}
     * {@link lexicon.jaxb.InterjectionLexiconType.Add}
     * 
     */
	public java.util.List getAddOrReplaceOrRemove() {
		return content.getAddOrReplaceOrRemove();
	}
    /**
     * ���� �� ���� ������ ����� ������.
     * ���� -- ���� ����, ����� ����, �������� ������ ������ �������.
     * ������ ����, �� ����� ���� ��� ��� �������� ����� ���� ������ (����, ���� ��� ���� �����, �� ���� �����, �� ���� �����), ��� ����� �� ����� ������. ��� ���� ������ ��� �� ������ ������� inflectPossessive="false" �-inflectConstruct="false".
     * 
     * Java content class for add element declaration.
     * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/C:/files/hebrew_lexicon_new.xsd line 231)
     * <p>
     * <pre>
     * &lt;element name="add" type="{}InterrogativeExceptionType"/>
     * </pre>
     * 
     */
    public class Add extends InterrogativeExceptionType implements lexicon.jaxb.InterrogativeLexiconType.Add  {
    	public Add() {
    		super ();
    		content = new lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.AddImpl();
    	}
    	public Add(lexicon.jaxb.InterrogativeExceptionType content) {
    		super (content);
    	}
    	public lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.AddImpl getActionImpl() {
    		return (lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.AddImpl)content;
    	}
    }


    /**
     * ���� �� ���� ����� ����� ������ ����� �������, ���� ���� ����� ����� ����� ����� ��������, ��� ����� (���� ������ �� ������ ����, �� ��� ����� ���).
     * ������ ��� ����� ��� ����� ��� ���� ��� ����� ���� ������, �� ����� �� �� ����� ����� �� ������ ��� �� ���, ����� �����, �� ����� �� ������.
     * ����� ����, �� ������ ����� ��� �- add ��- replace ��� ������ �- remove, ��� ���� �� ������ ���� ����� ������ ���� ����� ��������.
     * 
     * Java content class for remove element declaration.
     * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/C:/files/hebrew_lexicon_new.xsd line 249)
     * <p>
     * <pre>
     * &lt;element name="remove" type="{}InterrogativeExceptionType"/>
     * </pre>
     * 
     */
    public class Remove extends InterrogativeExceptionType implements lexicon.jaxb.InterrogativeLexiconType.Remove  {
    	public Remove(lexicon.jaxb.InterrogativeExceptionType content) {
    		super (content);
    	}
    	public Remove() {
    		super ();
    		content = new lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.RemoveImpl();
    	}
    	public lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.RemoveImpl getActionImpl() {
    		return (lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.RemoveImpl)content;
    	}
    }


    /**
     * ���� �� ���� ������ ����� ������ ������.
     * ���� -- ����� ���� ����, ������ ��'.
     * ������ ����, �� ������ ���� ��� ��� �������� ����� ���� ������ (����, ���� ��� ���� �����, �� ���� �����, �� ���� �����), ��� ����� �� ����� ������, ��� ������ �� ������ ������� ������. ��� ���� ������ ��� �� ������ ������� inflectPossessive="false" �-inflectConstruct="false".
     * 
     * Java content class for replace element declaration.
     * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/C:/files/hebrew_lexicon_new.xsd line 240)
     * <p>
     * <pre>
     * &lt;element name="replace" type="{}InterrogativeExceptionType"/>
     * </pre>
     * 
     */
    public class Replace extends InterrogativeExceptionType implements lexicon.jaxb.InterrogativeLexiconType.Replace  {
    	public Replace(lexicon.jaxb.InterrogativeExceptionType content) {
    		super (content);
    	}
    	public Replace() {
    		super ();
    		content = new lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.ReplaceImpl();
    	}
    	public lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.ReplaceImpl getActionImpl() {
    		return (lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.ReplaceImpl)content;
    	}
    }

}
