//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.12.23 at 10:34:08 AM IST 
//


package lexicon.jaxb;


/**
 * מבנה זה מגדיר ערך מילוני מסוג "שם תואר".
 * שמות תואר נוטים יפה ובאופן סדיר.
 * צורת הבסיס היא צורת זכר יחיד נפרד.
 * מצורת הבסיס ניתן לגזור צורת נקבה (צורן ה/ת/ית) אשר תמיד קיים וכן להטות לצורת רבים בזכר ובנקבה.
 * לכל ההטיות יש צורות סמיכות וקניין חבור.
 * צורני נטייה מפורטים כתכונות.
 * ריבוי זכר ע"י צורן 'ים'.
 * ריבוי נקבה ע"י צורן 'ות''.
 * תוספות (add) יכולות להיות צורות נוספות של כתיבה, גזירה נוספת (זוגי, למשל) וכו'.
 * החלפה (replace) משמשת לתיקון הצורות הנטויות ע"י צורה יוצאת דופן. ניתן לציין אם השינוי מהווה בסיס לשינוי או לא ע"י שימוש ב inflectConstruct, inflectPossessive ו- base, אשר יוסברו בהקשרם.
 * אילוץ:
 * ======
 * אם המין (gender) הוא נקבה (feminine), אזי אין משמעות לתכונת ה- feminine (צורן נקבה) ולכן לא תופיע תכונת ה- feminine (צורן נקבה) כאשר ערך התכונה מין (gender) הוא נקבה (feminine).
 * אילוץ:
 * ======
 * אם הריבוי (number) הוא רבים (plural), אזי אין משמעות לתכונת ה- plural (צורן ריבוי) ולכן לא תופיע תכונת ה-  plural (צורן ריבוי) כאשר ערך התכונה ריבוי (number) הוא רבים (plural).
 * אילוץ:
 * ======
 * root ימורכב בד"כ מ- 3 אותיות. ישנם שורשים בני 2 אותיות וגם כאלה בני 4 ו- 5. במקרים מיוחדים ניתן לאלץ מילים להכנס לתבנית שורש/משקל כשורש -- וראו על "יצירת שורשים חדשים" בספרו של עוזי אורנן "המילה האחרונה" פרק 6.
 * אילוץ:
 * ======
 * אם מופיעה תכונת שורש (root) אזי תופיע גם תכונת משקל (pattern). ז"א התכונות root ו- pattern חייבות להופיע יחד או לא להופיע כלל. העם לכך הוא בהנחה כי השילוב של שורש ומשקל הוא בעל משמעות ומכיל את המידע הדרוש בשעה שאחד מהם בלבד מכיל מידע חסר ולא מספק. יתירה מזאת, ההנחה היא שאין השורש חשוב יותר מהמשקל ואין המשקל חשוב יותר מהשורש. וראו דיון על כך בספרו של עוזי אורנן "המילה האחרונה" פרק 2 סעיף 2.3 ע"מ 28-32.
 * אילוץ:
 * ======
 * inflectionBase יופיע רק אם הוא שונה מהמילה עצמה. inflectionBase לא יופיע ריק.
 * 
 * Java content class for AdjectiveLexiconType complex type.
 * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/home/syjacob/automaticCode/jwsdp-1.6/jaxb/lib/hebrew_MWlexicon.xsd line 380)
 * <p>
 * <pre>
 * &lt;complexType name="AdjectiveLexiconType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice maxOccurs="unbounded" minOccurs="0">
 *           &lt;element name="add" type="{}NounExceptionType" maxOccurs="unbounded" minOccurs="0"/>
 *           &lt;element name="replace" type="{}NounExceptionType" maxOccurs="unbounded" minOccurs="0"/>
 *           &lt;element name="remove" type="{}NounExceptionType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *       &lt;attribute name="acronym" type="{}ThreeStateType" default="false" />
 *       &lt;attribute name="dottedPlural" type="{http://www.w3.org/2001/XMLSchema}token" default="" />
 *       &lt;attribute name="feminine" type="{}FeminineType" default="h" />
 *       &lt;attribute name="foreign" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *       &lt;attribute name="gender" type="{}GenderType" default="masculine" />
 *       &lt;attribute name="inflectConstructP" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" />
 *       &lt;attribute name="inflectConstructS" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" />
 *       &lt;attribute name="inflectionBase" type="{http://www.w3.org/2001/XMLSchema}token" default="" />
 *       &lt;attribute name="inflectionPattern" type="{http://www.w3.org/2001/XMLSchema}token" default="" />
 *       &lt;attribute name="ipSource" type="{http://www.w3.org/2001/XMLSchema}token" default="" />
 *       &lt;attribute name="number" type="{}NumberType" default="singular" />
 *       &lt;attribute name="pattern" type="{http://www.w3.org/2001/XMLSchema}token" default="" />
 *       &lt;attribute name="plural" type="{}PluralType" default="im" />
 *       &lt;attribute name="root" type="{http://www.w3.org/2001/XMLSchema}token" default="" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 */
public interface AdjectiveLexiconType {


    /**
     * Gets the value of the feminine property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getFeminine();

    /**
     * Sets the value of the feminine property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setFeminine(java.lang.String value);

    /**
     * Gets the value of the gender property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getGender();

    /**
     * Sets the value of the gender property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setGender(java.lang.String value);

    /**
     * Gets the value of the dottedPlural property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getDottedPlural();

    /**
     * Sets the value of the dottedPlural property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setDottedPlural(java.lang.String value);

    /**
     * Gets the value of the plural property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getPlural();

    /**
     * Sets the value of the plural property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setPlural(java.lang.String value);

    /**
     * Gets the value of the foreign property.
     * 
     */
    boolean isForeign();

    /**
     * Sets the value of the foreign property.
     * 
     */
    void setForeign(boolean value);

    /**
     * Gets the value of the ipSource property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getIpSource();

    /**
     * Sets the value of the ipSource property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setIpSource(java.lang.String value);

    /**
     * Gets the value of the inflectConstructS property.
     * 
     */
    boolean isInflectConstructS();

    /**
     * Sets the value of the inflectConstructS property.
     * 
     */
    void setInflectConstructS(boolean value);

    /**
     * Gets the value of the inflectionPattern property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getInflectionPattern();

    /**
     * Sets the value of the inflectionPattern property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setInflectionPattern(java.lang.String value);

    /**
     * Gets the value of the number property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getNumber();

    /**
     * Sets the value of the number property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setNumber(java.lang.String value);

    /**
     * Gets the value of the root property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getRoot();

    /**
     * Sets the value of the root property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setRoot(java.lang.String value);

    /**
     * Gets the value of the acronym property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getAcronym();

    /**
     * Sets the value of the acronym property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setAcronym(java.lang.String value);

    /**
     * Gets the value of the inflectionBase property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getInflectionBase();

    /**
     * Sets the value of the inflectionBase property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setInflectionBase(java.lang.String value);

    /**
     * Gets the value of the AddOrReplaceOrRemove property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the AddOrReplaceOrRemove property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddOrReplaceOrRemove().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link lexicon.jaxb.AdjectiveLexiconType.Remove}
     * {@link lexicon.jaxb.AdjectiveLexiconType.Replace}
     * {@link lexicon.jaxb.AdjectiveLexiconType.Add}
     * 
     */
    java.util.List getAddOrReplaceOrRemove();

    /**
     * Gets the value of the inflectConstructP property.
     * 
     */
    boolean isInflectConstructP();

    /**
     * Sets the value of the inflectConstructP property.
     * 
     */
    void setInflectConstructP(boolean value);

    /**
     * Gets the value of the pattern property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getPattern();

    /**
     * Sets the value of the pattern property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setPattern(java.lang.String value);


    /**
     * מבנה זה משמש להוספת צורות נוספות.
     * בפרט -- כתיב שונה ואפשרויות נוספות לנטייה מסויימת.
     * בברירת מחדל, אם נוספת מילה אשר עקב תכונותיה מהווה בסיס לנטייה (למשל, צורת זכק יחיד בנפרד, או צורת הנסמך, או צורת הרבים), אזי יופקו גם נטיות נוספות. כדי לדכא אפשרות זאת יש להשתמש בתכונות inflectPossessive="false" ו-inflectConstruct="false".
     * 
     * Java content class for add element declaration.
     * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/home/syjacob/automaticCode/jwsdp-1.6/jaxb/lib/hebrew_MWlexicon.xsd line 419)
     * <p>
     * <pre>
     * &lt;element name="add" type="{}NounExceptionType"/>
     * </pre>
     * 
     */
    public interface Add
        extends javax.xml.bind.Element, lexicon.jaxb.NounExceptionType
    {


    }


    /**
     * מבנה זה משמש להסרת צורות שנוצרו באופן אוטומטי, ובכך לסמן למנתח צורני שעושה שימוש בלקסיקון, שלא לייצר (בעצם שימחוק את הצורות האלה, או שלא ייצרן כלל).
     * במקרים בהם הצורה שיש למחוק היא צורה אשר מהווה בסיס לנטיות, יש לציין אם על הצורה להמחק על הנטיות שלה או שמא, להמחק בעצמה, אך לאפשר את הנטיות.
     * באופן כללי, יש להעדיף שימוש רחב ב- add וב- replace תחת השימוש ב- remove, כדי לפשט את המימוש וכדי ליצור מנגנון אחיד להבנת הלקסיקון.
     * 
     * Java content class for remove element declaration.
     * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/home/syjacob/automaticCode/jwsdp-1.6/jaxb/lib/hebrew_MWlexicon.xsd line 437)
     * <p>
     * <pre>
     * &lt;element name="remove" type="{}NounExceptionType"/>
     * </pre>
     * 
     */
    public interface Remove
        extends javax.xml.bind.Element, lexicon.jaxb.NounExceptionType
    {


    }


    /**
     * מבנה זה משמש להחלפת צורות קיימות באחרות.
     * בפרט -- ריבוי יוצא דופן, סמיכות וכ'.
     * בברירת מחדל, אם מוחלפת מילה אשר עקב תכונותיה מהווה בסיס לנטייה (למשל, צורת זכק יחיד בנפרד, או צורת הנסמך, או צורת הרבים), אזי יופקו גם נטיות נוספות, אשר יחליפו את הנטיות הקיימות שהופקו. כדי לדכא אפשרות זאת יש להשתמש בתכונות inflectPossessive="false" ו-inflectConstruct="false".
     * 
     * Java content class for replace element declaration.
     * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/home/syjacob/automaticCode/jwsdp-1.6/jaxb/lib/hebrew_MWlexicon.xsd line 428)
     * <p>
     * <pre>
     * &lt;element name="replace" type="{}NounExceptionType"/>
     * </pre>
     * 
     */
    public interface Replace
        extends javax.xml.bind.Element, lexicon.jaxb.NounExceptionType
    {


    }

}
