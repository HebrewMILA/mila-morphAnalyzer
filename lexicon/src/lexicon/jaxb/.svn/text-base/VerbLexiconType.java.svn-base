//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.04.11 at 01:39:43 GMT+02:00 
//


package lexicon.jaxb;


/**
 * מבנה זה מתאר פעלים.
 * undotted, transliterated ו- dotted מייצגים במקרה זה את צורת עבר נסתר יחיד זכר.
 * 
 * אילוץ:
 * ======
 * root ימורכב בד"כ מ- 3 אותיות. ישנם שורשים בני 2 אותיות וגם כאלה בני 4 ו- 5. במקרים מיוחדים ניתן לאלץ מילים להכנס לתבנית שורש/משקל כשורש -- וראו על "יצירת שורשים חדשים" בספרו של עוזי אורנן "המילה האחרונה" פרק 6.
 * אילוץ:
 * ======
 * אם מופיעה תכונת שורש (root) אזי תופיע גם תכונת בניין (binyan). ז"א התכונות root ו- binyan חייבות להופיע יחד או לא להופיע כלל. העם לכך הוא בהנחה כי השילוב של שורש ובניין הוא בעל משמעות ומכיל את המידע הדרוש בשעה שאחד מהם בלבד מכיל מידע חסר ולא מספק. יתירה מזאת, ההנחה היא שאין השורש חשוב יותר מהבניין ואין הבניין חשוב יותר מהשורש. וראו דיון על כך בספרו של עוזי אורנן "המילה האחרונה" פרק 2 סעיף 2.3 ע"מ 28-32.
 * אילוץ:
 * =======
 * כל ערך מילוני מסוג פועל חייב להכיל inflectionPattern ו- ipSource, ואילו שאר תכונות הגזרה אינן בעלות משמעות לעת עתה במימוש.
 * הכוונה בגרסאות הבאות היא  להמיר את השימוש לציון גזרות תחת השימוש בתבניות נטייה.
 * מיפוי תבניות נטייה:
 * ===================
 * תבניות הנטייה הנתמכות מתאימות למימוש מסויים של מנתח מורפולוגי.
 * להלן מיפוי תבניות הנטייה לתבניות הנטייה המצויינות ב-"לוח הפעלים השלם" של הד"ר שאול ברקלי:
 * inflectionPattern1	Pa'al: 1,2,3,6,7,8,
 * inflectionPattern2	Pa'al: 4,13,15,16,17,26,27,29,
 * inflectionPattern3	Pa'al: 5,10,11,14,18,28,
 * inflectionPattern4	Pa'al: 9,
 * inflectionPattern5	Pa'al: 12,
 * inflectionPattern6	Pa'al: 19,20,
 * inflectionPattern7	Pa'al: 21,
 * inflectionPattern8	Pa'al: 22,
 * inflectionPattern9	Pa'al: 23,24,
 * inflectionPattern10	Pa'al: 25,30,
 * inflectionPattern11	Pa'al: 31,32,33,34,35,36,
 * inflectionPattern12	Pa'al: 37,
 * inflectionPattern13	Pa'al: 38,40,41,
 * inflectionPattern14	Pa'al: 39,
 * inflectionPattern15	Pa'al: 42,
 * inflectionPattern16	Pa'al: 43,45,
 * inflectionPattern17	Pa'al: 44,
 * inflectionPattern18	Pa'al: 46,
 * inflectionPattern19	Pa'al: 47,
 * inflectionPattern20	Pa'al: 48,
 * inflectionPattern21	Pa'al: 49,50,51,
 * inflectionPattern22	Pa'al: 52,
 * inflectionPattern23	Pi'el: 1,2,3,4,5,6,7,8,9,10,11,12,24,25,26,
 * inflectionPattern24	Pi'el: (all these entries are represented as inflectionPattern23 -- this should be fixed)
 * inflectionPattern25	Pi'el: 13,
 * inflectionPattern26	Pi'el: 14,
 * inflectionPattern27	Pi'el: 15,
 * inflectionPattern28	Pi'el: 16,
 * inflectionPattern29	Pi'el: 17,
 * inflectionPattern30	Pi'el: 18,
 * inflectionPattern31	Pi'el: 19,20,23,
 * inflectionPattern32	Pi'el: 21,
 * inflectionPattern33	Pi'el: 22,
 * inflectionPattern34	Pi'el: 27,
 * inflectionPattern35	Pi'el: 28,
 * inflectionPattern36	Pu'al: 1-21,23,25,26,
 * inflectionPattern37	Pu'al: 22,
 * inflectionPattern38	Pu'al: 24,
 * inflectionPattern39	Pu'al: 27,29,
 * inflectionPattern40	Pu'al: 28,
 * inflectionPattern41	Pu'al: 30,
 * inflectionPattern42	Hitpa'el: 1-8,10-23,26,27,33-43
 * inflectionPattern43	Hitpa'el: 9,
 * inflectionPattern44	Hitpa'el: 24,25,
 * inflectionPattern45	Hitpa'el: 28,29,32,
 * inflectionPattern46	Hitpa'el: 30,
 * inflectionPattern47	Hitpa'el: 31,
 * inflectionPattern48	Hif'il: 1-8,11,15-17,23-26,40,
 * inflectionPattern49	Hif'il: 9,10,
 * inflectionPattern50	Hif'il: 12-14,
 * inflectionPattern51	Hif'il: 18-22,
 * inflectionPattern52	Hif'il: 27-34,
 * inflectionPattern53	Hif'il: 35-39
 * inflectionPattern54	Huf'al: 1-12,14,15,19,20,28
 * inflectionPattern55	Huf'al: 13,
 * inflectionPattern56	Huf'al: 16-18,
 * inflectionPattern57	Huf'al: 21-27
 * inflectionPattern58	Nif'al: 1-14,17-19,
 * inflectionPattern59	Nif'al: 15,16,25,
 * inflectionPattern60	Nif'al: 20-24,
 * 
 * Java content class for VerbLexiconType complex type.
 * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/C:/hebrew_lexicon_new.xsd line 609)
 * <p>
 * <pre>
 * &lt;complexType name="VerbLexiconType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice maxOccurs="unbounded" minOccurs="0">
 *           &lt;element name="add" type="{}VerbExceptionType" maxOccurs="unbounded" minOccurs="0"/>
 *           &lt;element name="replace" type="{}VerbExceptionType" maxOccurs="unbounded" minOccurs="0"/>
 *           &lt;element name="remove" type="{}VerbExceptionType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *       &lt;attribute name="binyan" type="{}BinyanType" default="unspecified" />
 *       &lt;attribute name="feminine" type="{}FeminineType" default="irrelevant" />
 *       &lt;attribute name="inflectionPattern" use="required" type="{http://www.w3.org/2001/XMLSchema}token" />
 *       &lt;attribute name="ipSource" type="{http://www.w3.org/2001/XMLSchema}token" default="Shlomo's morphological analyzer" />
 *       &lt;attribute name="noBeinoni" type="{}TriStateType" default="unspecified" />
 *       &lt;attribute name="noFuture" type="{}TriStateType" default="unspecified" />
 *       &lt;attribute name="noImperative" type="{}TriStateType" default="unspecified" />
 *       &lt;attribute name="noInfinitive" type="{}TriStateType" default="unspecified" />
 *       &lt;attribute name="noOrigin" type="{}TriStateType" default="unspecified" />
 *       &lt;attribute name="noPast" type="{}TriStateType" default="unspecified" />
 *       &lt;attribute name="root" use="required" type="{http://www.w3.org/2001/XMLSchema}token" />
 *       &lt;attribute name="valence" type="{}ValenceType" default="unspecified" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 */
public interface VerbLexiconType {


    /**
     * Gets the value of the feminine property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getFeminine();

    /**
     * Sets the value of the feminine property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setFeminine(java.lang.String value);

    /**
     * Gets the value of the noImperative property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getNoImperative();

    /**
     * Sets the value of the noImperative property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setNoImperative(java.lang.String value);

    /**
     * Gets the value of the noBeinoni property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getNoBeinoni();

    /**
     * Sets the value of the noBeinoni property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setNoBeinoni(java.lang.String value);

    /**
     * Gets the value of the ipSource property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getIpSource();

    /**
     * Sets the value of the ipSource property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setIpSource(java.lang.String value);

    /**
     * Gets the value of the inflectionPattern property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getInflectionPattern();

    /**
     * Sets the value of the inflectionPattern property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setInflectionPattern(java.lang.String value);

    /**
     * Gets the value of the noFuture property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getNoFuture();

    /**
     * Sets the value of the noFuture property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setNoFuture(java.lang.String value);

    /**
     * Gets the value of the valence property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getValence();

    /**
     * Sets the value of the valence property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setValence(java.lang.String value);

    /**
     * Gets the value of the noPast property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getNoPast();

    /**
     * Sets the value of the noPast property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setNoPast(java.lang.String value);

    /**
     * Gets the value of the root property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getRoot();

    /**
     * Sets the value of the root property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setRoot(java.lang.String value);

    /**
     * Gets the value of the AddOrReplaceOrRemove property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the AddOrReplaceOrRemove property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddOrReplaceOrRemove().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link lexicon.jaxb.VerbLexiconType.Remove}
     * {@link lexicon.jaxb.VerbLexiconType.Replace}
     * {@link lexicon.jaxb.VerbLexiconType.Add}
     * 
     */
    java.util.List getAddOrReplaceOrRemove();

    /**
     * Gets the value of the noInfinitive property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getNoInfinitive();

    /**
     * Sets the value of the noInfinitive property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setNoInfinitive(java.lang.String value);

    /**
     * Gets the value of the binyan property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getBinyan();

    /**
     * Sets the value of the binyan property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setBinyan(java.lang.String value);

    /**
     * Gets the value of the noOrigin property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    java.lang.String getNoOrigin();

    /**
     * Sets the value of the noOrigin property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    void setNoOrigin(java.lang.String value);


    /**
     * מבנה זה משמש להוספת צורות נוספות.
     * בפרט -- כתיב שונה, נטיות יוצאות דופן וכיוצא באלה.
     * כברירת מחדל *לא* יופקו נטיות נוספות מהצורה יוצאת הדופן!
     * 
     * Java content class for add element declaration.
     * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/C:/hebrew_lexicon_new.xsd line 698)
     * <p>
     * <pre>
     * &lt;element name="add" type="{}VerbExceptionType"/>
     * </pre>
     * 
     */
    public interface Add
        extends javax.xml.bind.Element, lexicon.jaxb.VerbExceptionType
    {


    }


    /**
     * מבנה זה משמש להסרת צורות שנוצרו באופן אוטומטי, ובכך לסמן למנתח צורני שעושה שימוש בלקסיקון, שלא לייצר (בעצם שימחוק את הצורות האלה, או שלא ייצרן כלל).
     * כברירת מחדל *לא* יימחקו נטיות נוספות מהצורה יוצאת הדופן!
     * באופן כללי, יש להעדיף שימוש רחב ב- add וב- replace תחת השימוש ב- remove, כדי לפשט את המימוש וכדי ליצור מנגנון אחיד להבנת הלקסיקון.
     * 
     * Java content class for remove element declaration.
     * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/C:/hebrew_lexicon_new.xsd line 715)
     * <p>
     * <pre>
     * &lt;element name="remove" type="{}VerbExceptionType"/>
     * </pre>
     * 
     */
    public interface Remove
        extends javax.xml.bind.Element, lexicon.jaxb.VerbExceptionType
    {


    }


    /**
     * מבנה זה משמש להחלפת צורות קיימות באחרות.
     * כברירת מחדל *לא* יופקו נטיות נוספות מהצורה יוצאת הדופן!
     * 
     * Java content class for replace element declaration.
     * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/C:/hebrew_lexicon_new.xsd line 707)
     * <p>
     * <pre>
     * &lt;element name="replace" type="{}VerbExceptionType"/>
     * </pre>
     * 
     */
    public interface Replace
        extends javax.xml.bind.Element, lexicon.jaxb.VerbExceptionType
    {


    }

}
