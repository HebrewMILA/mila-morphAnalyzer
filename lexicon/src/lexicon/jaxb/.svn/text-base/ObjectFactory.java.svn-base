//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.04.11 at 01:39:43 GMT+02:00 
//


package lexicon.jaxb;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the lexicon.jaxb package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends lexicon.jaxb.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap(73, 0.75F);
    private static java.util.HashMap rootTagMap = new java.util.HashMap();
    public final static lexicon.jaxb.impl.runtime.GrammarInfo grammarInfo = new lexicon.jaxb.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations, (lexicon.jaxb.ObjectFactory.class));
    public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);

    static {
        defaultImplementations.put((lexicon.jaxb.TransliterationType.StringType.class), "lexicon.jaxb.impl.TransliterationTypeImpl.StringTypeImpl");
        defaultImplementations.put((lexicon.jaxb.NegationLexiconType.class), "lexicon.jaxb.impl.NegationLexiconTypeImpl");
        defaultImplementations.put((lexicon.jaxb.AdverbExceptionType.class), "lexicon.jaxb.impl.AdverbExceptionTypeImpl");
        defaultImplementations.put((lexicon.jaxb.PronounLexiconType.class), "lexicon.jaxb.impl.PronounLexiconTypeImpl");
        defaultImplementations.put((lexicon.jaxb.Lexicon.class), "lexicon.jaxb.impl.LexiconImpl");
        defaultImplementations.put((lexicon.jaxb.VerbLexiconType.Add.class), "lexicon.jaxb.impl.VerbLexiconTypeImpl.AddImpl");
        defaultImplementations.put((lexicon.jaxb.QuantifierExceptionType.class), "lexicon.jaxb.impl.QuantifierExceptionTypeImpl");
        defaultImplementations.put((lexicon.jaxb.NounExceptionType.class), "lexicon.jaxb.impl.NounExceptionTypeImpl");
        defaultImplementations.put((lexicon.jaxb.AdjectiveLexiconType.Remove.class), "lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.RemoveImpl");
        defaultImplementations.put((lexicon.jaxb.InterrogativeLexiconType.class), "lexicon.jaxb.impl.InterrogativeLexiconTypeImpl");
        defaultImplementations.put((lexicon.jaxb.ProperNameLexiconType.class), "lexicon.jaxb.impl.ProperNameLexiconTypeImpl");
        defaultImplementations.put((lexicon.jaxb.InterrogativeLexiconType.Replace.class), "lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.ReplaceImpl");
        defaultImplementations.put((lexicon.jaxb.InterjectionLexiconType.Remove.class), "lexicon.jaxb.impl.InterjectionLexiconTypeImpl.RemoveImpl");
        defaultImplementations.put((lexicon.jaxb.InterrogativeLexiconType.Add.class), "lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.AddImpl");
        defaultImplementations.put((lexicon.jaxb.NounLexiconType.class), "lexicon.jaxb.impl.NounLexiconTypeImpl");
        defaultImplementations.put((lexicon.jaxb.InterjectionExceptionType.class), "lexicon.jaxb.impl.InterjectionExceptionTypeImpl");
        defaultImplementations.put((lexicon.jaxb.InterrogativeExceptionType.class), "lexicon.jaxb.impl.InterrogativeExceptionTypeImpl");
        defaultImplementations.put((lexicon.jaxb.ExampleType.class), "lexicon.jaxb.impl.ExampleTypeImpl");
        defaultImplementations.put((lexicon.jaxb.NounLexiconType.Add.class), "lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl");
        defaultImplementations.put((lexicon.jaxb.AdverbLexiconType.class), "lexicon.jaxb.impl.AdverbLexiconTypeImpl");
        defaultImplementations.put((lexicon.jaxb.NounLexiconType.Replace.class), "lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl");
        defaultImplementations.put((lexicon.jaxb.EnglishType.class), "lexicon.jaxb.impl.EnglishTypeImpl");
        defaultImplementations.put((lexicon.jaxb.QuantifierLexiconType.Replace.class), "lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl");
        defaultImplementations.put((lexicon.jaxb.NounLexiconType.Remove.class), "lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl");
        defaultImplementations.put((lexicon.jaxb.PrepositionExceptionType.class), "lexicon.jaxb.impl.PrepositionExceptionTypeImpl");
        defaultImplementations.put((lexicon.jaxb.PrepositionLexiconType.Add.class), "lexicon.jaxb.impl.PrepositionLexiconTypeImpl.AddImpl");
        defaultImplementations.put((lexicon.jaxb.QuantifierLexiconType.Remove.class), "lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl");
        defaultImplementations.put((lexicon.jaxb.SenseType.class), "lexicon.jaxb.impl.SenseTypeImpl");
        defaultImplementations.put((lexicon.jaxb.InterrogativeLexiconType.Remove.class), "lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.RemoveImpl");
        defaultImplementations.put((lexicon.jaxb.QuantifierLexiconType.Add.class), "lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl");
        defaultImplementations.put((lexicon.jaxb.InterjectionLexiconType.Replace.class), "lexicon.jaxb.impl.InterjectionLexiconTypeImpl.ReplaceImpl");
        defaultImplementations.put((lexicon.jaxb.PrepositionLexiconType.Remove.class), "lexicon.jaxb.impl.PrepositionLexiconTypeImpl.RemoveImpl");
        defaultImplementations.put((lexicon.jaxb.AdjectiveLexiconType.class), "lexicon.jaxb.impl.AdjectiveLexiconTypeImpl");
        defaultImplementations.put((lexicon.jaxb.SynsetType.class), "lexicon.jaxb.impl.SynsetTypeImpl");
        defaultImplementations.put((lexicon.jaxb.LexiconType.class), "lexicon.jaxb.impl.LexiconTypeImpl");
        defaultImplementations.put((lexicon.jaxb.VerbLexiconType.class), "lexicon.jaxb.impl.VerbLexiconTypeImpl");
        defaultImplementations.put((lexicon.jaxb.ConjunctionLexiconType.class), "lexicon.jaxb.impl.ConjunctionLexiconTypeImpl");
        defaultImplementations.put((lexicon.jaxb.AdjectiveLexiconType.Replace.class), "lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.ReplaceImpl");
        defaultImplementations.put((lexicon.jaxb.TransliterationType.class), "lexicon.jaxb.impl.TransliterationTypeImpl");
        defaultImplementations.put((lexicon.jaxb.ItemType.class), "lexicon.jaxb.impl.ItemTypeImpl");
        defaultImplementations.put((lexicon.jaxb.AdverbLexiconType.Add.class), "lexicon.jaxb.impl.AdverbLexiconTypeImpl.AddImpl");
        defaultImplementations.put((lexicon.jaxb.VerbLexiconType.Replace.class), "lexicon.jaxb.impl.VerbLexiconTypeImpl.ReplaceImpl");
        defaultImplementations.put((lexicon.jaxb.AdverbLexiconType.Remove.class), "lexicon.jaxb.impl.AdverbLexiconTypeImpl.RemoveImpl");
        defaultImplementations.put((lexicon.jaxb.PrepositionLexiconType.class), "lexicon.jaxb.impl.PrepositionLexiconTypeImpl");
        defaultImplementations.put((lexicon.jaxb.AdverbLexiconType.Replace.class), "lexicon.jaxb.impl.AdverbLexiconTypeImpl.ReplaceImpl");
        defaultImplementations.put((lexicon.jaxb.MetadataType.class), "lexicon.jaxb.impl.MetadataTypeImpl");
        defaultImplementations.put((lexicon.jaxb.SourceType.class), "lexicon.jaxb.impl.SourceTypeImpl");
        defaultImplementations.put((lexicon.jaxb.VerbExceptionType.class), "lexicon.jaxb.impl.VerbExceptionTypeImpl");
        defaultImplementations.put((lexicon.jaxb.QuantifierLexiconType.class), "lexicon.jaxb.impl.QuantifierLexiconTypeImpl");
        defaultImplementations.put((lexicon.jaxb.InterjectionLexiconType.Add.class), "lexicon.jaxb.impl.InterjectionLexiconTypeImpl.AddImpl");
        defaultImplementations.put((lexicon.jaxb.PrepositionLexiconType.Replace.class), "lexicon.jaxb.impl.PrepositionLexiconTypeImpl.ReplaceImpl");
        defaultImplementations.put((lexicon.jaxb.AdjectiveLexiconType.Add.class), "lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.AddImpl");
        defaultImplementations.put((lexicon.jaxb.VerbLexiconType.Remove.class), "lexicon.jaxb.impl.VerbLexiconTypeImpl.RemoveImpl");
        defaultImplementations.put((lexicon.jaxb.InterjectionLexiconType.class), "lexicon.jaxb.impl.InterjectionLexiconTypeImpl");
        rootTagMap.put(new javax.xml.namespace.QName("", "lexicon"), (lexicon.jaxb.Lexicon.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: lexicon.jaxb
     * 
     */
    public ObjectFactory() {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface
     *     the Class object of the javacontent interface to instantiate
     * @return
     *     a new instance
     * @throws JAXBException
     *     if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @return
     *     the value of the requested property
     * @throws PropertyException
     *     when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param value
     *     the value of the property to be set
     * @param name
     *     the name of the property to retrieve
     * @throws PropertyException
     *     when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of TransliterationTypeStringType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.TransliterationType.StringType createTransliterationTypeStringType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.TransliterationTypeImpl.StringTypeImpl();
    }

    /**
     * Create an instance of NegationLexiconType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.NegationLexiconType createNegationLexiconType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.NegationLexiconTypeImpl();
    }

    /**
     * Create an instance of AdverbExceptionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.AdverbExceptionType createAdverbExceptionType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.AdverbExceptionTypeImpl();
    }

    /**
     * Create an instance of PronounLexiconType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.PronounLexiconType createPronounLexiconType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.PronounLexiconTypeImpl();
    }

    /**
     * Create an instance of Lexicon
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.Lexicon createLexicon()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.LexiconImpl();
    }

    /**
     * Create an instance of VerbLexiconTypeAdd
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.VerbLexiconType.Add createVerbLexiconTypeAdd()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.VerbLexiconTypeImpl.AddImpl();
    }

    /**
     * Create an instance of QuantifierExceptionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.QuantifierExceptionType createQuantifierExceptionType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.QuantifierExceptionTypeImpl();
    }

    /**
     * Create an instance of NounExceptionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.NounExceptionType createNounExceptionType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.NounExceptionTypeImpl();
    }

    /**
     * Create an instance of AdjectiveLexiconTypeRemove
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.AdjectiveLexiconType.Remove createAdjectiveLexiconTypeRemove()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.RemoveImpl();
    }

    /**
     * Create an instance of InterrogativeLexiconType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.InterrogativeLexiconType createInterrogativeLexiconType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.InterrogativeLexiconTypeImpl();
    }

    /**
     * Create an instance of ProperNameLexiconType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.ProperNameLexiconType createProperNameLexiconType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.ProperNameLexiconTypeImpl();
    }

    /**
     * Create an instance of InterrogativeLexiconTypeReplace
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.InterrogativeLexiconType.Replace createInterrogativeLexiconTypeReplace()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.ReplaceImpl();
    }

    /**
     * Create an instance of InterjectionLexiconTypeRemove
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.InterjectionLexiconType.Remove createInterjectionLexiconTypeRemove()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.InterjectionLexiconTypeImpl.RemoveImpl();
    }

    /**
     * Create an instance of InterrogativeLexiconTypeAdd
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.InterrogativeLexiconType.Add createInterrogativeLexiconTypeAdd()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.AddImpl();
    }

    /**
     * Create an instance of NounLexiconType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.NounLexiconType createNounLexiconType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.NounLexiconTypeImpl();
    }

    /**
     * Create an instance of InterjectionExceptionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.InterjectionExceptionType createInterjectionExceptionType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.InterjectionExceptionTypeImpl();
    }

    /**
     * Create an instance of InterrogativeExceptionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.InterrogativeExceptionType createInterrogativeExceptionType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.InterrogativeExceptionTypeImpl();
    }

    /**
     * Create an instance of ExampleType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.ExampleType createExampleType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.ExampleTypeImpl();
    }

    /**
     * Create an instance of NounLexiconTypeAdd
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.NounLexiconType.Add createNounLexiconTypeAdd()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.NounLexiconTypeImpl.AddImpl();
    }

    /**
     * Create an instance of AdverbLexiconType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.AdverbLexiconType createAdverbLexiconType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.AdverbLexiconTypeImpl();
    }

    /**
     * Create an instance of NounLexiconTypeReplace
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.NounLexiconType.Replace createNounLexiconTypeReplace()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.NounLexiconTypeImpl.ReplaceImpl();
    }

    /**
     * Create an instance of EnglishType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.EnglishType createEnglishType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.EnglishTypeImpl();
    }

    /**
     * Create an instance of QuantifierLexiconTypeReplace
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.QuantifierLexiconType.Replace createQuantifierLexiconTypeReplace()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.QuantifierLexiconTypeImpl.ReplaceImpl();
    }

    /**
     * Create an instance of NounLexiconTypeRemove
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.NounLexiconType.Remove createNounLexiconTypeRemove()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.NounLexiconTypeImpl.RemoveImpl();
    }

    /**
     * Create an instance of PrepositionExceptionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.PrepositionExceptionType createPrepositionExceptionType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.PrepositionExceptionTypeImpl();
    }

    /**
     * Create an instance of PrepositionLexiconTypeAdd
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.PrepositionLexiconType.Add createPrepositionLexiconTypeAdd()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.PrepositionLexiconTypeImpl.AddImpl();
    }

    /**
     * Create an instance of QuantifierLexiconTypeRemove
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.QuantifierLexiconType.Remove createQuantifierLexiconTypeRemove()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.QuantifierLexiconTypeImpl.RemoveImpl();
    }

    /**
     * Create an instance of SenseType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.SenseType createSenseType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.SenseTypeImpl();
    }

    /**
     * Create an instance of InterrogativeLexiconTypeRemove
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.InterrogativeLexiconType.Remove createInterrogativeLexiconTypeRemove()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.RemoveImpl();
    }

    /**
     * Create an instance of QuantifierLexiconTypeAdd
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.QuantifierLexiconType.Add createQuantifierLexiconTypeAdd()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.QuantifierLexiconTypeImpl.AddImpl();
    }

    /**
     * Create an instance of InterjectionLexiconTypeReplace
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.InterjectionLexiconType.Replace createInterjectionLexiconTypeReplace()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.InterjectionLexiconTypeImpl.ReplaceImpl();
    }

    /**
     * Create an instance of PrepositionLexiconTypeRemove
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.PrepositionLexiconType.Remove createPrepositionLexiconTypeRemove()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.PrepositionLexiconTypeImpl.RemoveImpl();
    }

    /**
     * Create an instance of AdjectiveLexiconType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.AdjectiveLexiconType createAdjectiveLexiconType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.AdjectiveLexiconTypeImpl();
    }

    /**
     * Create an instance of SynsetType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.SynsetType createSynsetType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.SynsetTypeImpl();
    }

    /**
     * Create an instance of LexiconType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.LexiconType createLexiconType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.LexiconTypeImpl();
    }

    /**
     * Create an instance of VerbLexiconType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.VerbLexiconType createVerbLexiconType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.VerbLexiconTypeImpl();
    }

    /**
     * Create an instance of ConjunctionLexiconType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.ConjunctionLexiconType createConjunctionLexiconType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.ConjunctionLexiconTypeImpl();
    }

    /**
     * Create an instance of AdjectiveLexiconTypeReplace
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.AdjectiveLexiconType.Replace createAdjectiveLexiconTypeReplace()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.ReplaceImpl();
    }

    /**
     * Create an instance of TransliterationType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.TransliterationType createTransliterationType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.TransliterationTypeImpl();
    }

    /**
     * Create an instance of ItemType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.ItemType createItemType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.ItemTypeImpl();
    }

    /**
     * Create an instance of AdverbLexiconTypeAdd
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.AdverbLexiconType.Add createAdverbLexiconTypeAdd()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.AdverbLexiconTypeImpl.AddImpl();
    }

    /**
     * Create an instance of VerbLexiconTypeReplace
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.VerbLexiconType.Replace createVerbLexiconTypeReplace()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.VerbLexiconTypeImpl.ReplaceImpl();
    }

    /**
     * Create an instance of AdverbLexiconTypeRemove
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.AdverbLexiconType.Remove createAdverbLexiconTypeRemove()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.AdverbLexiconTypeImpl.RemoveImpl();
    }

    /**
     * Create an instance of PrepositionLexiconType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.PrepositionLexiconType createPrepositionLexiconType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.PrepositionLexiconTypeImpl();
    }

    /**
     * Create an instance of AdverbLexiconTypeReplace
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.AdverbLexiconType.Replace createAdverbLexiconTypeReplace()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.AdverbLexiconTypeImpl.ReplaceImpl();
    }

    /**
     * Create an instance of MetadataType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.MetadataType createMetadataType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.MetadataTypeImpl();
    }

    /**
     * Create an instance of SourceType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.SourceType createSourceType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.SourceTypeImpl();
    }

    /**
     * Create an instance of VerbExceptionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.VerbExceptionType createVerbExceptionType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.VerbExceptionTypeImpl();
    }

    /**
     * Create an instance of QuantifierLexiconType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.QuantifierLexiconType createQuantifierLexiconType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.QuantifierLexiconTypeImpl();
    }

    /**
     * Create an instance of InterjectionLexiconTypeAdd
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.InterjectionLexiconType.Add createInterjectionLexiconTypeAdd()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.InterjectionLexiconTypeImpl.AddImpl();
    }

    /**
     * Create an instance of PrepositionLexiconTypeReplace
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.PrepositionLexiconType.Replace createPrepositionLexiconTypeReplace()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.PrepositionLexiconTypeImpl.ReplaceImpl();
    }

    /**
     * Create an instance of AdjectiveLexiconTypeAdd
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.AdjectiveLexiconType.Add createAdjectiveLexiconTypeAdd()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.AddImpl();
    }

    /**
     * Create an instance of VerbLexiconTypeRemove
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.VerbLexiconType.Remove createVerbLexiconTypeRemove()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.VerbLexiconTypeImpl.RemoveImpl();
    }

    /**
     * Create an instance of InterjectionLexiconType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public lexicon.jaxb.InterjectionLexiconType createInterjectionLexiconType()
        throws javax.xml.bind.JAXBException
    {
        return new lexicon.jaxb.impl.InterjectionLexiconTypeImpl();
    }

}
