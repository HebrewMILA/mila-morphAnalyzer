//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.12.23 at 10:34:08 AM IST 
//

package lexicon.jaxb.impl;

public class PrepositionLexiconTypeImpl implements
		lexicon.jaxb.PrepositionLexiconType, com.sun.xml.bind.JAXBObject,
		lexicon.jaxb.impl.runtime.UnmarshallableObject,
		lexicon.jaxb.impl.runtime.XMLSerializable,
		lexicon.jaxb.impl.runtime.ValidatableObject {

	protected java.lang.String _Case;
	protected java.lang.String _InflectionBase;
	protected com.sun.xml.bind.util.ListImpl _AddOrReplaceOrRemove;
	public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (lexicon.jaxb.PrepositionLexiconType.class);
	}

	public java.lang.String getCase() {
		if (_Case == null) {
			return "unspecified";
		} else {
			return _Case;
		}
	}

	public void setCase(java.lang.String value) {
		_Case = value;
	}

	public java.lang.String getInflectionBase() {
		if (_InflectionBase == null) {
			return "";
		} else {
			return _InflectionBase;
		}
	}

	public void setInflectionBase(java.lang.String value) {
		_InflectionBase = value;
	}

	protected com.sun.xml.bind.util.ListImpl _getAddOrReplaceOrRemove() {
		if (_AddOrReplaceOrRemove == null) {
			_AddOrReplaceOrRemove = new com.sun.xml.bind.util.ListImpl(
					new java.util.ArrayList());
		}
		return _AddOrReplaceOrRemove;
	}

	public java.util.List getAddOrReplaceOrRemove() {
		return _getAddOrReplaceOrRemove();
	}

	public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
		return new lexicon.jaxb.impl.PrepositionLexiconTypeImpl.Unmarshaller(
				context);
	}

	public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx3 = 0;
		final int len3 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		while (idx3 != len3) {
			while (idx3 != len3) {
				context.childAsBody(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx3++)), "AddOrReplaceOrRemove");
			}
		}
	}

	public void serializeAttributes(
			lexicon.jaxb.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx3 = 0;
		final int len3 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		if (_Case != null) {
			context.startAttribute("", "case");
			try {
				context.text(((java.lang.String) _Case), "Case");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_InflectionBase != null) {
			context.startAttribute("", "inflectionBase");
			try {
				context.text(((java.lang.String) _InflectionBase),
						"InflectionBase");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		while (idx3 != len3) {
			while (idx3 != len3) {
				context.childAsAttributes(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx3++)), "AddOrReplaceOrRemove");
			}
		}
	}

	public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx3 = 0;
		final int len3 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		while (idx3 != len3) {
			while (idx3 != len3) {
				context.childAsURIs(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx3++)), "AddOrReplaceOrRemove");
			}
		}
	}

	public java.lang.Class getPrimaryInterface() {
		return (lexicon.jaxb.PrepositionLexiconType.class);
	}

	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
							+ "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsr\u0000 com.sun.msv.grammar.OneOrMor"
							+ "eExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
							+ "\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
							+ "\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\nppsq\u0000~\u0000\nppsq\u0000~\u0000\u0007sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee"
							+ "\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000"
							+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ec"
							+ "om.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredA"
							+ "ttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\nppsq\u0000~\u0000\u0007q\u0000~\u0000"
							+ "\u0010psr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002"
							+ "L\u0000\tnameClassq\u0000~\u0000\u0012xq\u0000~\u0000\u0003q\u0000~\u0000\u0010psr\u00002com.sun.msv.grammar.Express"
							+ "ion$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u000f\u0001q\u0000~\u0000\u001asr\u0000 com."
							+ "sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.gramm"
							+ "ar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$"
							+ "EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001bq\u0000~\u0000 sr\u0000#com.sun.msv."
							+ "grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/"
							+ "String;L\u0000\fnamespaceURIq\u0000~\u0000\"xq\u0000~\u0000\u001dt\u0000\'lexicon.jaxb.Preposition"
							+ "LexiconType.Addt\u0000+http://java.sun.com/jaxb/xjc/dummy-element"
							+ "sq\u0000~\u0000 sq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0011pp\u0000sq\u0000~\u0000\nppsq\u0000~\u0000\u0007q\u0000~\u0000\u0010psq\u0000~\u0000\u0017q\u0000~\u0000\u0010pq\u0000~\u0000\u001a"
							+ "q\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000+lexicon.jaxb.PrepositionLexiconType.Repla"
							+ "ceq\u0000~\u0000%sq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0011pp\u0000sq\u0000~\u0000\nppsq\u0000~\u0000\u0007q\u0000~\u0000\u0010psq\u0000~\u0000\u0017q\u0000~\u0000\u0010pq\u0000~\u0000"
							+ "\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000*lexicon.jaxb.PrepositionLexiconType.Remo"
							+ "veq\u0000~\u0000%sq\u0000~\u0000\nppsq\u0000~\u0000\u0017q\u0000~\u0000\u0010psr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000"
							+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~"
							+ "\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000)com.sun"
							+ ".msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLja"
							+ "va/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataTypeWithValueCo"
							+ "nstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTyp"
							+ "eWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\b"
							+ "baseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcr"
							+ "eteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNam"
							+ "eq\u0000~\u0000\"xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003"
							+ "L\u0000\fnamespaceUriq\u0000~\u0000\"L\u0000\btypeNameq\u0000~\u0000\"L\u0000\nwhiteSpacet\u0000.Lcom/sun"
							+ "/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000\u0000t\u0000\bCaseTypesr\u00005co"
							+ "m.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
							+ "\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
							+ "\u0000xp\u0000\u0000sr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#co"
							+ "m.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValid"
							+ "xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000"
							+ "%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000@t\u0000 ht"
							+ "tp://www.w3.org/2001/XMLSchemat\u0000\u0005tokenq\u0000~\u0000G\u0001q\u0000~\u0000Lt\u0000\u000benumerat"
							+ "ionsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspec"
							+ "ifiedt\u0000\naccusativet\u0000\npossessivexsr\u00000com.sun.msv.grammar.Expr"
							+ "ession$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.u"
							+ "til.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\"L\u0000\fnamespaceURIq\u0000~"
							+ "\u0000\"xpq\u0000~\u0000Dq\u0000~\u0000Csq\u0000~\u0000!t\u0000\u0004caseq\u0000~\u0000Cq\u0000~\u0000 sq\u0000~\u0000\nppsq\u0000~\u0000\u0017q\u0000~\u0000\u0010psq\u0000"
							+ "~\u00006ppq\u0000~\u0000Lq\u0000~\u0000Vsq\u0000~\u0000Wq\u0000~\u0000Nq\u0000~\u0000Msq\u0000~\u0000!t\u0000\u000einflectionBaseq\u0000~\u0000Cq"
							+ "\u0000~\u0000 sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpT"
							+ "ablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-"
							+ "com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005c"
							+ "ountB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Express"
							+ "ionPool;xp\u0000\u0000\u0000\u0011\u0001pq\u0000~\u0000[q\u0000~\u0000\rq\u0000~\u00004q\u0000~\u0000\fq\u0000~\u0000\u0005q\u0000~\u0000\u0015q\u0000~\u0000(q\u0000~\u0000/q\u0000~\u0000"
							+ "\tq\u0000~\u0000\u000eq\u0000~\u0000&q\u0000~\u0000-q\u0000~\u0000\u000bq\u0000~\u0000\u0016q\u0000~\u0000)q\u0000~\u00000q\u0000~\u0000\u0006x"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	public static class AddImpl extends
			lexicon.jaxb.impl.PrepositionExceptionTypeImpl implements
			lexicon.jaxb.PrepositionLexiconType.Add,
			com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject,
			lexicon.jaxb.impl.runtime.UnmarshallableObject,
			lexicon.jaxb.impl.runtime.XMLSerializable,
			lexicon.jaxb.impl.runtime.ValidatableObject {

		public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (lexicon.jaxb.PrepositionLexiconType.Add.class);
		}

		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		public java.lang.String ____jaxb_ri____getLocalName() {
			return "add";
		}

		public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
			return new lexicon.jaxb.impl.PrepositionLexiconTypeImpl.AddImpl.Unmarshaller(
					context);
		}

		public void serializeBody(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "add");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		public void serializeAttributes(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		public void serializeURIs(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		public java.lang.Class getPrimaryInterface() {
			return (lexicon.jaxb.PrepositionLexiconType.Add.class);
		}

		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataE"
								+ "xp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006excep"
								+ "tq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com"
								+ ".sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.da"
								+ "tatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun."
								+ "msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv"
								+ ".datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatyp"
								+ "e.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/"
								+ "String;L\u0000\btypeNameq\u0000~\u0000\u0019L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype"
								+ "/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSche"
								+ "mat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$C"
								+ "ollapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpacePro"
								+ "cessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullS"
								+ "etExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPa"
								+ "ir\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0019L\u0000\fnamespaceURIq\u0000~\u0000\u0019xpq\u0000~\u0000\u001dq\u0000~"
								+ "\u0000\u001csr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 co"
								+ "m.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameC"
								+ "lassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000pq"
								+ "\u0000~\u0000\u0013sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tloc"
								+ "alNameq\u0000~\u0000\u0019L\u0000\fnamespaceURIq\u0000~\u0000\u0019xr\u0000\u001dcom.sun.msv.grammar.NameC"
								+ "lass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0006dottedt\u0000\u0000sr\u00000com.sun.msv.grammar.Express"
								+ "ion$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000)\u0001q\u0000~\u00001sq\u0000~\u0000%ppsq"
								+ "\u0000~\u0000\'q\u0000~\u0000*psq\u0000~\u0000\u0010ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFa"
								+ "cet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.dat"
								+ "atype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com"
								+ ".sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacet"
								+ "FixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatyp"
								+ "e/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype"
								+ "/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u0019xq\u0000~\u0000\u0018q\u0000~\u0000/t\u0000\u0007PGNTypeq\u0000~\u0000"
								+ " \u0000\u0000q\u0000~\u0000\u001bq\u0000~\u0000\u001bt\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000x"
								+ "pw\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000"
								+ "\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/"
								+ "Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000"
								+ "\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000=q\u0000"
								+ "~\u0000/sq\u0000~\u0000+t\u0000\u0012personGenderNumberq\u0000~\u0000/q\u0000~\u00001sq\u0000~\u0000%ppsq\u0000~\u0000\'q\u0000~\u0000*p"
								+ "sq\u0000~\u0000\u0010ppsq\u0000~\u00006q\u0000~\u0000/t\u0000\fRegisterTypeq\u0000~\u0000 \u0000\u0000q\u0000~\u0000\u001bq\u0000~\u0000\u001bq\u0000~\u0000>sq\u0000~"
								+ "\u0000?w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000"
								+ "[q\u0000~\u0000/sq\u0000~\u0000+t\u0000\bregisterq\u0000~\u0000/q\u0000~\u00001sq\u0000~\u0000%ppsq\u0000~\u0000\'q\u0000~\u0000*psq\u0000~\u0000\u0010p"
								+ "psq\u0000~\u00006q\u0000~\u0000/t\u0000\fSpellingTypeq\u0000~\u0000 \u0000\u0000q\u0000~\u0000\u001bq\u0000~\u0000\u001bq\u0000~\u0000>sq\u0000~\u0000?w\f\u0000\u0000\u0000"
								+ "\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\tirregulart\u0000\bstandardxq\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000gq\u0000~\u0000/sq\u0000~\u0000+"
								+ "t\u0000\bspellingq\u0000~\u0000/q\u0000~\u00001sq\u0000~\u0000\'ppq\u0000~\u0000\u0013sq\u0000~\u0000+t\u0000\u000etransliteratedq\u0000~"
								+ "\u0000/sq\u0000~\u0000\'ppq\u0000~\u0000\u0013sq\u0000~\u0000+t\u0000\bundottedq\u0000~\u0000/sq\u0000~\u0000%ppsq\u0000~\u0000\'q\u0000~\u0000*psq\u0000"
								+ "~\u0000\u0010ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0016"
								+ "q\u0000~\u0000\u001ct\u0000\u0005QNameq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000yq\u0000~\u0000\u001csq\u0000~\u0000+t\u0000\u0004typet\u0000)http:"
								+ "//www.w3.org/2001/XMLSchema-instanceq\u0000~\u00001sq\u0000~\u0000+t\u0000\u0003addq\u0000~\u0000/sr"
								+ "\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000"
								+ "/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.su"
								+ "n.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000"
								+ "\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPoo"
								+ "l;xp\u0000\u0000\u0000\f\u0001pq\u0000~\u0000tq\u0000~\u0000\tq\u0000~\u0000\u000fq\u0000~\u0000Wq\u0000~\u0000\u000eq\u0000~\u0000\u000bq\u0000~\u0000\nq\u0000~\u0000cq\u0000~\u0000\rq\u0000~\u00003"
								+ "q\u0000~\u0000\fq\u0000~\u0000&x"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		public class Unmarshaller extends
				lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					lexicon.jaxb.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			public java.lang.Object owner() {
				return lexicon.jaxb.impl.PrepositionLexiconTypeImpl.AddImpl.this;
			}

			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "personGenderNumber");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					case 0:
						if (("add" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "personGenderNumber");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 2:
						if (("add" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("personGenderNumber" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("register" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("spelling" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "personGenderNumber");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 3:
							revertToParentFromText(value);
							return;
						case 1:
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"personGenderNumber");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "register");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "spelling");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

		}

	}

	public static class RemoveImpl extends
			lexicon.jaxb.impl.PrepositionExceptionTypeImpl implements
			lexicon.jaxb.PrepositionLexiconType.Remove,
			com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject,
			lexicon.jaxb.impl.runtime.UnmarshallableObject,
			lexicon.jaxb.impl.runtime.XMLSerializable,
			lexicon.jaxb.impl.runtime.ValidatableObject {

		public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (lexicon.jaxb.PrepositionLexiconType.Remove.class);
		}

		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		public java.lang.String ____jaxb_ri____getLocalName() {
			return "remove";
		}

		public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
			return new lexicon.jaxb.impl.PrepositionLexiconTypeImpl.RemoveImpl.Unmarshaller(
					context);
		}

		public void serializeBody(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "remove");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		public void serializeAttributes(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		public void serializeURIs(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		public java.lang.Class getPrimaryInterface() {
			return (lexicon.jaxb.PrepositionLexiconType.Remove.class);
		}

		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataE"
								+ "xp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006excep"
								+ "tq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com"
								+ ".sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.da"
								+ "tatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun."
								+ "msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv"
								+ ".datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatyp"
								+ "e.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/"
								+ "String;L\u0000\btypeNameq\u0000~\u0000\u0019L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype"
								+ "/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSche"
								+ "mat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$C"
								+ "ollapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpacePro"
								+ "cessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullS"
								+ "etExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPa"
								+ "ir\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0019L\u0000\fnamespaceURIq\u0000~\u0000\u0019xpq\u0000~\u0000\u001dq\u0000~"
								+ "\u0000\u001csr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 co"
								+ "m.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameC"
								+ "lassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000pq"
								+ "\u0000~\u0000\u0013sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tloc"
								+ "alNameq\u0000~\u0000\u0019L\u0000\fnamespaceURIq\u0000~\u0000\u0019xr\u0000\u001dcom.sun.msv.grammar.NameC"
								+ "lass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0006dottedt\u0000\u0000sr\u00000com.sun.msv.grammar.Express"
								+ "ion$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000)\u0001q\u0000~\u00001sq\u0000~\u0000%ppsq"
								+ "\u0000~\u0000\'q\u0000~\u0000*psq\u0000~\u0000\u0010ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFa"
								+ "cet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.dat"
								+ "atype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com"
								+ ".sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacet"
								+ "FixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatyp"
								+ "e/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype"
								+ "/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u0019xq\u0000~\u0000\u0018q\u0000~\u0000/t\u0000\u0007PGNTypeq\u0000~\u0000"
								+ " \u0000\u0000q\u0000~\u0000\u001bq\u0000~\u0000\u001bt\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000x"
								+ "pw\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000"
								+ "\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/"
								+ "Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000"
								+ "\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000=q\u0000"
								+ "~\u0000/sq\u0000~\u0000+t\u0000\u0012personGenderNumberq\u0000~\u0000/q\u0000~\u00001sq\u0000~\u0000%ppsq\u0000~\u0000\'q\u0000~\u0000*p"
								+ "sq\u0000~\u0000\u0010ppsq\u0000~\u00006q\u0000~\u0000/t\u0000\fRegisterTypeq\u0000~\u0000 \u0000\u0000q\u0000~\u0000\u001bq\u0000~\u0000\u001bq\u0000~\u0000>sq\u0000~"
								+ "\u0000?w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000"
								+ "[q\u0000~\u0000/sq\u0000~\u0000+t\u0000\bregisterq\u0000~\u0000/q\u0000~\u00001sq\u0000~\u0000%ppsq\u0000~\u0000\'q\u0000~\u0000*psq\u0000~\u0000\u0010p"
								+ "psq\u0000~\u00006q\u0000~\u0000/t\u0000\fSpellingTypeq\u0000~\u0000 \u0000\u0000q\u0000~\u0000\u001bq\u0000~\u0000\u001bq\u0000~\u0000>sq\u0000~\u0000?w\f\u0000\u0000\u0000"
								+ "\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\tirregulart\u0000\bstandardxq\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000gq\u0000~\u0000/sq\u0000~\u0000+"
								+ "t\u0000\bspellingq\u0000~\u0000/q\u0000~\u00001sq\u0000~\u0000\'ppq\u0000~\u0000\u0013sq\u0000~\u0000+t\u0000\u000etransliteratedq\u0000~"
								+ "\u0000/sq\u0000~\u0000\'ppq\u0000~\u0000\u0013sq\u0000~\u0000+t\u0000\bundottedq\u0000~\u0000/sq\u0000~\u0000%ppsq\u0000~\u0000\'q\u0000~\u0000*psq\u0000"
								+ "~\u0000\u0010ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0016"
								+ "q\u0000~\u0000\u001ct\u0000\u0005QNameq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000yq\u0000~\u0000\u001csq\u0000~\u0000+t\u0000\u0004typet\u0000)http:"
								+ "//www.w3.org/2001/XMLSchema-instanceq\u0000~\u00001sq\u0000~\u0000+t\u0000\u0006removeq\u0000~\u0000"
								+ "/sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTabl"
								+ "et\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com"
								+ ".sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005coun"
								+ "tB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expression"
								+ "Pool;xp\u0000\u0000\u0000\f\u0001pq\u0000~\u0000tq\u0000~\u0000\tq\u0000~\u0000\u000fq\u0000~\u0000Wq\u0000~\u0000\u000eq\u0000~\u0000\u000bq\u0000~\u0000\nq\u0000~\u0000cq\u0000~\u0000\rq\u0000"
								+ "~\u00003q\u0000~\u0000\fq\u0000~\u0000&x"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		public class Unmarshaller extends
				lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					lexicon.jaxb.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			public java.lang.Object owner() {
				return lexicon.jaxb.impl.PrepositionLexiconTypeImpl.RemoveImpl.this;
			}

			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 0:
						if (("remove" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "personGenderNumber");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "personGenderNumber");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 2:
						if (("remove" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("personGenderNumber" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("register" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("spelling" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "personGenderNumber");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 3:
							revertToParentFromText(value);
							return;
						case 1:
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"personGenderNumber");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "register");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "spelling");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

		}

	}

	public static class ReplaceImpl extends
			lexicon.jaxb.impl.PrepositionExceptionTypeImpl implements
			lexicon.jaxb.PrepositionLexiconType.Replace,
			com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject,
			lexicon.jaxb.impl.runtime.UnmarshallableObject,
			lexicon.jaxb.impl.runtime.XMLSerializable,
			lexicon.jaxb.impl.runtime.ValidatableObject {

		public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (lexicon.jaxb.PrepositionLexiconType.Replace.class);
		}

		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		public java.lang.String ____jaxb_ri____getLocalName() {
			return "replace";
		}

		public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
			return new lexicon.jaxb.impl.PrepositionLexiconTypeImpl.ReplaceImpl.Unmarshaller(
					context);
		}

		public void serializeBody(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "replace");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		public void serializeAttributes(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		public void serializeURIs(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		public java.lang.Class getPrimaryInterface() {
			return (lexicon.jaxb.PrepositionLexiconType.Replace.class);
		}

		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataE"
								+ "xp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006excep"
								+ "tq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com"
								+ ".sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.da"
								+ "tatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun."
								+ "msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv"
								+ ".datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatyp"
								+ "e.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/"
								+ "String;L\u0000\btypeNameq\u0000~\u0000\u0019L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype"
								+ "/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSche"
								+ "mat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$C"
								+ "ollapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpacePro"
								+ "cessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullS"
								+ "etExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPa"
								+ "ir\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0019L\u0000\fnamespaceURIq\u0000~\u0000\u0019xpq\u0000~\u0000\u001dq\u0000~"
								+ "\u0000\u001csr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 co"
								+ "m.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameC"
								+ "lassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000pq"
								+ "\u0000~\u0000\u0013sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tloc"
								+ "alNameq\u0000~\u0000\u0019L\u0000\fnamespaceURIq\u0000~\u0000\u0019xr\u0000\u001dcom.sun.msv.grammar.NameC"
								+ "lass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0006dottedt\u0000\u0000sr\u00000com.sun.msv.grammar.Express"
								+ "ion$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000)\u0001q\u0000~\u00001sq\u0000~\u0000%ppsq"
								+ "\u0000~\u0000\'q\u0000~\u0000*psq\u0000~\u0000\u0010ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFa"
								+ "cet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.dat"
								+ "atype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com"
								+ ".sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacet"
								+ "FixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatyp"
								+ "e/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype"
								+ "/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u0019xq\u0000~\u0000\u0018q\u0000~\u0000/t\u0000\u0007PGNTypeq\u0000~\u0000"
								+ " \u0000\u0000q\u0000~\u0000\u001bq\u0000~\u0000\u001bt\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000x"
								+ "pw\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000"
								+ "\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/"
								+ "Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000"
								+ "\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000=q\u0000"
								+ "~\u0000/sq\u0000~\u0000+t\u0000\u0012personGenderNumberq\u0000~\u0000/q\u0000~\u00001sq\u0000~\u0000%ppsq\u0000~\u0000\'q\u0000~\u0000*p"
								+ "sq\u0000~\u0000\u0010ppsq\u0000~\u00006q\u0000~\u0000/t\u0000\fRegisterTypeq\u0000~\u0000 \u0000\u0000q\u0000~\u0000\u001bq\u0000~\u0000\u001bq\u0000~\u0000>sq\u0000~"
								+ "\u0000?w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000"
								+ "[q\u0000~\u0000/sq\u0000~\u0000+t\u0000\bregisterq\u0000~\u0000/q\u0000~\u00001sq\u0000~\u0000%ppsq\u0000~\u0000\'q\u0000~\u0000*psq\u0000~\u0000\u0010p"
								+ "psq\u0000~\u00006q\u0000~\u0000/t\u0000\fSpellingTypeq\u0000~\u0000 \u0000\u0000q\u0000~\u0000\u001bq\u0000~\u0000\u001bq\u0000~\u0000>sq\u0000~\u0000?w\f\u0000\u0000\u0000"
								+ "\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\tirregulart\u0000\bstandardxq\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000gq\u0000~\u0000/sq\u0000~\u0000+"
								+ "t\u0000\bspellingq\u0000~\u0000/q\u0000~\u00001sq\u0000~\u0000\'ppq\u0000~\u0000\u0013sq\u0000~\u0000+t\u0000\u000etransliteratedq\u0000~"
								+ "\u0000/sq\u0000~\u0000\'ppq\u0000~\u0000\u0013sq\u0000~\u0000+t\u0000\bundottedq\u0000~\u0000/sq\u0000~\u0000%ppsq\u0000~\u0000\'q\u0000~\u0000*psq\u0000"
								+ "~\u0000\u0010ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0016"
								+ "q\u0000~\u0000\u001ct\u0000\u0005QNameq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000yq\u0000~\u0000\u001csq\u0000~\u0000+t\u0000\u0004typet\u0000)http:"
								+ "//www.w3.org/2001/XMLSchema-instanceq\u0000~\u00001sq\u0000~\u0000+t\u0000\u0007replaceq\u0000~"
								+ "\u0000/sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTab"
								+ "let\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-co"
								+ "m.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005cou"
								+ "ntB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expressio"
								+ "nPool;xp\u0000\u0000\u0000\f\u0001pq\u0000~\u0000tq\u0000~\u0000\tq\u0000~\u0000\u000fq\u0000~\u0000Wq\u0000~\u0000\u000eq\u0000~\u0000\u000bq\u0000~\u0000\nq\u0000~\u0000cq\u0000~\u0000\rq"
								+ "\u0000~\u00003q\u0000~\u0000\fq\u0000~\u0000&x"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		public class Unmarshaller extends
				lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					lexicon.jaxb.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			public java.lang.Object owner() {
				return lexicon.jaxb.impl.PrepositionLexiconTypeImpl.ReplaceImpl.this;
			}

			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 0:
						if (("replace" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "personGenderNumber");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 2:
						if (("replace" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "personGenderNumber");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("personGenderNumber" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("register" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("spelling" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.PrepositionExceptionTypeImpl) lexicon.jaxb.impl.PrepositionLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "personGenderNumber");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 1:
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"personGenderNumber");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "register");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "spelling");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						case 3:
							revertToParentFromText(value);
							return;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

		}

	}

	public class Unmarshaller extends
			lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(
				lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
			super(context, "--------");
		}

		protected Unmarshaller(
				lexicon.jaxb.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		public java.lang.Object owner() {
			return lexicon.jaxb.impl.PrepositionLexiconTypeImpl.this;
		}

		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					attIdx = context.getAttribute("", "case");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText1(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "inflectionBase");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText2(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 7:
					if (("add" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.AddImpl) spawnChildFromEnterElement(
										(lexicon.jaxb.impl.PrepositionLexiconTypeImpl.AddImpl.class),
										7, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("replace" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.ReplaceImpl) spawnChildFromEnterElement(
										(lexicon.jaxb.impl.PrepositionLexiconTypeImpl.ReplaceImpl.class),
										7, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("remove" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.RemoveImpl) spawnChildFromEnterElement(
										(lexicon.jaxb.impl.PrepositionLexiconTypeImpl.RemoveImpl.class),
										7, ___uri, ___local, ___qname, __atts)));
						return;
					}
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 6:
					if (("add" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.AddImpl) spawnChildFromEnterElement(
										(lexicon.jaxb.impl.PrepositionLexiconTypeImpl.AddImpl.class),
										7, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("replace" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.ReplaceImpl) spawnChildFromEnterElement(
										(lexicon.jaxb.impl.PrepositionLexiconTypeImpl.ReplaceImpl.class),
										7, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("remove" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.RemoveImpl) spawnChildFromEnterElement(
										(lexicon.jaxb.impl.PrepositionLexiconTypeImpl.RemoveImpl.class),
										7, ___uri, ___local, ___qname, __atts)));
						return;
					}
					state = 7;
					continue outer;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Case = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText2(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectionBase = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					attIdx = context.getAttribute("", "case");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText1(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "inflectionBase");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText2(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 7:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 6:
					state = 7;
					continue outer;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					if (("case" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					state = 3;
					continue outer;
				case 3:
					if (("inflectionBase" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					state = 6;
					continue outer;
				case 7:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 6:
					state = 7;
					continue outer;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					attIdx = context.getAttribute("", "case");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText1(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 2:
					if (("case" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 3:
					attIdx = context.getAttribute("", "inflectionBase");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText2(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 5:
					if (("inflectionBase" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				case 7:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 6:
					state = 7;
					continue outer;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 0:
						attIdx = context.getAttribute("", "case");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 3;
							eatText1(v);
							continue outer;
						}
						state = 3;
						continue outer;
					case 3:
						attIdx = context.getAttribute("", "inflectionBase");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 6;
							eatText2(v);
							continue outer;
						}
						state = 6;
						continue outer;
					case 4:
						state = 5;
						eatText2(value);
						return;
					case 7:
						revertToParentFromText(value);
						return;
					case 1:
						state = 2;
						eatText1(value);
						return;
					case 6:
						state = 7;
						continue outer;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

	}

}
