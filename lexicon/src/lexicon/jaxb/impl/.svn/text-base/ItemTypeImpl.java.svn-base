//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.04.11 at 01:39:43 GMT+02:00 
//


package lexicon.jaxb.impl;

public class ItemTypeImpl implements lexicon.jaxb.ItemType, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
{

    protected lexicon.jaxb.AdjectiveLexiconType _Adjective;
    protected java.lang.String _Comment;
    protected lexicon.jaxb.InterjectionLexiconType _Interjection;
    protected com.sun.xml.bind.util.ListImpl _Sense;
    protected lexicon.jaxb.AdverbLexiconType _Adverb;
    protected java.lang.String _Script;
    protected java.lang.String _Transliterated;
    protected lexicon.jaxb.QuantifierLexiconType _Quantifier;
    protected lexicon.jaxb.PrepositionLexiconType _Preposition;
    protected lexicon.jaxb.VerbLexiconType _Verb;
    protected lexicon.jaxb.PronounLexiconType _Pronoun;
    protected lexicon.jaxb.NounLexiconType _Noun;
    protected lexicon.jaxb.NegationLexiconType _Negation;
    protected java.lang.String _Dotted;
    protected java.lang.String _Undotted;
    protected lexicon.jaxb.InterrogativeLexiconType _Interrogative;
    protected lexicon.jaxb.ProperNameLexiconType _ProperName;
    protected java.lang.String _Id;
    protected lexicon.jaxb.ConjunctionLexiconType _Conjunction;
    public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (lexicon.jaxb.ItemType.class);
    }

    public lexicon.jaxb.AdjectiveLexiconType getAdjective() {
        return _Adjective;
    }

    public void setAdjective(lexicon.jaxb.AdjectiveLexiconType value) {
        _Adjective = value;
    }

    public java.lang.String getComment() {
        return _Comment;
    }

    public void setComment(java.lang.String value) {
        _Comment = value;
    }

    public lexicon.jaxb.InterjectionLexiconType getInterjection() {
        return _Interjection;
    }

    public void setInterjection(lexicon.jaxb.InterjectionLexiconType value) {
        _Interjection = value;
    }

    protected com.sun.xml.bind.util.ListImpl _getSense() {
        if (_Sense == null) {
            _Sense = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Sense;
    }

    public java.util.List getSense() {
        return _getSense();
    }

    public lexicon.jaxb.AdverbLexiconType getAdverb() {
        return _Adverb;
    }

    public void setAdverb(lexicon.jaxb.AdverbLexiconType value) {
        _Adverb = value;
    }

    public java.lang.String getScript() {
        if (_Script == null) {
            return "formal";
        } else {
            return _Script;
        }
    }

    public void setScript(java.lang.String value) {
        _Script = value;
    }

    public java.lang.String getTransliterated() {
        return _Transliterated;
    }

    public void setTransliterated(java.lang.String value) {
        _Transliterated = value;
    }

    public lexicon.jaxb.QuantifierLexiconType getQuantifier() {
        return _Quantifier;
    }

    public void setQuantifier(lexicon.jaxb.QuantifierLexiconType value) {
        _Quantifier = value;
    }

    public lexicon.jaxb.PrepositionLexiconType getPreposition() {
        return _Preposition;
    }

    public void setPreposition(lexicon.jaxb.PrepositionLexiconType value) {
        _Preposition = value;
    }

    public lexicon.jaxb.VerbLexiconType getVerb() {
        return _Verb;
    }

    public void setVerb(lexicon.jaxb.VerbLexiconType value) {
        _Verb = value;
    }

    public lexicon.jaxb.PronounLexiconType getPronoun() {
        return _Pronoun;
    }

    public void setPronoun(lexicon.jaxb.PronounLexiconType value) {
        _Pronoun = value;
    }

    public lexicon.jaxb.NounLexiconType getNoun() {
        return _Noun;
    }

    public void setNoun(lexicon.jaxb.NounLexiconType value) {
        _Noun = value;
    }

    public lexicon.jaxb.NegationLexiconType getNegation() {
        return _Negation;
    }

    public void setNegation(lexicon.jaxb.NegationLexiconType value) {
        _Negation = value;
    }

    public java.lang.String getDotted() {
        if (_Dotted == null) {
            return "";
        } else {
            return _Dotted;
        }
    }

    public void setDotted(java.lang.String value) {
        _Dotted = value;
    }

    public java.lang.String getUndotted() {
        return _Undotted;
    }

    public void setUndotted(java.lang.String value) {
        _Undotted = value;
    }

    public lexicon.jaxb.InterrogativeLexiconType getInterrogative() {
        return _Interrogative;
    }

    public void setInterrogative(lexicon.jaxb.InterrogativeLexiconType value) {
        _Interrogative = value;
    }

    public lexicon.jaxb.ProperNameLexiconType getProperName() {
        return _ProperName;
    }

    public void setProperName(lexicon.jaxb.ProperNameLexiconType value) {
        _ProperName = value;
    }

    public java.lang.String getId() {
        return _Id;
    }

    public void setId(java.lang.String value) {
        _Id = value;
    }

    public lexicon.jaxb.ConjunctionLexiconType getConjunction() {
        return _Conjunction;
    }

    public void setConjunction(lexicon.jaxb.ConjunctionLexiconType value) {
        _Conjunction = value;
    }

    public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
        return new lexicon.jaxb.impl.ItemTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx4 = 0;
        final int len4 = ((_Sense == null)? 0 :_Sense.size());
        if (_Comment!= null) {
            context.startElement("", "comment");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _Comment), "Comment");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if ((((((((((((_Negation == null)&&(_Adjective!= null))&&(_Interrogative == null))&&(_Noun == null))&&(_Adverb == null))&&(_ProperName == null))&&(_Conjunction == null))&&(_Verb == null))&&(_Quantifier == null))&&(_Pronoun == null))&&(_Interjection == null))&&(_Preposition == null)) {
            context.startElement("", "adjective");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Adjective), "Adjective");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Adjective), "Adjective");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Adjective), "Adjective");
            context.endElement();
        } else {
            if ((((((((((((_Negation == null)&&(_Adjective == null))&&(_Interrogative == null))&&(_Noun == null))&&(_Adverb!= null))&&(_ProperName == null))&&(_Conjunction == null))&&(_Verb == null))&&(_Quantifier == null))&&(_Pronoun == null))&&(_Interjection == null))&&(_Preposition == null)) {
                context.startElement("", "adverb");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Adverb), "Adverb");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Adverb), "Adverb");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Adverb), "Adverb");
                context.endElement();
            } else {
                if ((((((((((((_Negation == null)&&(_Adjective == null))&&(_Interrogative == null))&&(_Noun == null))&&(_Adverb == null))&&(_ProperName == null))&&(_Conjunction!= null))&&(_Verb == null))&&(_Quantifier == null))&&(_Pronoun == null))&&(_Interjection == null))&&(_Preposition == null)) {
                    context.startElement("", "conjunction");
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Conjunction), "Conjunction");
                    context.endNamespaceDecls();
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Conjunction), "Conjunction");
                    context.endAttributes();
                    context.childAsBody(((com.sun.xml.bind.JAXBObject) _Conjunction), "Conjunction");
                    context.endElement();
                } else {
                    if ((((((((((((_Negation == null)&&(_Adjective == null))&&(_Interrogative == null))&&(_Noun == null))&&(_Adverb == null))&&(_ProperName == null))&&(_Conjunction == null))&&(_Verb == null))&&(_Quantifier == null))&&(_Pronoun == null))&&(_Interjection!= null))&&(_Preposition == null)) {
                        context.startElement("", "interjection");
                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Interjection), "Interjection");
                        context.endNamespaceDecls();
                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Interjection), "Interjection");
                        context.endAttributes();
                        context.childAsBody(((com.sun.xml.bind.JAXBObject) _Interjection), "Interjection");
                        context.endElement();
                    } else {
                        if ((((((((((((_Negation == null)&&(_Adjective == null))&&(_Interrogative!= null))&&(_Noun == null))&&(_Adverb == null))&&(_ProperName == null))&&(_Conjunction == null))&&(_Verb == null))&&(_Quantifier == null))&&(_Pronoun == null))&&(_Interjection == null))&&(_Preposition == null)) {
                            context.startElement("", "interrogative");
                            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Interrogative), "Interrogative");
                            context.endNamespaceDecls();
                            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Interrogative), "Interrogative");
                            context.endAttributes();
                            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Interrogative), "Interrogative");
                            context.endElement();
                        } else {
                            if ((((((((((((_Negation!= null)&&(_Adjective == null))&&(_Interrogative == null))&&(_Noun == null))&&(_Adverb == null))&&(_ProperName == null))&&(_Conjunction == null))&&(_Verb == null))&&(_Quantifier == null))&&(_Pronoun == null))&&(_Interjection == null))&&(_Preposition == null)) {
                                context.startElement("", "negation");
                                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Negation), "Negation");
                                context.endNamespaceDecls();
                                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Negation), "Negation");
                                context.endAttributes();
                                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Negation), "Negation");
                                context.endElement();
                            } else {
                                if ((((((((((((_Negation == null)&&(_Adjective == null))&&(_Interrogative == null))&&(_Noun!= null))&&(_Adverb == null))&&(_ProperName == null))&&(_Conjunction == null))&&(_Verb == null))&&(_Quantifier == null))&&(_Pronoun == null))&&(_Interjection == null))&&(_Preposition == null)) {
                                    context.startElement("", "noun");
                                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Noun), "Noun");
                                    context.endNamespaceDecls();
                                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Noun), "Noun");
                                    context.endAttributes();
                                    context.childAsBody(((com.sun.xml.bind.JAXBObject) _Noun), "Noun");
                                    context.endElement();
                                } else {
                                    if ((((((((((((_Negation == null)&&(_Adjective == null))&&(_Interrogative == null))&&(_Noun == null))&&(_Adverb == null))&&(_ProperName == null))&&(_Conjunction == null))&&(_Verb == null))&&(_Quantifier == null))&&(_Pronoun == null))&&(_Interjection == null))&&(_Preposition!= null)) {
                                        context.startElement("", "preposition");
                                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Preposition), "Preposition");
                                        context.endNamespaceDecls();
                                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Preposition), "Preposition");
                                        context.endAttributes();
                                        context.childAsBody(((com.sun.xml.bind.JAXBObject) _Preposition), "Preposition");
                                        context.endElement();
                                    } else {
                                        if ((((((((((((_Negation == null)&&(_Adjective == null))&&(_Interrogative == null))&&(_Noun == null))&&(_Adverb == null))&&(_ProperName == null))&&(_Conjunction == null))&&(_Verb == null))&&(_Quantifier == null))&&(_Pronoun!= null))&&(_Interjection == null))&&(_Preposition == null)) {
                                            context.startElement("", "pronoun");
                                            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pronoun), "Pronoun");
                                            context.endNamespaceDecls();
                                            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pronoun), "Pronoun");
                                            context.endAttributes();
                                            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Pronoun), "Pronoun");
                                            context.endElement();
                                        } else {
                                            if ((((((((((((_Negation == null)&&(_Adjective == null))&&(_Interrogative == null))&&(_Noun == null))&&(_Adverb == null))&&(_ProperName!= null))&&(_Conjunction == null))&&(_Verb == null))&&(_Quantifier == null))&&(_Pronoun == null))&&(_Interjection == null))&&(_Preposition == null)) {
                                                context.startElement("", "properName");
                                                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _ProperName), "ProperName");
                                                context.endNamespaceDecls();
                                                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _ProperName), "ProperName");
                                                context.endAttributes();
                                                context.childAsBody(((com.sun.xml.bind.JAXBObject) _ProperName), "ProperName");
                                                context.endElement();
                                            } else {
                                                if ((((((((((((_Negation == null)&&(_Adjective == null))&&(_Interrogative == null))&&(_Noun == null))&&(_Adverb == null))&&(_ProperName == null))&&(_Conjunction == null))&&(_Verb == null))&&(_Quantifier!= null))&&(_Pronoun == null))&&(_Interjection == null))&&(_Preposition == null)) {
                                                    context.startElement("", "quantifier");
                                                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Quantifier), "Quantifier");
                                                    context.endNamespaceDecls();
                                                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Quantifier), "Quantifier");
                                                    context.endAttributes();
                                                    context.childAsBody(((com.sun.xml.bind.JAXBObject) _Quantifier), "Quantifier");
                                                    context.endElement();
                                                } else {
                                                    if ((((((((((((_Negation == null)&&(_Adjective == null))&&(_Interrogative == null))&&(_Noun == null))&&(_Adverb == null))&&(_ProperName == null))&&(_Conjunction == null))&&(_Verb!= null))&&(_Quantifier == null))&&(_Pronoun == null))&&(_Interjection == null))&&(_Preposition == null)) {
                                                        context.startElement("", "verb");
                                                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Verb), "Verb");
                                                        context.endNamespaceDecls();
                                                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Verb), "Verb");
                                                        context.endAttributes();
                                                        context.childAsBody(((com.sun.xml.bind.JAXBObject) _Verb), "Verb");
                                                        context.endElement();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        while (idx4 != len4) {
            context.startElement("", "sense");
            int idx_26 = idx4;
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Sense.get(idx_26 ++)), "Sense");
            context.endNamespaceDecls();
            int idx_27 = idx4;
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Sense.get(idx_27 ++)), "Sense");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Sense.get(idx4 ++)), "Sense");
            context.endElement();
        }
    }

    public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx4 = 0;
        final int len4 = ((_Sense == null)? 0 :_Sense.size());
        if (_Dotted!= null) {
            context.startAttribute("", "dotted");
            try {
                context.text(((java.lang.String) _Dotted), "Dotted");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        context.startAttribute("", "id");
        try {
            context.text(((java.lang.String) _Id), "Id");
        } catch (java.lang.Exception e) {
            lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        if (_Script!= null) {
            context.startAttribute("", "script");
            try {
                context.text(((java.lang.String) _Script), "Script");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        context.startAttribute("", "transliterated");
        try {
            context.text(((java.lang.String) _Transliterated), "Transliterated");
        } catch (java.lang.Exception e) {
            lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "undotted");
        try {
            context.text(((java.lang.String) _Undotted), "Undotted");
        } catch (java.lang.Exception e) {
            lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        while (idx4 != len4) {
            idx4 += 1;
        }
    }

    public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx4 = 0;
        final int len4 = ((_Sense == null)? 0 :_Sense.size());
        while (idx4 != len4) {
            idx4 += 1;
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (lexicon.jaxb.ItemType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001pp"
+"sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnam"
+"eClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.gram"
+"mar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcon"
+"tentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005value"
+"xp\u0000p\u0000sq\u0000~\u0000\u0000ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dt"
+"t\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLc"
+"om/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype."
+"xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringT"
+"ype\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.B"
+"uiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.Conc"
+"reteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeIm"
+"pl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeName"
+"q\u0000~\u0000\u001eL\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpacePro"
+"cessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com."
+"sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000"
+"xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
+"p\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlo"
+"calNameq\u0000~\u0000\u001eL\u0000\fnamespaceURIq\u0000~\u0000\u001expq\u0000~\u0000\"q\u0000~\u0000!sq\u0000~\u0000\fppsr\u0000 com."
+"sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameCla"
+"ssq\u0000~\u0000\u000fxq\u0000~\u0000\u0003q\u0000~\u0000\u0013psq\u0000~\u0000\u0015ppsr\u0000\"com.sun.msv.datatype.xsd.Qnam"
+"eType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001bq\u0000~\u0000!t\u0000\u0005QNameq\u0000~\u0000%q\u0000~\u0000\'sq\u0000~\u0000(q\u0000~\u00000q\u0000~\u0000"
+"!sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalN"
+"ameq\u0000~\u0000\u001eL\u0000\fnamespaceURIq\u0000~\u0000\u001exr\u0000\u001dcom.sun.msv.grammar.NameClas"
+"s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0004typet\u0000)http://www.w3.org/2001/XMLSchema-ins"
+"tancesr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u0012\u0001q\u0000~\u00008sq\u0000~\u00002t\u0000\u0007commentt\u0000\u0000q\u0000~\u00008sq\u0000~\u0000\fppsq"
+"\u0000~\u0000\fppsq\u0000~\u0000\fppsq\u0000~\u0000\fppsq\u0000~\u0000\fppsq\u0000~\u0000\fppsq\u0000~\u0000\fppsq\u0000~\u0000\fppsq\u0000~\u0000\f"
+"ppsq\u0000~\u0000\fppsq\u0000~\u0000\fppsq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\fppsr\u0000 com."
+"sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.gramm"
+"ar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0013psq\u0000~\u0000+q\u0000~\u0000\u0013psr\u0000"
+"2com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u00009q\u0000~\u0000Qsr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00003q\u0000~\u00008sq\u0000~\u00002t\u0000!lexicon.jaxb.AdjectiveLexiconTypet\u0000"
+"+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\fppsq\u0000~\u0000+q\u0000"
+"~\u0000\u0013pq\u0000~\u0000-q\u0000~\u00004q\u0000~\u00008sq\u0000~\u00002t\u0000\tadjectiveq\u0000~\u0000<sq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0000pps"
+"q\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\fppsq\u0000~\u0000Lq\u0000~\u0000\u0013psq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000Qq\u0000~\u0000Sq\u0000~\u00008sq\u0000~\u0000"
+"2t\u0000\u001elexicon.jaxb.AdverbLexiconTypeq\u0000~\u0000Vsq\u0000~\u0000\fppsq\u0000~\u0000+q\u0000~\u0000\u0013pq"
+"\u0000~\u0000-q\u0000~\u00004q\u0000~\u00008sq\u0000~\u00002t\u0000\u0006adverbq\u0000~\u0000<sq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000epp\u0000"
+"sq\u0000~\u0000\fppsq\u0000~\u0000Lq\u0000~\u0000\u0013psq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000Qq\u0000~\u0000Sq\u0000~\u00008sq\u0000~\u00002t\u0000#lexi"
+"con.jaxb.ConjunctionLexiconTypeq\u0000~\u0000Vsq\u0000~\u0000\fppsq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000"
+"-q\u0000~\u00004q\u0000~\u00008sq\u0000~\u00002t\u0000\u000bconjunctionq\u0000~\u0000<sq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000ep"
+"p\u0000sq\u0000~\u0000\fppsq\u0000~\u0000Lq\u0000~\u0000\u0013psq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000Qq\u0000~\u0000Sq\u0000~\u00008sq\u0000~\u00002t\u0000$le"
+"xicon.jaxb.InterjectionLexiconTypeq\u0000~\u0000Vsq\u0000~\u0000\fppsq\u0000~\u0000+q\u0000~\u0000\u0013pq"
+"\u0000~\u0000-q\u0000~\u00004q\u0000~\u00008sq\u0000~\u00002t\u0000\finterjectionq\u0000~\u0000<sq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0000ppsq\u0000"
+"~\u0000\u000epp\u0000sq\u0000~\u0000\fppsq\u0000~\u0000Lq\u0000~\u0000\u0013psq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000Qq\u0000~\u0000Sq\u0000~\u00008sq\u0000~\u00002t"
+"\u0000%lexicon.jaxb.InterrogativeLexiconTypeq\u0000~\u0000Vsq\u0000~\u0000\fppsq\u0000~\u0000+q\u0000"
+"~\u0000\u0013pq\u0000~\u0000-q\u0000~\u00004q\u0000~\u00008sq\u0000~\u00002t\u0000\rinterrogativeq\u0000~\u0000<sq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000"
+"\u0000ppsq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\fppsq\u0000~\u0000Lq\u0000~\u0000\u0013psq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000Qq\u0000~\u0000Sq\u0000~\u00008s"
+"q\u0000~\u00002t\u0000 lexicon.jaxb.NegationLexiconTypeq\u0000~\u0000Vsq\u0000~\u0000\fppsq\u0000~\u0000+q"
+"\u0000~\u0000\u0013pq\u0000~\u0000-q\u0000~\u00004q\u0000~\u00008sq\u0000~\u00002t\u0000\bnegationq\u0000~\u0000<sq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0000pps"
+"q\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\fppsq\u0000~\u0000Lq\u0000~\u0000\u0013psq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000Qq\u0000~\u0000Sq\u0000~\u00008sq\u0000~\u0000"
+"2t\u0000\u001clexicon.jaxb.NounLexiconTypeq\u0000~\u0000Vsq\u0000~\u0000\fppsq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~"
+"\u0000-q\u0000~\u00004q\u0000~\u00008sq\u0000~\u00002t\u0000\u0004nounq\u0000~\u0000<sq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000epp\u0000sq\u0000~"
+"\u0000\fppsq\u0000~\u0000Lq\u0000~\u0000\u0013psq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000Qq\u0000~\u0000Sq\u0000~\u00008sq\u0000~\u00002t\u0000#lexicon."
+"jaxb.PrepositionLexiconTypeq\u0000~\u0000Vsq\u0000~\u0000\fppsq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000-q\u0000~"
+"\u00004q\u0000~\u00008sq\u0000~\u00002t\u0000\u000bprepositionq\u0000~\u0000<sq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000epp\u0000sq"
+"\u0000~\u0000\fppsq\u0000~\u0000Lq\u0000~\u0000\u0013psq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000Qq\u0000~\u0000Sq\u0000~\u00008sq\u0000~\u00002t\u0000\u001flexico"
+"n.jaxb.PronounLexiconTypeq\u0000~\u0000Vsq\u0000~\u0000\fppsq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000-q\u0000~\u00004"
+"q\u0000~\u00008sq\u0000~\u00002t\u0000\u0007pronounq\u0000~\u0000<sq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\fpp"
+"sq\u0000~\u0000Lq\u0000~\u0000\u0013psq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000Qq\u0000~\u0000Sq\u0000~\u00008sq\u0000~\u00002t\u0000\"lexicon.jaxb"
+".ProperNameLexiconTypeq\u0000~\u0000Vsq\u0000~\u0000\fppsq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000-q\u0000~\u00004q\u0000~"
+"\u00008sq\u0000~\u00002t\u0000\nproperNameq\u0000~\u0000<sq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\fpp"
+"sq\u0000~\u0000Lq\u0000~\u0000\u0013psq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000Qq\u0000~\u0000Sq\u0000~\u00008sq\u0000~\u00002t\u0000\"lexicon.jaxb"
+".QuantifierLexiconTypeq\u0000~\u0000Vsq\u0000~\u0000\fppsq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000-q\u0000~\u00004q\u0000~"
+"\u00008sq\u0000~\u00002t\u0000\nquantifierq\u0000~\u0000<sq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\fpp"
+"sq\u0000~\u0000Lq\u0000~\u0000\u0013psq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000Qq\u0000~\u0000Sq\u0000~\u00008sq\u0000~\u00002t\u0000\u001clexicon.jaxb"
+".VerbLexiconTypeq\u0000~\u0000Vsq\u0000~\u0000\fppsq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000-q\u0000~\u00004q\u0000~\u00008sq\u0000~"
+"\u00002t\u0000\u0004verbq\u0000~\u0000<sq\u0000~\u0000Lppsq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\fppsq\u0000~"
+"\u0000Lq\u0000~\u0000\u0013psq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000Qq\u0000~\u0000Sq\u0000~\u00008sq\u0000~\u00002t\u0000\u0016lexicon.jaxb.Sen"
+"seTypeq\u0000~\u0000Vsq\u0000~\u0000\fppsq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000-q\u0000~\u00004q\u0000~\u00008sq\u0000~\u00002t\u0000\u0005sense"
+"q\u0000~\u0000<sq\u0000~\u0000\fppsq\u0000~\u0000+q\u0000~\u0000\u0013pq\u0000~\u0000\u0018sq\u0000~\u00002t\u0000\u0006dottedq\u0000~\u0000<q\u0000~\u00008sq\u0000~\u0000"
+"+ppq\u0000~\u0000\u0018sq\u0000~\u00002t\u0000\u0002idq\u0000~\u0000<sq\u0000~\u0000\fppsq\u0000~\u0000+q\u0000~\u0000\u0013psq\u0000~\u0000\u0015ppsr\u0000)com."
+"sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000f"
+"Ljava/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataTypeWithValu"
+"eConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.Data"
+"TypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlag"
+"L\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fco"
+"ncreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacet"
+"Nameq\u0000~\u0000\u001exq\u0000~\u0000\u001dq\u0000~\u0000<t\u0000\nScriptTypeq\u0000~\u0000%\u0000\u0000q\u0000~\u0000 q\u0000~\u0000 t\u0000\u000benumera"
+"tionsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot"
+"\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000\'sq\u0000~\u0000(q\u0000~\u0000\u00fdq\u0000~\u0000<sq\u0000~\u00002t\u0000\u0006"
+"scriptq\u0000~\u0000<q\u0000~\u00008sq\u0000~\u0000+ppq\u0000~\u0000\u0018sq\u0000~\u00002t\u0000\u000etransliteratedq\u0000~\u0000<sq\u0000"
+"~\u0000+ppq\u0000~\u0000\u0018sq\u0000~\u00002t\u0000\bundottedq\u0000~\u0000<sr\u0000\"com.sun.msv.grammar.Expr"
+"essionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/Expr"
+"essionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPo"
+"ol$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$"
+"Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000L\u0001pq\u0000~\u0000\u00cbq\u0000~\u0000\u00bfq\u0000~\u0000\u00b3q"
+"\u0000~\u0000\u00a7q\u0000~\u0000\u009bq\u0000~\u0000\u008fq\u0000~\u0000\u0083q\u0000~\u0000@q\u0000~\u0000wq\u0000~\u0000kq\u0000~\u0000_q\u0000~\u0000Nq\u0000~\u0000\u00d7q\u0000~\u0000\u00e4q\u0000~\u0000Eq"
+"\u0000~\u0000\u00caq\u0000~\u0000\u00beq\u0000~\u0000\u00b2q\u0000~\u0000\u00a6q\u0000~\u0000\u009aq\u0000~\u0000\u008eq\u0000~\u0000\u0082q\u0000~\u0000vq\u0000~\u0000jq\u0000~\u0000^q\u0000~\u0000Kq\u0000~\u0000\u00d6q"
+"\u0000~\u0000\u00e3q\u0000~\u0000Fq\u0000~\u0000\rq\u0000~\u0000\u00f3q\u0000~\u0000\u0005q\u0000~\u0000\bq\u0000~\u0000\u00dfq\u0000~\u0000Dq\u0000~\u0000\u00cfq\u0000~\u0000\u00c3q\u0000~\u0000\u00b7q\u0000~\u0000\u00abq"
+"\u0000~\u0000\u009fq\u0000~\u0000\u0093q\u0000~\u0000\u0087q\u0000~\u0000{q\u0000~\u0000oq\u0000~\u0000cq\u0000~\u0000Wq\u0000~\u0000*q\u0000~\u0000Cq\u0000~\u0000\u00dbq\u0000~\u0000\u00e8q\u0000~\u0000\nq"
+"\u0000~\u0000\u000bq\u0000~\u0000\u0006q\u0000~\u0000Aq\u0000~\u0000\u0014q\u0000~\u0000=q\u0000~\u0000\u00ecq\u0000~\u0000Gq\u0000~\u0000>q\u0000~\u0000?q\u0000~\u0000\u00c8q\u0000~\u0000\u00bcq\u0000~\u0000\u00b0q"
+"\u0000~\u0000\u00a4q\u0000~\u0000\u0098q\u0000~\u0000\u008cq\u0000~\u0000\u0080q\u0000~\u0000tq\u0000~\u0000hq\u0000~\u0000\\q\u0000~\u0000Iq\u0000~\u0000\u00d4q\u0000~\u0000\u00e1q\u0000~\u0000Bq\u0000~\u0000\u0007q"
+"\u0000~\u0000\tx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            super(context, "-----------------------------------------------");
        }

        protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return lexicon.jaxb.impl.ItemTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  39 :
                        attIdx = context.getAttribute("", "binyan");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  21 :
                        if (("sense" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 22;
                            return ;
                        }
                        break;
                    case  33 :
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("add" == ___local)&&("" == ___uri)) {
                            _Interjection = ((lexicon.jaxb.impl.InterjectionLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.InterjectionLexiconTypeImpl.class), 34, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _Interjection = ((lexicon.jaxb.impl.InterjectionLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.InterjectionLexiconTypeImpl.class), 34, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _Interjection = ((lexicon.jaxb.impl.InterjectionLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.InterjectionLexiconTypeImpl.class), 34, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Interjection = ((lexicon.jaxb.impl.InterjectionLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.InterjectionLexiconTypeImpl.class), 34, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  35 :
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("add" == ___local)&&("" == ___uri)) {
                            _Quantifier = ((lexicon.jaxb.impl.QuantifierLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.class), 36, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _Quantifier = ((lexicon.jaxb.impl.QuantifierLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.class), 36, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _Quantifier = ((lexicon.jaxb.impl.QuantifierLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.class), 36, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Quantifier = ((lexicon.jaxb.impl.QuantifierLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.class), 36, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  24 :
                        if (("sense" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 22;
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  43 :
                        _Negation = ((lexicon.jaxb.impl.NegationLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.NegationLexiconTypeImpl.class), 44, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  27 :
                        attIdx = context.getAttribute("", "acronym");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "ipSource");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "pattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "plural");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "root");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("add" == ___local)&&("" == ___uri)) {
                            _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  37 :
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("add" == ___local)&&("" == ___uri)) {
                            _Interrogative = ((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.class), 38, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _Interrogative = ((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.class), 38, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _Interrogative = ((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.class), 38, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Interrogative = ((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.class), 38, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  31 :
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "person");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 6;
                            continue outer;
                        }
                        break;
                    case  22 :
                        attIdx = context.getAttribute("", "definition");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  9 :
                        attIdx = context.getAttribute("", "transliterated");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 12;
                            continue outer;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "script");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 9;
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  19 :
                        attIdx = context.getAttribute("", "acronym");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "deverbal");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "direction");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "dual");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "ipSource");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "pattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "plural");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "root");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("add" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  0 :
                        attIdx = context.getAttribute("", "dotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  18 :
                        if (("adjective" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 27;
                            return ;
                        }
                        if (("adverb" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 29;
                            return ;
                        }
                        if (("conjunction" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 25;
                            return ;
                        }
                        if (("interjection" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 33;
                            return ;
                        }
                        if (("interrogative" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 37;
                            return ;
                        }
                        if (("negation" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 43;
                            return ;
                        }
                        if (("noun" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 19;
                            return ;
                        }
                        if (("preposition" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 41;
                            return ;
                        }
                        if (("pronoun" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 31;
                            return ;
                        }
                        if (("properName" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 45;
                            return ;
                        }
                        if (("quantifier" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 35;
                            return ;
                        }
                        if (("verb" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 39;
                            return ;
                        }
                        break;
                    case  41 :
                        attIdx = context.getAttribute("", "case");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("add" == ___local)&&("" == ___uri)) {
                            _Preposition = ((lexicon.jaxb.impl.PrepositionLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.class), 42, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _Preposition = ((lexicon.jaxb.impl.PrepositionLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.class), 42, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _Preposition = ((lexicon.jaxb.impl.PrepositionLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.class), 42, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Preposition = ((lexicon.jaxb.impl.PrepositionLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.class), 42, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  25 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        _Conjunction = ((lexicon.jaxb.impl.ConjunctionLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.ConjunctionLexiconTypeImpl.class), 26, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  29 :
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "interrogative");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "modifiesAdjective");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "modifiesAdverb");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "modifiesVerb");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "position");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("add" == ___local)&&("" == ___uri)) {
                            _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  15 :
                        if (("comment" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 16;
                            return ;
                        }
                        state = 18;
                        continue outer;
                    case  45 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "direction");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        _ProperName = ((lexicon.jaxb.impl.ProperNameLexiconTypeImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.ProperNameLexiconTypeImpl.class), 46, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  12 :
                        attIdx = context.getAttribute("", "undotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 15;
                            continue outer;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Id = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Transliterated = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Script = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Dotted = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Undotted = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  30 :
                        if (("adverb" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  36 :
                        if (("quantifier" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  26 :
                        if (("conjunction" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  39 :
                        attIdx = context.getAttribute("", "binyan");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  33 :
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _Interjection = ((lexicon.jaxb.impl.InterjectionLexiconTypeImpl) spawnChildFromLeaveElement((lexicon.jaxb.impl.InterjectionLexiconTypeImpl.class), 34, ___uri, ___local, ___qname));
                        return ;
                    case  35 :
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _Quantifier = ((lexicon.jaxb.impl.QuantifierLexiconTypeImpl) spawnChildFromLeaveElement((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.class), 36, ___uri, ___local, ___qname));
                        return ;
                    case  24 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  43 :
                        _Negation = ((lexicon.jaxb.impl.NegationLexiconTypeImpl) spawnChildFromLeaveElement((lexicon.jaxb.impl.NegationLexiconTypeImpl.class), 44, ___uri, ___local, ___qname));
                        return ;
                    case  27 :
                        attIdx = context.getAttribute("", "acronym");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "ipSource");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "pattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "plural");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "root");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromLeaveElement((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname));
                        return ;
                    case  20 :
                        if (("noun" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  46 :
                        if (("properName" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  37 :
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _Interrogative = ((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl) spawnChildFromLeaveElement((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.class), 38, ___uri, ___local, ___qname));
                        return ;
                    case  31 :
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "person");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 6;
                            continue outer;
                        }
                        break;
                    case  17 :
                        if (("comment" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 18;
                            return ;
                        }
                        break;
                    case  23 :
                        if (("sense" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 24;
                            return ;
                        }
                        break;
                    case  22 :
                        attIdx = context.getAttribute("", "definition");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  34 :
                        if (("interjection" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  42 :
                        if (("preposition" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  9 :
                        attIdx = context.getAttribute("", "transliterated");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 12;
                            continue outer;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "script");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 9;
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  28 :
                        if (("adjective" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  19 :
                        attIdx = context.getAttribute("", "acronym");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "deverbal");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "direction");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "dual");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "ipSource");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "pattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "plural");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "root");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromLeaveElement((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                        return ;
                    case  0 :
                        attIdx = context.getAttribute("", "dotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  41 :
                        attIdx = context.getAttribute("", "case");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _Preposition = ((lexicon.jaxb.impl.PrepositionLexiconTypeImpl) spawnChildFromLeaveElement((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.class), 42, ___uri, ___local, ___qname));
                        return ;
                    case  44 :
                        if (("negation" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  25 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _Conjunction = ((lexicon.jaxb.impl.ConjunctionLexiconTypeImpl) spawnChildFromLeaveElement((lexicon.jaxb.impl.ConjunctionLexiconTypeImpl.class), 26, ___uri, ___local, ___qname));
                        return ;
                    case  40 :
                        if (("verb" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  38 :
                        if (("interrogative" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  32 :
                        if (("pronoun" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  29 :
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "interrogative");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "modifiesAdjective");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "modifiesAdverb");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "modifiesVerb");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "position");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromLeaveElement((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, ___uri, ___local, ___qname));
                        return ;
                    case  15 :
                        state = 18;
                        continue outer;
                    case  45 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "direction");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _ProperName = ((lexicon.jaxb.impl.ProperNameLexiconTypeImpl) spawnChildFromLeaveElement((lexicon.jaxb.impl.ProperNameLexiconTypeImpl.class), 46, ___uri, ___local, ___qname));
                        return ;
                    case  12 :
                        attIdx = context.getAttribute("", "undotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 15;
                            continue outer;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  39 :
                        if (("binyan" == ___local)&&("" == ___uri)) {
                            _Verb = ((lexicon.jaxb.impl.VerbLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.VerbLexiconTypeImpl.class), 40, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("feminine" == ___local)&&("" == ___uri)) {
                            _Verb = ((lexicon.jaxb.impl.VerbLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.VerbLexiconTypeImpl.class), 40, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("inflectionPattern" == ___local)&&("" == ___uri)) {
                            _Verb = ((lexicon.jaxb.impl.VerbLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.VerbLexiconTypeImpl.class), 40, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  33 :
                        if (("inflect" == ___local)&&("" == ___uri)) {
                            _Interjection = ((lexicon.jaxb.impl.InterjectionLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.InterjectionLexiconTypeImpl.class), 34, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("inflectionBase" == ___local)&&("" == ___uri)) {
                            _Interjection = ((lexicon.jaxb.impl.InterjectionLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.InterjectionLexiconTypeImpl.class), 34, ___uri, ___local, ___qname));
                            return ;
                        }
                        _Interjection = ((lexicon.jaxb.impl.InterjectionLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.InterjectionLexiconTypeImpl.class), 34, ___uri, ___local, ___qname));
                        return ;
                    case  35 :
                        if (("gender" == ___local)&&("" == ___uri)) {
                            _Quantifier = ((lexicon.jaxb.impl.QuantifierLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.class), 36, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("inflect" == ___local)&&("" == ___uri)) {
                            _Quantifier = ((lexicon.jaxb.impl.QuantifierLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.class), 36, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("inflectionBase" == ___local)&&("" == ___uri)) {
                            _Quantifier = ((lexicon.jaxb.impl.QuantifierLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.class), 36, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("type" == ___local)&&("" == ___uri)) {
                            _Quantifier = ((lexicon.jaxb.impl.QuantifierLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.class), 36, ___uri, ___local, ___qname));
                            return ;
                        }
                        _Quantifier = ((lexicon.jaxb.impl.QuantifierLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.class), 36, ___uri, ___local, ___qname));
                        return ;
                    case  24 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  43 :
                        _Negation = ((lexicon.jaxb.impl.NegationLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NegationLexiconTypeImpl.class), 44, ___uri, ___local, ___qname));
                        return ;
                    case  27 :
                        if (("acronym" == ___local)&&("" == ___uri)) {
                            _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("feminine" == ___local)&&("" == ___uri)) {
                            _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("gender" == ___local)&&("" == ___uri)) {
                            _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("inflectionBase" == ___local)&&("" == ___uri)) {
                            _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("inflectionPattern" == ___local)&&("" == ___uri)) {
                            _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("ipSource" == ___local)&&("" == ___uri)) {
                            _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("number" == ___local)&&("" == ___uri)) {
                            _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("pattern" == ___local)&&("" == ___uri)) {
                            _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("plural" == ___local)&&("" == ___uri)) {
                            _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("root" == ___local)&&("" == ___uri)) {
                            _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname));
                            return ;
                        }
                        _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname));
                        return ;
                    case  37 :
                        if (("inflect" == ___local)&&("" == ___uri)) {
                            _Interrogative = ((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.class), 38, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("inflectionBase" == ___local)&&("" == ___uri)) {
                            _Interrogative = ((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.class), 38, ___uri, ___local, ___qname));
                            return ;
                        }
                        _Interrogative = ((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.class), 38, ___uri, ___local, ___qname));
                        return ;
                    case  31 :
                        if (("gender" == ___local)&&("" == ___uri)) {
                            _Pronoun = ((lexicon.jaxb.impl.PronounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.PronounLexiconTypeImpl.class), 32, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("number" == ___local)&&("" == ___uri)) {
                            _Pronoun = ((lexicon.jaxb.impl.PronounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.PronounLexiconTypeImpl.class), 32, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("person" == ___local)&&("" == ___uri)) {
                            _Pronoun = ((lexicon.jaxb.impl.PronounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.PronounLexiconTypeImpl.class), 32, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("type" == ___local)&&("" == ___uri)) {
                            _Pronoun = ((lexicon.jaxb.impl.PronounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.PronounLexiconTypeImpl.class), 32, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  3 :
                        if (("id" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        break;
                    case  22 :
                        if (("definition" == ___local)&&("" == ___uri)) {
                            _getSense().add(((lexicon.jaxb.impl.SenseTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.SenseTypeImpl.class), 23, ___uri, ___local, ___qname)));
                            return ;
                        }
                        if (("id" == ___local)&&("" == ___uri)) {
                            _getSense().add(((lexicon.jaxb.impl.SenseTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.SenseTypeImpl.class), 23, ___uri, ___local, ___qname)));
                            return ;
                        }
                        break;
                    case  9 :
                        if (("transliterated" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        break;
                    case  6 :
                        if (("script" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  19 :
                        if (("acronym" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("definiteness" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("deverbal" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("direction" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("dual" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("feminine" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("gender" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("inflectionBase" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("inflectionPattern" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("ipSource" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("number" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("pattern" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("plural" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("root" == ___local)&&("" == ___uri)) {
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                            return ;
                        }
                        _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                        return ;
                    case  0 :
                        if (("dotted" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  41 :
                        if (("case" == ___local)&&("" == ___uri)) {
                            _Preposition = ((lexicon.jaxb.impl.PrepositionLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.class), 42, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("inflectionBase" == ___local)&&("" == ___uri)) {
                            _Preposition = ((lexicon.jaxb.impl.PrepositionLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.class), 42, ___uri, ___local, ___qname));
                            return ;
                        }
                        _Preposition = ((lexicon.jaxb.impl.PrepositionLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.class), 42, ___uri, ___local, ___qname));
                        return ;
                    case  25 :
                        if (("type" == ___local)&&("" == ___uri)) {
                            _Conjunction = ((lexicon.jaxb.impl.ConjunctionLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.ConjunctionLexiconTypeImpl.class), 26, ___uri, ___local, ___qname));
                            return ;
                        }
                        _Conjunction = ((lexicon.jaxb.impl.ConjunctionLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.ConjunctionLexiconTypeImpl.class), 26, ___uri, ___local, ___qname));
                        return ;
                    case  29 :
                        if (("inflect" == ___local)&&("" == ___uri)) {
                            _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("inflectionBase" == ___local)&&("" == ___uri)) {
                            _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("interrogative" == ___local)&&("" == ___uri)) {
                            _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("modifiesAdjective" == ___local)&&("" == ___uri)) {
                            _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("modifiesAdverb" == ___local)&&("" == ___uri)) {
                            _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("modifiesVerb" == ___local)&&("" == ___uri)) {
                            _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("position" == ___local)&&("" == ___uri)) {
                            _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, ___uri, ___local, ___qname));
                            return ;
                        }
                        _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, ___uri, ___local, ___qname));
                        return ;
                    case  15 :
                        state = 18;
                        continue outer;
                    case  45 :
                        if (("definiteness" == ___local)&&("" == ___uri)) {
                            _ProperName = ((lexicon.jaxb.impl.ProperNameLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.ProperNameLexiconTypeImpl.class), 46, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("direction" == ___local)&&("" == ___uri)) {
                            _ProperName = ((lexicon.jaxb.impl.ProperNameLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.ProperNameLexiconTypeImpl.class), 46, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("gender" == ___local)&&("" == ___uri)) {
                            _ProperName = ((lexicon.jaxb.impl.ProperNameLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.ProperNameLexiconTypeImpl.class), 46, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("number" == ___local)&&("" == ___uri)) {
                            _ProperName = ((lexicon.jaxb.impl.ProperNameLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.ProperNameLexiconTypeImpl.class), 46, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("type" == ___local)&&("" == ___uri)) {
                            _ProperName = ((lexicon.jaxb.impl.ProperNameLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.ProperNameLexiconTypeImpl.class), 46, ___uri, ___local, ___qname));
                            return ;
                        }
                        _ProperName = ((lexicon.jaxb.impl.ProperNameLexiconTypeImpl) spawnChildFromEnterAttribute((lexicon.jaxb.impl.ProperNameLexiconTypeImpl.class), 46, ___uri, ___local, ___qname));
                        return ;
                    case  12 :
                        if (("undotted" == ___local)&&("" == ___uri)) {
                            state = 13;
                            return ;
                        }
                        break;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  39 :
                        attIdx = context.getAttribute("", "binyan");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  8 :
                        if (("script" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  33 :
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _Interjection = ((lexicon.jaxb.impl.InterjectionLexiconTypeImpl) spawnChildFromLeaveAttribute((lexicon.jaxb.impl.InterjectionLexiconTypeImpl.class), 34, ___uri, ___local, ___qname));
                        return ;
                    case  35 :
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _Quantifier = ((lexicon.jaxb.impl.QuantifierLexiconTypeImpl) spawnChildFromLeaveAttribute((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.class), 36, ___uri, ___local, ___qname));
                        return ;
                    case  24 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  43 :
                        _Negation = ((lexicon.jaxb.impl.NegationLexiconTypeImpl) spawnChildFromLeaveAttribute((lexicon.jaxb.impl.NegationLexiconTypeImpl.class), 44, ___uri, ___local, ___qname));
                        return ;
                    case  27 :
                        attIdx = context.getAttribute("", "acronym");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "ipSource");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "pattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "plural");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "root");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromLeaveAttribute((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, ___uri, ___local, ___qname));
                        return ;
                    case  37 :
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _Interrogative = ((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl) spawnChildFromLeaveAttribute((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.class), 38, ___uri, ___local, ___qname));
                        return ;
                    case  31 :
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "person");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 6;
                            continue outer;
                        }
                        break;
                    case  22 :
                        attIdx = context.getAttribute("", "definition");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  11 :
                        if (("transliterated" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                    case  9 :
                        attIdx = context.getAttribute("", "transliterated");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 12;
                            continue outer;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "script");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 9;
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  14 :
                        if (("undotted" == ___local)&&("" == ___uri)) {
                            state = 15;
                            return ;
                        }
                        break;
                    case  19 :
                        attIdx = context.getAttribute("", "acronym");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "deverbal");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "direction");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "dual");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "ipSource");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "pattern");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "plural");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "root");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromLeaveAttribute((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, ___uri, ___local, ___qname));
                        return ;
                    case  2 :
                        if (("dotted" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "dotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  41 :
                        attIdx = context.getAttribute("", "case");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _Preposition = ((lexicon.jaxb.impl.PrepositionLexiconTypeImpl) spawnChildFromLeaveAttribute((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.class), 42, ___uri, ___local, ___qname));
                        return ;
                    case  25 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _Conjunction = ((lexicon.jaxb.impl.ConjunctionLexiconTypeImpl) spawnChildFromLeaveAttribute((lexicon.jaxb.impl.ConjunctionLexiconTypeImpl.class), 26, ___uri, ___local, ___qname));
                        return ;
                    case  5 :
                        if (("id" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  29 :
                        attIdx = context.getAttribute("", "inflect");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "inflectionBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "interrogative");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "modifiesAdjective");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "modifiesAdverb");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "modifiesVerb");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "position");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromLeaveAttribute((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, ___uri, ___local, ___qname));
                        return ;
                    case  15 :
                        state = 18;
                        continue outer;
                    case  45 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "direction");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _ProperName = ((lexicon.jaxb.impl.ProperNameLexiconTypeImpl) spawnChildFromLeaveAttribute((lexicon.jaxb.impl.ProperNameLexiconTypeImpl.class), 46, ___uri, ___local, ___qname));
                        return ;
                    case  12 :
                        attIdx = context.getAttribute("", "undotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 15;
                            continue outer;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  4 :
                            eatText1(value);
                            state = 5;
                            return ;
                        case  13 :
                            eatText5(value);
                            state = 14;
                            return ;
                        case  39 :
                            attIdx = context.getAttribute("", "binyan");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectionPattern");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  33 :
                            attIdx = context.getAttribute("", "inflect");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectionBase");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _Interjection = ((lexicon.jaxb.impl.InterjectionLexiconTypeImpl) spawnChildFromText((lexicon.jaxb.impl.InterjectionLexiconTypeImpl.class), 34, value));
                            return ;
                        case  35 :
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflect");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectionBase");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "type");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _Quantifier = ((lexicon.jaxb.impl.QuantifierLexiconTypeImpl) spawnChildFromText((lexicon.jaxb.impl.QuantifierLexiconTypeImpl.class), 36, value));
                            return ;
                        case  24 :
                            revertToParentFromText(value);
                            return ;
                        case  43 :
                            _Negation = ((lexicon.jaxb.impl.NegationLexiconTypeImpl) spawnChildFromText((lexicon.jaxb.impl.NegationLexiconTypeImpl.class), 44, value));
                            return ;
                        case  27 :
                            attIdx = context.getAttribute("", "acronym");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectionBase");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectionPattern");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "ipSource");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pattern");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "plural");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "root");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _Adjective = ((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl) spawnChildFromText((lexicon.jaxb.impl.AdjectiveLexiconTypeImpl.class), 28, value));
                            return ;
                        case  37 :
                            attIdx = context.getAttribute("", "inflect");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectionBase");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _Interrogative = ((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl) spawnChildFromText((lexicon.jaxb.impl.InterrogativeLexiconTypeImpl.class), 38, value));
                            return ;
                        case  31 :
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "person");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "type");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  3 :
                            attIdx = context.getAttribute("", "id");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 6;
                                continue outer;
                            }
                            break;
                        case  22 :
                            attIdx = context.getAttribute("", "definition");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "id");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  7 :
                            eatText3(value);
                            state = 8;
                            return ;
                        case  1 :
                            eatText4(value);
                            state = 2;
                            return ;
                        case  9 :
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText2(v);
                                state = 12;
                                continue outer;
                            }
                            break;
                        case  6 :
                            attIdx = context.getAttribute("", "script");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText3(v);
                                state = 9;
                                continue outer;
                            }
                            state = 9;
                            continue outer;
                        case  19 :
                            attIdx = context.getAttribute("", "acronym");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "deverbal");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "direction");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dual");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectionBase");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectionPattern");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "ipSource");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pattern");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "plural");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "root");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _Noun = ((lexicon.jaxb.impl.NounLexiconTypeImpl) spawnChildFromText((lexicon.jaxb.impl.NounLexiconTypeImpl.class), 20, value));
                            return ;
                        case  16 :
                            eatText6(value);
                            state = 17;
                            return ;
                        case  0 :
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText4(v);
                                state = 3;
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  41 :
                            attIdx = context.getAttribute("", "case");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectionBase");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _Preposition = ((lexicon.jaxb.impl.PrepositionLexiconTypeImpl) spawnChildFromText((lexicon.jaxb.impl.PrepositionLexiconTypeImpl.class), 42, value));
                            return ;
                        case  25 :
                            attIdx = context.getAttribute("", "type");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _Conjunction = ((lexicon.jaxb.impl.ConjunctionLexiconTypeImpl) spawnChildFromText((lexicon.jaxb.impl.ConjunctionLexiconTypeImpl.class), 26, value));
                            return ;
                        case  29 :
                            attIdx = context.getAttribute("", "inflect");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "inflectionBase");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "interrogative");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "modifiesAdjective");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "modifiesAdverb");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "modifiesVerb");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "position");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _Adverb = ((lexicon.jaxb.impl.AdverbLexiconTypeImpl) spawnChildFromText((lexicon.jaxb.impl.AdverbLexiconTypeImpl.class), 30, value));
                            return ;
                        case  10 :
                            eatText2(value);
                            state = 11;
                            return ;
                        case  15 :
                            state = 18;
                            continue outer;
                        case  45 :
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "direction");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "type");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _ProperName = ((lexicon.jaxb.impl.ProperNameLexiconTypeImpl) spawnChildFromText((lexicon.jaxb.impl.ProperNameLexiconTypeImpl.class), 46, value));
                            return ;
                        case  12 :
                            attIdx = context.getAttribute("", "undotted");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText5(v);
                                state = 15;
                                continue outer;
                            }
                            break;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Comment = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
