//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.04.11 at 01:39:43 GMT+02:00 
//


package lexicon.jaxb.impl;

public class VerbExceptionTypeImpl implements lexicon.jaxb.VerbExceptionType, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
{

    protected java.lang.String _Tense;
    protected java.lang.String _Value;
    protected java.lang.String _Pgn;
    protected java.lang.String _AccusativeSuffix;
    protected java.lang.String _Undotted;
    protected java.lang.String _Dotted;
    protected java.lang.String _Script;
    protected java.lang.String _Transliterated;
    public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (lexicon.jaxb.VerbExceptionType.class);
    }

    public java.lang.String getTense() {
        return _Tense;
    }

    public void setTense(java.lang.String value) {
        _Tense = value;
    }

    public java.lang.String getValue() {
        return _Value;
    }

    public void setValue(java.lang.String value) {
        _Value = value;
    }

    public java.lang.String getPgn() {
        return _Pgn;
    }

    public void setPgn(java.lang.String value) {
        _Pgn = value;
    }

    public java.lang.String getAccusativeSuffix() {
        if (_AccusativeSuffix == null) {
            return "unspecified";
        } else {
            return _AccusativeSuffix;
        }
    }

    public void setAccusativeSuffix(java.lang.String value) {
        _AccusativeSuffix = value;
    }

    public java.lang.String getUndotted() {
        return _Undotted;
    }

    public void setUndotted(java.lang.String value) {
        _Undotted = value;
    }

    public java.lang.String getDotted() {
        if (_Dotted == null) {
            return "";
        } else {
            return _Dotted;
        }
    }

    public void setDotted(java.lang.String value) {
        _Dotted = value;
    }

    public java.lang.String getScript() {
        if (_Script == null) {
            return "formal";
        } else {
            return _Script;
        }
    }

    public void setScript(java.lang.String value) {
        _Script = value;
    }

    public java.lang.String getTransliterated() {
        return _Transliterated;
    }

    public void setTransliterated(java.lang.String value) {
        _Transliterated = value;
    }

    public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
        return new lexicon.jaxb.impl.VerbExceptionTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        try {
            context.text(((java.lang.String) _Value), "Value");
        } catch (java.lang.Exception e) {
            lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
    }

    public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (_AccusativeSuffix!= null) {
            context.startAttribute("", "accusativeSuffix");
            try {
                context.text(((java.lang.String) _AccusativeSuffix), "AccusativeSuffix");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Dotted!= null) {
            context.startAttribute("", "dotted");
            try {
                context.text(((java.lang.String) _Dotted), "Dotted");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        context.startAttribute("", "pgn");
        try {
            context.text(((java.lang.String) _Pgn), "Pgn");
        } catch (java.lang.Exception e) {
            lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        if (_Script!= null) {
            context.startAttribute("", "script");
            try {
                context.text(((java.lang.String) _Script), "Script");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        context.startAttribute("", "tense");
        try {
            context.text(((java.lang.String) _Tense), "Tense");
        } catch (java.lang.Exception e) {
            lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "transliterated");
        try {
            context.text(((java.lang.String) _Transliterated), "Transliterated");
        } catch (java.lang.Exception e) {
            lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "undotted");
        try {
            context.text(((java.lang.String) _Undotted), "Undotted");
        } catch (java.lang.Exception e) {
            lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
    }

    public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public java.lang.Class getPrimaryInterface() {
        return (lexicon.jaxb.VerbExceptionType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLo"
+"rg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/su"
+"n/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype.xsd.T"
+"okenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.Builti"
+"nAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteT"
+"ype\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0015"
+"L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcesso"
+"r;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.m"
+"sv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,c"
+"om.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u0000"
+"0com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000"
+"xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNa"
+"meq\u0000~\u0000\u0015L\u0000\fnamespaceURIq\u0000~\u0000\u0015xpq\u0000~\u0000\u0019q\u0000~\u0000\u0018sr\u0000\u001dcom.sun.msv.gramm"
+"ar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.Attri"
+"buteExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/gra"
+"mmar/NameClass;xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valu"
+"exp\u0000psq\u0000~\u0000\fppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype"
+".xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun."
+"msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixed"
+"Z\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd"
+"/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/"
+"ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u0015xq\u0000~\u0000\u0014t\u0000\u0000t\u0000\u0007PGNTypeq\u0000~\u0000\u001c\u0000\u0000q\u0000~\u0000"
+"\u0017q\u0000~\u0000\u0017t\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000 "
+"?@\u0000\u0000\u0000\u0000\u0000\u000ft\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p/M"
+"/Plt\u0000\u00072p/M/Sgt\u0000\u00073p/F/Plt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt"
+"\u0000\u00073p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000\u001esq"
+"\u0000~\u0000\u001fq\u0000~\u00001q\u0000~\u00000sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0015L\u0000\fnamespaceURIq\u0000~\u0000\u0015xr\u0000\u001dcom.sun.msv.gra"
+"mmar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0010accusativeSuffixq\u0000~\u00000sr\u00000com.s"
+"un.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003"
+"sq\u0000~\u0000&\u0001q\u0000~\u0000Jsq\u0000~\u0000!ppsq\u0000~\u0000#q\u0000~\u0000\'pq\u0000~\u0000\u000fsq\u0000~\u0000Et\u0000\u0006dottedq\u0000~\u00000q\u0000~"
+"\u0000Jsq\u0000~\u0000#ppq\u0000~\u0000(sq\u0000~\u0000Et\u0000\u0003pgnq\u0000~\u00000sq\u0000~\u0000!ppsq\u0000~\u0000#q\u0000~\u0000\'psq\u0000~\u0000\fpp"
+"sq\u0000~\u0000)q\u0000~\u00000t\u0000\nScriptTypeq\u0000~\u0000\u001c\u0000\u0000q\u0000~\u0000\u0017q\u0000~\u0000\u0017q\u0000~\u00002sq\u0000~\u00003w\f\u0000\u0000\u0000\u0010?@"
+"\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000\u001esq\u0000~\u0000\u001fq\u0000~\u0000W"
+"q\u0000~\u00000sq\u0000~\u0000Et\u0000\u0006scriptq\u0000~\u00000q\u0000~\u0000Jsq\u0000~\u0000#ppsq\u0000~\u0000\fppsq\u0000~\u0000)q\u0000~\u00000t\u0000\t"
+"TenseTypeq\u0000~\u0000\u001c\u0000\u0000q\u0000~\u0000\u0017q\u0000~\u0000\u0017q\u0000~\u00002sq\u0000~\u00003w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u0004pastt\u0000"
+"\nimperativet\u0000\u0007beinonit\u0000\ninfinitivet\u0000\u0006futuret\u0000\u0006originxq\u0000~\u0000\u001esq"
+"\u0000~\u0000\u001fq\u0000~\u0000cq\u0000~\u00000sq\u0000~\u0000Et\u0000\u0005tenseq\u0000~\u00000sq\u0000~\u0000#ppq\u0000~\u0000\u000fsq\u0000~\u0000Et\u0000\u000etrans"
+"literatedq\u0000~\u00000sq\u0000~\u0000#ppq\u0000~\u0000\u000fsq\u0000~\u0000Et\u0000\bundottedq\u0000~\u00000sr\u0000\"com.sun"
+".msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun"
+"/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.gra"
+"mmar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVe"
+"rsionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\n\u0001"
+"pq\u0000~\u0000Sq\u0000~\u0000Lq\u0000~\u0000\u000bq\u0000~\u0000\u0006q\u0000~\u0000\tq\u0000~\u0000\u0007q\u0000~\u0000\"q\u0000~\u0000\bq\u0000~\u0000\u0005q\u0000~\u0000\nx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            super(context, "-----------------------");
        }

        protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return lexicon.jaxb.impl.VerbExceptionTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        attIdx = context.getAttribute("", "transliterated");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 18;
                            continue outer;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "accusativeSuffix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "tense");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 15;
                            continue outer;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "pgn");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 9;
                            continue outer;
                        }
                        break;
                    case  9 :
                        attIdx = context.getAttribute("", "script");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  22 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  3 :
                        attIdx = context.getAttribute("", "dotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 6;
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "undotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText7(v);
                            state = 21;
                            continue outer;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Transliterated = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AccusativeSuffix = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Tense = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Pgn = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Script = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Dotted = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Undotted = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        attIdx = context.getAttribute("", "transliterated");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 18;
                            continue outer;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "accusativeSuffix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "tense");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 15;
                            continue outer;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "pgn");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 9;
                            continue outer;
                        }
                        break;
                    case  9 :
                        attIdx = context.getAttribute("", "script");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  22 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        attIdx = context.getAttribute("", "dotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 6;
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "undotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText7(v);
                            state = 21;
                            continue outer;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        if (("transliterated" == ___local)&&("" == ___uri)) {
                            state = 16;
                            return ;
                        }
                        break;
                    case  0 :
                        if (("accusativeSuffix" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  12 :
                        if (("tense" == ___local)&&("" == ___uri)) {
                            state = 13;
                            return ;
                        }
                        break;
                    case  6 :
                        if (("pgn" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        break;
                    case  9 :
                        if (("script" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  22 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        if (("dotted" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  18 :
                        if (("undotted" == ___local)&&("" == ___uri)) {
                            state = 19;
                            return ;
                        }
                        break;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  8 :
                        if (("pgn" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  2 :
                        if (("accusativeSuffix" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  15 :
                        attIdx = context.getAttribute("", "transliterated");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 18;
                            continue outer;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "accusativeSuffix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "tense");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 15;
                            continue outer;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "pgn");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 9;
                            continue outer;
                        }
                        break;
                    case  20 :
                        if (("undotted" == ___local)&&("" == ___uri)) {
                            state = 21;
                            return ;
                        }
                        break;
                    case  9 :
                        attIdx = context.getAttribute("", "script");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  22 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        attIdx = context.getAttribute("", "dotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 6;
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  14 :
                        if (("tense" == ___local)&&("" == ___uri)) {
                            state = 15;
                            return ;
                        }
                        break;
                    case  5 :
                        if (("dotted" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  17 :
                        if (("transliterated" == ___local)&&("" == ___uri)) {
                            state = 18;
                            return ;
                        }
                        break;
                    case  18 :
                        attIdx = context.getAttribute("", "undotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText7(v);
                            state = 21;
                            continue outer;
                        }
                        break;
                    case  11 :
                        if (("script" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  21 :
                            eatText8(value);
                            state = 22;
                            return ;
                        case  15 :
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 18;
                                continue outer;
                            }
                            break;
                        case  0 :
                            attIdx = context.getAttribute("", "accusativeSuffix");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText2(v);
                                state = 3;
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  4 :
                            eatText6(value);
                            state = 5;
                            return ;
                        case  7 :
                            eatText4(value);
                            state = 8;
                            return ;
                        case  10 :
                            eatText5(value);
                            state = 11;
                            return ;
                        case  12 :
                            attIdx = context.getAttribute("", "tense");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText3(v);
                                state = 15;
                                continue outer;
                            }
                            break;
                        case  6 :
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText4(v);
                                state = 9;
                                continue outer;
                            }
                            break;
                        case  9 :
                            attIdx = context.getAttribute("", "script");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText5(v);
                                state = 12;
                                continue outer;
                            }
                            state = 12;
                            continue outer;
                        case  22 :
                            revertToParentFromText(value);
                            return ;
                        case  3 :
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText6(v);
                                state = 6;
                                continue outer;
                            }
                            state = 6;
                            continue outer;
                        case  16 :
                            eatText1(value);
                            state = 17;
                            return ;
                        case  1 :
                            eatText2(value);
                            state = 2;
                            return ;
                        case  18 :
                            attIdx = context.getAttribute("", "undotted");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText7(v);
                                state = 21;
                                continue outer;
                            }
                            break;
                        case  13 :
                            eatText3(value);
                            state = 14;
                            return ;
                        case  19 :
                            eatText7(value);
                            state = 20;
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText8(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Value = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
