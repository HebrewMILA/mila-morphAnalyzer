//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.04.11 at 01:39:43 GMT+02:00 
//


package lexicon.jaxb.impl;

public class NounExceptionTypeImpl implements lexicon.jaxb.NounExceptionType, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
{

    protected java.lang.String _Feminine;
    protected java.lang.String _Possessive;
    protected java.lang.String _Gender;
    protected boolean has_InflectPossessive;
    protected boolean _InflectPossessive;
    protected java.lang.String _Plural;
    protected boolean has_InflectConstruct;
    protected boolean _InflectConstruct;
    protected java.lang.String _Script;
    protected java.lang.String _Transliterated;
    protected java.lang.String _Value;
    protected java.lang.String _Construct;
    protected java.lang.String _Dual;
    protected java.lang.String _Number;
    protected java.lang.String _Dotted;
    protected java.lang.String _Undotted;
    public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (lexicon.jaxb.NounExceptionType.class);
    }

    public java.lang.String getFeminine() {
        if (_Feminine == null) {
            return "irrelevant";
        } else {
            return _Feminine;
        }
    }

    public void setFeminine(java.lang.String value) {
        _Feminine = value;
    }

    public java.lang.String getPossessive() {
        if (_Possessive == null) {
            return "unspecified";
        } else {
            return _Possessive;
        }
    }

    public void setPossessive(java.lang.String value) {
        _Possessive = value;
    }

    public java.lang.String getGender() {
        if (_Gender == null) {
            return "unspecified";
        } else {
            return _Gender;
        }
    }

    public void setGender(java.lang.String value) {
        _Gender = value;
    }

    public boolean isInflectPossessive() {
        if (!has_InflectPossessive) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("true"));
        } else {
            return _InflectPossessive;
        }
    }

    public void setInflectPossessive(boolean value) {
        _InflectPossessive = value;
        has_InflectPossessive = true;
    }

    public java.lang.String getPlural() {
        if (_Plural == null) {
            return "irrelevant";
        } else {
            return _Plural;
        }
    }

    public void setPlural(java.lang.String value) {
        _Plural = value;
    }

    public boolean isInflectConstruct() {
        if (!has_InflectConstruct) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("true"));
        } else {
            return _InflectConstruct;
        }
    }

    public void setInflectConstruct(boolean value) {
        _InflectConstruct = value;
        has_InflectConstruct = true;
    }

    public java.lang.String getScript() {
        if (_Script == null) {
            return "formal";
        } else {
            return _Script;
        }
    }

    public void setScript(java.lang.String value) {
        _Script = value;
    }

    public java.lang.String getTransliterated() {
        return _Transliterated;
    }

    public void setTransliterated(java.lang.String value) {
        _Transliterated = value;
    }

    public java.lang.String getValue() {
        return _Value;
    }

    public void setValue(java.lang.String value) {
        _Value = value;
    }

    public java.lang.String getConstruct() {
        if (_Construct == null) {
            return "unspecified";
        } else {
            return _Construct;
        }
    }

    public void setConstruct(java.lang.String value) {
        _Construct = value;
    }

    public java.lang.String getDual() {
        if (_Dual == null) {
            return "unspecified";
        } else {
            return _Dual;
        }
    }

    public void setDual(java.lang.String value) {
        _Dual = value;
    }

    public java.lang.String getNumber() {
        if (_Number == null) {
            return "unspecified";
        } else {
            return _Number;
        }
    }

    public void setNumber(java.lang.String value) {
        _Number = value;
    }

    public java.lang.String getDotted() {
        if (_Dotted == null) {
            return "";
        } else {
            return _Dotted;
        }
    }

    public void setDotted(java.lang.String value) {
        _Dotted = value;
    }

    public java.lang.String getUndotted() {
        return _Undotted;
    }

    public void setUndotted(java.lang.String value) {
        _Undotted = value;
    }

    public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
        return new lexicon.jaxb.impl.NounExceptionTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        try {
            context.text(((java.lang.String) _Value), "Value");
        } catch (java.lang.Exception e) {
            lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
    }

    public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (_Construct!= null) {
            context.startAttribute("", "construct");
            try {
                context.text(((java.lang.String) _Construct), "Construct");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Dotted!= null) {
            context.startAttribute("", "dotted");
            try {
                context.text(((java.lang.String) _Dotted), "Dotted");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Dual!= null) {
            context.startAttribute("", "dual");
            try {
                context.text(((java.lang.String) _Dual), "Dual");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Feminine!= null) {
            context.startAttribute("", "feminine");
            try {
                context.text(((java.lang.String) _Feminine), "Feminine");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Gender!= null) {
            context.startAttribute("", "gender");
            try {
                context.text(((java.lang.String) _Gender), "Gender");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_InflectConstruct) {
            context.startAttribute("", "inflectConstruct");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _InflectConstruct)), "InflectConstruct");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_InflectPossessive) {
            context.startAttribute("", "inflectPossessive");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _InflectPossessive)), "InflectPossessive");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Number!= null) {
            context.startAttribute("", "number");
            try {
                context.text(((java.lang.String) _Number), "Number");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Plural!= null) {
            context.startAttribute("", "plural");
            try {
                context.text(((java.lang.String) _Plural), "Plural");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Possessive!= null) {
            context.startAttribute("", "possessive");
            try {
                context.text(((java.lang.String) _Possessive), "Possessive");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Script!= null) {
            context.startAttribute("", "script");
            try {
                context.text(((java.lang.String) _Script), "Script");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        context.startAttribute("", "transliterated");
        try {
            context.text(((java.lang.String) _Transliterated), "Transliterated");
        } catch (java.lang.Exception e) {
            lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "undotted");
        try {
            context.text(((java.lang.String) _Undotted), "Undotted");
        } catch (java.lang.Exception e) {
            lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
    }

    public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public java.lang.Class getPrimaryInterface() {
        return (lexicon.jaxb.NounExceptionType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001b"
+"com.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/d"
+"atatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/S"
+"tringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\r"
+"isAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fn"
+"amespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001bL\u0000\nwhiteSpac"
+"et\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http:"
+"//www.w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype."
+"xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.d"
+"atatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv"
+".grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001b"
+"com.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001bL\u0000\fna"
+"mespaceURIq\u0000~\u0000\u001bxpq\u0000~\u0000\u001fq\u0000~\u0000\u001esr\u0000\u001dcom.sun.msv.grammar.ChoiceExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameCla"
+"ss;xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0012p"
+"psr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006"
+"valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataTyp"
+"eWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype"
+".xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValue"
+"CheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeI"
+"mpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType"
+";L\u0000\tfacetNameq\u0000~\u0000\u001bxq\u0000~\u0000\u001at\u0000\u0000t\u0000\fTriStateTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dt"
+"\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000"
+"\u0003t\u0000\u000bunspecifiedt\u0000\u0004truet\u0000\u0005falsexq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u00007q\u0000~\u00006sr\u0000#com."
+"sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001bL"
+"\u0000\fnamespaceURIq\u0000~\u0000\u001bxr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xpt\u0000\tconstructq\u0000~\u00006sr\u00000com.sun.msv.grammar.Expression$Eps"
+"ilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000,\u0001q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~"
+"\u0000-pq\u0000~\u0000\u0015sq\u0000~\u0000?t\u0000\u0006dottedq\u0000~\u00006q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000-pq\u0000~\u0000.sq"
+"\u0000~\u0000?t\u0000\u0004dualq\u0000~\u00006q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000-psq\u0000~\u0000\u0012ppsq\u0000~\u0000/q\u0000~\u00006"
+"t\u0000\fFeminineTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00008sq\u0000~\u00009w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0005t\u0000\u000b"
+"unspecifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001tt\u0000\nirrelevantxq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000Rq\u0000~\u00006s"
+"q\u0000~\u0000?t\u0000\bfeminineq\u0000~\u00006q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000-psq\u0000~\u0000\u0012ppsq\u0000~\u0000/"
+"q\u0000~\u00006t\u0000\nGenderTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00008sq\u0000~\u00009w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0005"
+"t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\nirrelevantt\u0000\u0016masculine and femin"
+"inet\u0000\tmasculinexq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000`q\u0000~\u00006sq\u0000~\u0000?t\u0000\u0006genderq\u0000~\u00006q\u0000~"
+"\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000-psq\u0000~\u0000\u0012ppsr\u0000$com.sun.msv.datatype.xsd.B"
+"ooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0018q\u0000~\u0000\u001et\u0000\u0007booleanq\u0000~\u0000\"q\u0000~\u0000$sq\u0000~\u0000%q\u0000"
+"~\u0000oq\u0000~\u0000\u001esq\u0000~\u0000?t\u0000\u0010inflectConstructq\u0000~\u00006q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~"
+"\u0000-pq\u0000~\u0000lsq\u0000~\u0000?t\u0000\u0011inflectPossessiveq\u0000~\u00006q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000"
+"~\u0000-psq\u0000~\u0000\u0012ppsq\u0000~\u0000/q\u0000~\u00006t\u0000\nNumberTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00008sq"
+"\u0000~\u00009w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and pluralt\u0000\u0004dua"
+"lt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000{q\u0000~\u0000"
+"6sq\u0000~\u0000?t\u0000\u0006numberq\u0000~\u00006q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000-psq\u0000~\u0000\u0012ppsq\u0000~\u0000/"
+"q\u0000~\u00006t\u0000\nPluralTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00008sq\u0000~\u00009w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\b"
+"t\u0000\u000bunspecifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000\u0002imt\u0000\u0003iimt\u0000\tim and wtt\u0000\nirrelevan"
+"tt\u0000\u0003iwtxq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000\u008aq\u0000~\u00006sq\u0000~\u0000?t\u0000\u0006pluralq\u0000~\u00006q\u0000~\u0000Dsq\u0000~\u0000\'"
+"ppsq\u0000~\u0000)q\u0000~\u0000-psq\u0000~\u0000\u0012ppsq\u0000~\u0000/q\u0000~\u00006t\u0000\u0007PGNTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001d"
+"q\u0000~\u00008sq\u0000~\u00009w\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u000ft\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b"
+"1p/MF/Sgt\u0000\t123p/M/Plt\u0000\u00072p/M/Sgt\u0000\u00073p/F/Plt\u0000\u000bunspecifiedt\u0000\u00072p/"
+"F/Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt"
+"\u0000\u00072p/F/Sgxq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000\u009bq\u0000~\u00006sq\u0000~\u0000?t\u0000\npossessiveq\u0000~\u00006q\u0000~\u0000D"
+"sq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000-psq\u0000~\u0000\u0012ppsq\u0000~\u0000/q\u0000~\u00006t\u0000\nScriptTypeq\u0000~\u0000\"\u0000\u0000q"
+"\u0000~\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00008sq\u0000~\u00009w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000"
+"\ncolloquialxq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000\u00b3q\u0000~\u00006sq\u0000~\u0000?t\u0000\u0006scriptq\u0000~\u00006q\u0000~\u0000Dsq"
+"\u0000~\u0000)ppq\u0000~\u0000\u0015sq\u0000~\u0000?t\u0000\u000etransliteratedq\u0000~\u00006sq\u0000~\u0000)ppq\u0000~\u0000\u0015sq\u0000~\u0000?t\u0000"
+"\bundottedq\u0000~\u00006sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedH"
+"ash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef"
+"\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/gramm"
+"ar/ExpressionPool;xp\u0000\u0000\u0000\u0018\u0001pq\u0000~\u0000\u000fq\u0000~\u0000\u0010q\u0000~\u0000\rq\u0000~\u0000\u0005q\u0000~\u0000Fq\u0000~\u0000\u0086q\u0000~\u0000"
+"\tq\u0000~\u0000\u00afq\u0000~\u0000\nq\u0000~\u0000Nq\u0000~\u0000jq\u0000~\u0000\u0007q\u0000~\u0000\bq\u0000~\u0000\fq\u0000~\u0000(q\u0000~\u0000\u000bq\u0000~\u0000\u000eq\u0000~\u0000sq\u0000~\u0000"
+"Jq\u0000~\u0000\u0097q\u0000~\u0000\u0006q\u0000~\u0000\u0011q\u0000~\u0000\\q\u0000~\u0000wx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            super(context, "-----------------------------------------");
        }

        protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return lexicon.jaxb.impl.NounExceptionTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        attIdx = context.getAttribute("", "inflectConstruct");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 18;
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  30 :
                        attIdx = context.getAttribute("", "script");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 33;
                            continue outer;
                        }
                        state = 33;
                        continue outer;
                    case  27 :
                        attIdx = context.getAttribute("", "possessive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 30;
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  21 :
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 24;
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "construct");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "dual");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText7(v);
                            state = 9;
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  33 :
                        attIdx = context.getAttribute("", "transliterated");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText8(v);
                            state = 36;
                            continue outer;
                        }
                        break;
                    case  36 :
                        attIdx = context.getAttribute("", "undotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText9(v);
                            state = 39;
                            continue outer;
                        }
                        break;
                    case  24 :
                        attIdx = context.getAttribute("", "plural");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText10(v);
                            state = 27;
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "inflectPossessive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText11(v);
                            state = 21;
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  40 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  3 :
                        attIdx = context.getAttribute("", "dotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText12(v);
                            state = 6;
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText13(v);
                            state = 15;
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _InflectConstruct = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_InflectConstruct = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Script = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Possessive = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Feminine = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Number = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Construct = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Dual = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText8(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Transliterated = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText9(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Undotted = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText10(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Plural = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText11(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _InflectPossessive = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_InflectPossessive = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText12(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Dotted = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText13(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Gender = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        attIdx = context.getAttribute("", "inflectConstruct");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 18;
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  30 :
                        attIdx = context.getAttribute("", "script");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 33;
                            continue outer;
                        }
                        state = 33;
                        continue outer;
                    case  27 :
                        attIdx = context.getAttribute("", "possessive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 30;
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  21 :
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 24;
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "construct");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "dual");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText7(v);
                            state = 9;
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  33 :
                        attIdx = context.getAttribute("", "transliterated");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText8(v);
                            state = 36;
                            continue outer;
                        }
                        break;
                    case  36 :
                        attIdx = context.getAttribute("", "undotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText9(v);
                            state = 39;
                            continue outer;
                        }
                        break;
                    case  24 :
                        attIdx = context.getAttribute("", "plural");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText10(v);
                            state = 27;
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "inflectPossessive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText11(v);
                            state = 21;
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  40 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        attIdx = context.getAttribute("", "dotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText12(v);
                            state = 6;
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText13(v);
                            state = 15;
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        if (("inflectConstruct" == ___local)&&("" == ___uri)) {
                            state = 16;
                            return ;
                        }
                        state = 18;
                        continue outer;
                    case  30 :
                        if (("script" == ___local)&&("" == ___uri)) {
                            state = 31;
                            return ;
                        }
                        state = 33;
                        continue outer;
                    case  27 :
                        if (("possessive" == ___local)&&("" == ___uri)) {
                            state = 28;
                            return ;
                        }
                        state = 30;
                        continue outer;
                    case  9 :
                        if (("feminine" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  21 :
                        if (("number" == ___local)&&("" == ___uri)) {
                            state = 22;
                            return ;
                        }
                        state = 24;
                        continue outer;
                    case  0 :
                        if (("construct" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  6 :
                        if (("dual" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  33 :
                        if (("transliterated" == ___local)&&("" == ___uri)) {
                            state = 34;
                            return ;
                        }
                        break;
                    case  36 :
                        if (("undotted" == ___local)&&("" == ___uri)) {
                            state = 37;
                            return ;
                        }
                        break;
                    case  24 :
                        if (("plural" == ___local)&&("" == ___uri)) {
                            state = 25;
                            return ;
                        }
                        state = 27;
                        continue outer;
                    case  18 :
                        if (("inflectPossessive" == ___local)&&("" == ___uri)) {
                            state = 19;
                            return ;
                        }
                        state = 21;
                        continue outer;
                    case  40 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        if (("dotted" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  12 :
                        if (("gender" == ___local)&&("" == ___uri)) {
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  14 :
                        if (("gender" == ___local)&&("" == ___uri)) {
                            state = 15;
                            return ;
                        }
                        break;
                    case  15 :
                        attIdx = context.getAttribute("", "inflectConstruct");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 18;
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  30 :
                        attIdx = context.getAttribute("", "script");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 33;
                            continue outer;
                        }
                        state = 33;
                        continue outer;
                    case  27 :
                        attIdx = context.getAttribute("", "possessive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 30;
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  21 :
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 24;
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  38 :
                        if (("undotted" == ___local)&&("" == ___uri)) {
                            state = 39;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "construct");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  23 :
                        if (("number" == ___local)&&("" == ___uri)) {
                            state = 24;
                            return ;
                        }
                        break;
                    case  32 :
                        if (("script" == ___local)&&("" == ___uri)) {
                            state = 33;
                            return ;
                        }
                        break;
                    case  8 :
                        if (("dual" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "dual");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText7(v);
                            state = 9;
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  33 :
                        attIdx = context.getAttribute("", "transliterated");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText8(v);
                            state = 36;
                            continue outer;
                        }
                        break;
                    case  2 :
                        if (("construct" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  35 :
                        if (("transliterated" == ___local)&&("" == ___uri)) {
                            state = 36;
                            return ;
                        }
                        break;
                    case  17 :
                        if (("inflectConstruct" == ___local)&&("" == ___uri)) {
                            state = 18;
                            return ;
                        }
                        break;
                    case  29 :
                        if (("possessive" == ___local)&&("" == ___uri)) {
                            state = 30;
                            return ;
                        }
                        break;
                    case  5 :
                        if (("dotted" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  11 :
                        if (("feminine" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                    case  36 :
                        attIdx = context.getAttribute("", "undotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText9(v);
                            state = 39;
                            continue outer;
                        }
                        break;
                    case  20 :
                        if (("inflectPossessive" == ___local)&&("" == ___uri)) {
                            state = 21;
                            return ;
                        }
                        break;
                    case  24 :
                        attIdx = context.getAttribute("", "plural");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText10(v);
                            state = 27;
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "inflectPossessive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText11(v);
                            state = 21;
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  40 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        attIdx = context.getAttribute("", "dotted");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText12(v);
                            state = 6;
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "gender");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText13(v);
                            state = 15;
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  26 :
                        if (("plural" == ___local)&&("" == ___uri)) {
                            state = 27;
                            return ;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  10 :
                            eatText4(value);
                            state = 11;
                            return ;
                        case  15 :
                            attIdx = context.getAttribute("", "inflectConstruct");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 18;
                                continue outer;
                            }
                            state = 18;
                            continue outer;
                        case  30 :
                            attIdx = context.getAttribute("", "script");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText2(v);
                                state = 33;
                                continue outer;
                            }
                            state = 33;
                            continue outer;
                        case  27 :
                            attIdx = context.getAttribute("", "possessive");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText3(v);
                                state = 30;
                                continue outer;
                            }
                            state = 30;
                            continue outer;
                        case  37 :
                            eatText9(value);
                            state = 38;
                            return ;
                        case  19 :
                            eatText11(value);
                            state = 20;
                            return ;
                        case  16 :
                            eatText1(value);
                            state = 17;
                            return ;
                        case  9 :
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText4(v);
                                state = 12;
                                continue outer;
                            }
                            state = 12;
                            continue outer;
                        case  21 :
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText5(v);
                                state = 24;
                                continue outer;
                            }
                            state = 24;
                            continue outer;
                        case  0 :
                            attIdx = context.getAttribute("", "construct");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText6(v);
                                state = 3;
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  7 :
                            eatText7(value);
                            state = 8;
                            return ;
                        case  6 :
                            attIdx = context.getAttribute("", "dual");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText7(v);
                                state = 9;
                                continue outer;
                            }
                            state = 9;
                            continue outer;
                        case  4 :
                            eatText12(value);
                            state = 5;
                            return ;
                        case  33 :
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText8(v);
                                state = 36;
                                continue outer;
                            }
                            break;
                        case  39 :
                            eatText14(value);
                            state = 40;
                            return ;
                        case  1 :
                            eatText6(value);
                            state = 2;
                            return ;
                        case  28 :
                            eatText3(value);
                            state = 29;
                            return ;
                        case  13 :
                            eatText13(value);
                            state = 14;
                            return ;
                        case  36 :
                            attIdx = context.getAttribute("", "undotted");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText9(v);
                                state = 39;
                                continue outer;
                            }
                            break;
                        case  24 :
                            attIdx = context.getAttribute("", "plural");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText10(v);
                                state = 27;
                                continue outer;
                            }
                            state = 27;
                            continue outer;
                        case  34 :
                            eatText8(value);
                            state = 35;
                            return ;
                        case  18 :
                            attIdx = context.getAttribute("", "inflectPossessive");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText11(v);
                                state = 21;
                                continue outer;
                            }
                            state = 21;
                            continue outer;
                        case  40 :
                            revertToParentFromText(value);
                            return ;
                        case  3 :
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText12(v);
                                state = 6;
                                continue outer;
                            }
                            state = 6;
                            continue outer;
                        case  22 :
                            eatText5(value);
                            state = 23;
                            return ;
                        case  31 :
                            eatText2(value);
                            state = 32;
                            return ;
                        case  12 :
                            attIdx = context.getAttribute("", "gender");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText13(v);
                                state = 15;
                                continue outer;
                            }
                            state = 15;
                            continue outer;
                        case  25 :
                            eatText10(value);
                            state = 26;
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText14(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Value = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
