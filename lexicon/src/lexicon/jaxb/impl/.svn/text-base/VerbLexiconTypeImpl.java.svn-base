//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.04.11 at 01:39:43 GMT+02:00 
//


package lexicon.jaxb.impl;

public class VerbLexiconTypeImpl implements lexicon.jaxb.VerbLexiconType, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
{

    protected java.lang.String _Feminine;
    protected java.lang.String _NoImperative;
    protected java.lang.String _NoBeinoni;
    protected java.lang.String _IpSource;
    protected java.lang.String _InflectionPattern;
    protected java.lang.String _NoFuture;
    protected java.lang.String _Valence;
    protected java.lang.String _NoPast;
    protected java.lang.String _Root;
    protected com.sun.xml.bind.util.ListImpl _AddOrReplaceOrRemove;
    protected java.lang.String _NoInfinitive;
    protected java.lang.String _Binyan;
    protected java.lang.String _NoOrigin;
    public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (lexicon.jaxb.VerbLexiconType.class);
    }

    public java.lang.String getFeminine() {
        if (_Feminine == null) {
            return "irrelevant";
        } else {
            return _Feminine;
        }
    }

    public void setFeminine(java.lang.String value) {
        _Feminine = value;
    }

    public java.lang.String getNoImperative() {
        if (_NoImperative == null) {
            return "unspecified";
        } else {
            return _NoImperative;
        }
    }

    public void setNoImperative(java.lang.String value) {
        _NoImperative = value;
    }

    public java.lang.String getNoBeinoni() {
        if (_NoBeinoni == null) {
            return "unspecified";
        } else {
            return _NoBeinoni;
        }
    }

    public void setNoBeinoni(java.lang.String value) {
        _NoBeinoni = value;
    }

    public java.lang.String getIpSource() {
        if (_IpSource == null) {
            return "Shlomo\'s morphological analyzer";
        } else {
            return _IpSource;
        }
    }

    public void setIpSource(java.lang.String value) {
        _IpSource = value;
    }

    public java.lang.String getInflectionPattern() {
        return _InflectionPattern;
    }

    public void setInflectionPattern(java.lang.String value) {
        _InflectionPattern = value;
    }

    public java.lang.String getNoFuture() {
        if (_NoFuture == null) {
            return "unspecified";
        } else {
            return _NoFuture;
        }
    }

    public void setNoFuture(java.lang.String value) {
        _NoFuture = value;
    }

    public java.lang.String getValence() {
        if (_Valence == null) {
            return "unspecified";
        } else {
            return _Valence;
        }
    }

    public void setValence(java.lang.String value) {
        _Valence = value;
    }

    public java.lang.String getNoPast() {
        if (_NoPast == null) {
            return "unspecified";
        } else {
            return _NoPast;
        }
    }

    public void setNoPast(java.lang.String value) {
        _NoPast = value;
    }

    public java.lang.String getRoot() {
        return _Root;
    }

    public void setRoot(java.lang.String value) {
        _Root = value;
    }

    protected com.sun.xml.bind.util.ListImpl _getAddOrReplaceOrRemove() {
        if (_AddOrReplaceOrRemove == null) {
            _AddOrReplaceOrRemove = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _AddOrReplaceOrRemove;
    }

    public java.util.List getAddOrReplaceOrRemove() {
        return _getAddOrReplaceOrRemove();
    }

    public java.lang.String getNoInfinitive() {
        if (_NoInfinitive == null) {
            return "unspecified";
        } else {
            return _NoInfinitive;
        }
    }

    public void setNoInfinitive(java.lang.String value) {
        _NoInfinitive = value;
    }

    public java.lang.String getBinyan() {
        if (_Binyan == null) {
            return "unspecified";
        } else {
            return _Binyan;
        }
    }

    public void setBinyan(java.lang.String value) {
        _Binyan = value;
    }

    public java.lang.String getNoOrigin() {
        if (_NoOrigin == null) {
            return "unspecified";
        } else {
            return _NoOrigin;
        }
    }

    public void setNoOrigin(java.lang.String value) {
        _NoOrigin = value;
    }

    public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
        return new lexicon.jaxb.impl.VerbLexiconTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx10 = 0;
        final int len10 = ((_AddOrReplaceOrRemove == null)? 0 :_AddOrReplaceOrRemove.size());
        while (idx10 != len10) {
            while (idx10 != len10) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove.get(idx10 ++)), "AddOrReplaceOrRemove");
            }
        }
    }

    public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx10 = 0;
        final int len10 = ((_AddOrReplaceOrRemove == null)? 0 :_AddOrReplaceOrRemove.size());
        if (_Binyan!= null) {
            context.startAttribute("", "binyan");
            try {
                context.text(((java.lang.String) _Binyan), "Binyan");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Feminine!= null) {
            context.startAttribute("", "feminine");
            try {
                context.text(((java.lang.String) _Feminine), "Feminine");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        context.startAttribute("", "inflectionPattern");
        try {
            context.text(((java.lang.String) _InflectionPattern), "InflectionPattern");
        } catch (java.lang.Exception e) {
            lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        if (_IpSource!= null) {
            context.startAttribute("", "ipSource");
            try {
                context.text(((java.lang.String) _IpSource), "IpSource");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_NoBeinoni!= null) {
            context.startAttribute("", "noBeinoni");
            try {
                context.text(((java.lang.String) _NoBeinoni), "NoBeinoni");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_NoFuture!= null) {
            context.startAttribute("", "noFuture");
            try {
                context.text(((java.lang.String) _NoFuture), "NoFuture");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_NoImperative!= null) {
            context.startAttribute("", "noImperative");
            try {
                context.text(((java.lang.String) _NoImperative), "NoImperative");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_NoInfinitive!= null) {
            context.startAttribute("", "noInfinitive");
            try {
                context.text(((java.lang.String) _NoInfinitive), "NoInfinitive");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_NoOrigin!= null) {
            context.startAttribute("", "noOrigin");
            try {
                context.text(((java.lang.String) _NoOrigin), "NoOrigin");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_NoPast!= null) {
            context.startAttribute("", "noPast");
            try {
                context.text(((java.lang.String) _NoPast), "NoPast");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        context.startAttribute("", "root");
        try {
            context.text(((java.lang.String) _Root), "Root");
        } catch (java.lang.Exception e) {
            lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        if (_Valence!= null) {
            context.startAttribute("", "valence");
            try {
                context.text(((java.lang.String) _Valence), "Valence");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        while (idx10 != len10) {
            while (idx10 != len10) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove.get(idx10 ++)), "AddOrReplaceOrRemove");
            }
        }
    }

    public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx10 = 0;
        final int len10 = ((_AddOrReplaceOrRemove == null)? 0 :_AddOrReplaceOrRemove.size());
        while (idx10 != len10) {
            while (idx10 != len10) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove.get(idx10 ++)), "AddOrReplaceOrRemove");
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (lexicon.jaxb.VerbLexiconType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000 com.sun."
+"msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.U"
+"naryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003ppsr\u0000\u001dcom.sun.msv.grammar"
+".ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\u0014ppsq\u0000~\u0000\u0014ppsq\u0000~\u0000\u0011sr\u0000\u0011java."
+"lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.sun.msv.grammar.t"
+"rex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/gra"
+"mmar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002"
+"Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u001a"
+"p\u0000sq\u0000~\u0000\u0014ppsq\u0000~\u0000\u0011q\u0000~\u0000\u001apsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u001cxq\u0000~\u0000\u0003q\u0000~\u0000\u001apsr\u00002com.sun"
+".msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003"
+"sq\u0000~\u0000\u0019\u0001q\u0000~\u0000$sr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
+"r\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv"
+".grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000%q"
+"\u0000~\u0000*sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tloc"
+"alNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000,xq\u0000~\u0000\'t\u0000 lexi"
+"con.jaxb.VerbLexiconType.Addt\u0000+http://java.sun.com/jaxb/xjc/"
+"dummy-elementsq\u0000~\u0000*sq\u0000~\u0000\u0011ppsq\u0000~\u0000\u001bpp\u0000sq\u0000~\u0000\u0014ppsq\u0000~\u0000\u0011q\u0000~\u0000\u001apsq\u0000~"
+"\u0000!q\u0000~\u0000\u001apq\u0000~\u0000$q\u0000~\u0000(q\u0000~\u0000*sq\u0000~\u0000+t\u0000$lexicon.jaxb.VerbLexiconType"
+".Replaceq\u0000~\u0000/sq\u0000~\u0000\u0011ppsq\u0000~\u0000\u001bpp\u0000sq\u0000~\u0000\u0014ppsq\u0000~\u0000\u0011q\u0000~\u0000\u001apsq\u0000~\u0000!q\u0000~\u0000"
+"\u001apq\u0000~\u0000$q\u0000~\u0000(q\u0000~\u0000*sq\u0000~\u0000+t\u0000#lexicon.jaxb.VerbLexiconType.Remov"
+"eq\u0000~\u0000/sq\u0000~\u0000\u0014ppsq\u0000~\u0000!q\u0000~\u0000\u001apsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000"
+"\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000)com.sun."
+"msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjav"
+"a/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataTypeWithValueCon"
+"straintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataType"
+"WithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bb"
+"aseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcre"
+"teTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetName"
+"q\u0000~\u0000,xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L"
+"\u0000\fnamespaceUriq\u0000~\u0000,L\u0000\btypeNameq\u0000~\u0000,L\u0000\nwhiteSpacet\u0000.Lcom/sun/"
+"msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000\u0000t\u0000\nBinyanTypesr\u00005c"
+"om.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0000xp\u0000\u0000sr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#c"
+"om.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysVali"
+"dxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr"
+"\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Jt\u0000 h"
+"ttp://www.w3.org/2001/XMLSchemat\u0000\u0005tokenq\u0000~\u0000Q\u0001q\u0000~\u0000Vt\u0000\u000benumera"
+"tionsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000bunspe"
+"cifiedt\u0000\u0006Nif\'alt\u0000\u0006Hif\'ilt\u0000\bHitpa\'elt\u0000\u0005Pa\'alt\u0000\u0006Huf\'alt\u0000\u0005Pu\'al"
+"t\u0000\u0005Pi\'elxsr\u00000com.sun.msv.grammar.Expression$NullSetExpressio"
+"n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002"
+"\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000,L\u0000\fnamespaceURIq\u0000~\u0000,xpq\u0000~\u0000Nq\u0000~\u0000Msq\u0000~\u0000+t\u0000\u0006"
+"binyanq\u0000~\u0000Mq\u0000~\u0000*sq\u0000~\u0000\u0014ppsq\u0000~\u0000!q\u0000~\u0000\u001apsq\u0000~\u0000@ppsq\u0000~\u0000Dq\u0000~\u0000Mt\u0000\fFe"
+"minineTypeq\u0000~\u0000Q\u0000\u0000q\u0000~\u0000Vq\u0000~\u0000Vq\u0000~\u0000Ysq\u0000~\u0000Zw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0005t\u0000\u000bunspe"
+"cifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001tt\u0000\nirrelevantxq\u0000~\u0000esq\u0000~\u0000fq\u0000~\u0000nq\u0000~\u0000Msq\u0000~\u0000+"
+"t\u0000\bfeminineq\u0000~\u0000Mq\u0000~\u0000*sq\u0000~\u0000!ppsq\u0000~\u0000@ppq\u0000~\u0000Vq\u0000~\u0000esq\u0000~\u0000fq\u0000~\u0000Xq\u0000"
+"~\u0000Wsq\u0000~\u0000+t\u0000\u0011inflectionPatternq\u0000~\u0000Msq\u0000~\u0000\u0014ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000ys"
+"q\u0000~\u0000+t\u0000\bipSourceq\u0000~\u0000Mq\u0000~\u0000*sq\u0000~\u0000\u0014ppsq\u0000~\u0000!q\u0000~\u0000\u001apsq\u0000~\u0000@ppsq\u0000~\u0000D"
+"q\u0000~\u0000Mt\u0000\fTriStateTypeq\u0000~\u0000Q\u0000\u0000q\u0000~\u0000Vq\u0000~\u0000Vq\u0000~\u0000Ysq\u0000~\u0000Zw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000"
+"\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004truet\u0000\u0005falsexq\u0000~\u0000esq\u0000~\u0000fq\u0000~\u0000\u0085q\u0000~\u0000Msq\u0000~\u0000+t"
+"\u0000\tnoBeinoniq\u0000~\u0000Mq\u0000~\u0000*sq\u0000~\u0000\u0014ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000\u0083sq\u0000~\u0000+t\u0000\bnoFut"
+"ureq\u0000~\u0000Mq\u0000~\u0000*sq\u0000~\u0000\u0014ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000\u0083sq\u0000~\u0000+t\u0000\fnoImperativeq"
+"\u0000~\u0000Mq\u0000~\u0000*sq\u0000~\u0000\u0014ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000\u0083sq\u0000~\u0000+t\u0000\fnoInfinitiveq\u0000~\u0000M"
+"q\u0000~\u0000*sq\u0000~\u0000\u0014ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000\u0083sq\u0000~\u0000+t\u0000\bnoOriginq\u0000~\u0000Mq\u0000~\u0000*sq\u0000"
+"~\u0000\u0014ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000\u0083sq\u0000~\u0000+t\u0000\u0006noPastq\u0000~\u0000Mq\u0000~\u0000*sq\u0000~\u0000!ppq\u0000~\u0000y"
+"sq\u0000~\u0000+t\u0000\u0004rootq\u0000~\u0000Msq\u0000~\u0000\u0014ppsq\u0000~\u0000!q\u0000~\u0000\u001apsq\u0000~\u0000@ppsq\u0000~\u0000Dq\u0000~\u0000Mt\u0000\u000b"
+"ValenceTypeq\u0000~\u0000Q\u0000\u0000q\u0000~\u0000Vq\u0000~\u0000Vq\u0000~\u0000Ysq\u0000~\u0000Zw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunsp"
+"ecifiedt\u0000\ntransitivet\u0000\fintransitivet\u0000\fditransitivexq\u0000~\u0000esq\u0000~"
+"\u0000fq\u0000~\u0000\u00a8q\u0000~\u0000Msq\u0000~\u0000+t\u0000\u0007valenceq\u0000~\u0000Mq\u0000~\u0000*sr\u0000\"com.sun.msv.gramma"
+"r.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/gramma"
+"r/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.Expres"
+"sionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006par"
+"entt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000#\u0001pq\u0000~\u0000\u000fq\u0000~\u0000\u009d"
+"q\u0000~\u0000\fq\u0000~\u0000\u0015q\u0000~\u0000\u0010q\u0000~\u0000\u0007q\u0000~\u0000\u0006q\u0000~\u0000\u001fq\u0000~\u00002q\u0000~\u00009q\u0000~\u0000\u0081q\u0000~\u0000\u0091q\u0000~\u0000\u008dq\u0000~\u0000}"
+"q\u0000~\u0000\bq\u0000~\u0000\u0016q\u0000~\u0000jq\u0000~\u0000\nq\u0000~\u0000 q\u0000~\u00003q\u0000~\u0000:q\u0000~\u0000\u0005q\u0000~\u0000\rq\u0000~\u0000\u0018q\u0000~\u0000\u0017q\u0000~\u00000"
+"q\u0000~\u00007q\u0000~\u0000>q\u0000~\u0000\u0099q\u0000~\u0000\u00a4q\u0000~\u0000\u000bq\u0000~\u0000\u000eq\u0000~\u0000\u0013q\u0000~\u0000\u0095q\u0000~\u0000\tx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public static class AddImpl
        extends lexicon.jaxb.impl.VerbExceptionTypeImpl
        implements lexicon.jaxb.VerbLexiconType.Add, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
    {

        public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
        private static com.sun.msv.grammar.Grammar schemaFragment;

        private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
            return (lexicon.jaxb.VerbLexiconType.Add.class);
        }

        public java.lang.String ____jaxb_ri____getNamespaceURI() {
            return "";
        }

        public java.lang.String ____jaxb_ri____getLocalName() {
            return "add";
        }

        public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            return new lexicon.jaxb.impl.VerbLexiconTypeImpl.AddImpl.Unmarshaller(context);
        }

        public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
            context.startElement("", "add");
            super.serializeURIs(context);
            context.endNamespaceDecls();
            super.serializeAttributes(context);
            context.endAttributes();
            super.serializeBody(context);
            context.endElement();
        }

        public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public java.lang.Class getPrimaryInterface() {
            return (lexicon.jaxb.VerbLexiconType.Add.class);
        }

        public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
            if (schemaFragment == null) {
                schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.gramm"
+"ar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;"
+"L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004p"
+"psr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.su"
+"n.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*"
+"com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com"
+".sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv"
+".datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Lja"
+"va/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001aL\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/"
+"datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001"
+"/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpacePro"
+"cessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.White"
+"SpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expressi"
+"on$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util."
+"StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axp"
+"q\u0000~\u0000\u001eq\u0000~\u0000\u001dsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\b"
+"ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003"
+"L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005va"
+"luexp\u0000psq\u0000~\u0000\u0011ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.dataty"
+"pe.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.su"
+"n.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFix"
+"edZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/x"
+"sd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xs"
+"d/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u001axq\u0000~\u0000\u0019t\u0000\u0000t\u0000\u0007PGNTypeq\u0000~\u0000!\u0000\u0000q\u0000"
+"~\u0000\u001cq\u0000~\u0000\u001ct\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000"
+"\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u000ft\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p"
+"/M/Plt\u0000\u00072p/M/Sgt\u0000\u00073p/F/Plt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/P"
+"lt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000#"
+"sq\u0000~\u0000$q\u0000~\u00005q\u0000~\u00004sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axr\u0000\u001dcom.sun.msv.g"
+"rammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0010accusativeSuffixq\u0000~\u00004sr\u00000com"
+".sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~"
+"\u0000\u0004sq\u0000~\u0000*\u0001q\u0000~\u0000Nsq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+pq\u0000~\u0000\u0014sq\u0000~\u0000It\u0000\u0006dottedq\u0000~\u00004q"
+"\u0000~\u0000Nsq\u0000~\u0000(ppq\u0000~\u0000,sq\u0000~\u0000It\u0000\u0003pgnq\u0000~\u00004sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+psq\u0000~\u0000\u0011"
+"ppsq\u0000~\u0000-q\u0000~\u00004t\u0000\nScriptTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001cq\u0000~\u00006sq\u0000~\u00007w\f\u0000\u0000\u0000\u0010"
+"?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000#sq\u0000~\u0000$q\u0000~"
+"\u0000[q\u0000~\u00004sq\u0000~\u0000It\u0000\u0006scriptq\u0000~\u00004q\u0000~\u0000Nsq\u0000~\u0000(ppsq\u0000~\u0000\u0011ppsq\u0000~\u0000-q\u0000~\u00004t"
+"\u0000\tTenseTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001cq\u0000~\u00006sq\u0000~\u00007w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u0004past"
+"t\u0000\nimperativet\u0000\u0007beinonit\u0000\ninfinitivet\u0000\u0006futuret\u0000\u0006originxq\u0000~\u0000#"
+"sq\u0000~\u0000$q\u0000~\u0000gq\u0000~\u00004sq\u0000~\u0000It\u0000\u0005tenseq\u0000~\u00004sq\u0000~\u0000(ppq\u0000~\u0000\u0014sq\u0000~\u0000It\u0000\u000etra"
+"nsliteratedq\u0000~\u00004sq\u0000~\u0000(ppq\u0000~\u0000\u0014sq\u0000~\u0000It\u0000\bundottedq\u0000~\u00004sq\u0000~\u0000&pps"
+"q\u0000~\u0000(q\u0000~\u0000+psq\u0000~\u0000\u0011ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0017q\u0000~\u0000\u001dt\u0000\u0005QNameq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000}q\u0000~\u0000\u001dsq\u0000~\u0000It"
+"\u0000\u0004typet\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000Nsq\u0000~\u0000"
+"It\u0000\u0003addq\u0000~\u00004sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHas"
+"h;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed"
+"\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar"
+"/ExpressionPool;xp\u0000\u0000\u0000\f\u0001pq\u0000~\u0000\tq\u0000~\u0000Wq\u0000~\u0000Pq\u0000~\u0000xq\u0000~\u0000\u0010q\u0000~\u0000\u000bq\u0000~\u0000\u000eq"
+"\u0000~\u0000\fq\u0000~\u0000\'q\u0000~\u0000\rq\u0000~\u0000\nq\u0000~\u0000\u000fx"));
            }
            return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
        }

        public class Unmarshaller
            extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
        {


            public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
                super(context, "----");
            }

            protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
                this(context);
                state = startState;
            }

            public java.lang.Object owner() {
                return lexicon.jaxb.impl.VerbLexiconTypeImpl.AddImpl.this;
            }

            public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "accusativeSuffix");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        case  0 :
                            if (("add" == ___local)&&("" == ___uri)) {
                                context.pushAttributes(__atts, true);
                                state = 1;
                                return ;
                            }
                            break;
                    }
                    super.enterElement(___uri, ___local, ___qname, __atts);
                    break;
                }
            }

            public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "accusativeSuffix");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  2 :
                            if (("add" == ___local)&&("" == ___uri)) {
                                context.popAttributes();
                                state = 3;
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromLeaveElement(___uri, ___local, ___qname);
                            return ;
                    }
                    super.leaveElement(___uri, ___local, ___qname);
                    break;
                }
            }

            public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            if (("accusativeSuffix" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.VerbExceptionTypeImpl)lexicon.jaxb.impl.VerbLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dotted" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.VerbExceptionTypeImpl)lexicon.jaxb.impl.VerbLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("pgn" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.VerbExceptionTypeImpl)lexicon.jaxb.impl.VerbLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                            return ;
                    }
                    super.enterAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "accusativeSuffix");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                            return ;
                    }
                    super.leaveAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void handleText(final java.lang.String value)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    try {
                        switch (state) {
                            case  1 :
                                attIdx = context.getAttribute("", "accusativeSuffix");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dotted");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "pgn");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                break;
                            case  3 :
                                revertToParentFromText(value);
                                return ;
                        }
                    } catch (java.lang.RuntimeException e) {
                        handleUnexpectedTextException(value, e);
                    }
                    break;
                }
            }

        }

    }

    public static class RemoveImpl
        extends lexicon.jaxb.impl.VerbExceptionTypeImpl
        implements lexicon.jaxb.VerbLexiconType.Remove, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
    {

        public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
        private static com.sun.msv.grammar.Grammar schemaFragment;

        private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
            return (lexicon.jaxb.VerbLexiconType.Remove.class);
        }

        public java.lang.String ____jaxb_ri____getNamespaceURI() {
            return "";
        }

        public java.lang.String ____jaxb_ri____getLocalName() {
            return "remove";
        }

        public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            return new lexicon.jaxb.impl.VerbLexiconTypeImpl.RemoveImpl.Unmarshaller(context);
        }

        public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
            context.startElement("", "remove");
            super.serializeURIs(context);
            context.endNamespaceDecls();
            super.serializeAttributes(context);
            context.endAttributes();
            super.serializeBody(context);
            context.endElement();
        }

        public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public java.lang.Class getPrimaryInterface() {
            return (lexicon.jaxb.VerbLexiconType.Remove.class);
        }

        public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
            if (schemaFragment == null) {
                schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.gramm"
+"ar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;"
+"L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004p"
+"psr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.su"
+"n.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*"
+"com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com"
+".sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv"
+".datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Lja"
+"va/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001aL\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/"
+"datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001"
+"/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpacePro"
+"cessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.White"
+"SpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expressi"
+"on$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util."
+"StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axp"
+"q\u0000~\u0000\u001eq\u0000~\u0000\u001dsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\b"
+"ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003"
+"L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005va"
+"luexp\u0000psq\u0000~\u0000\u0011ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.dataty"
+"pe.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.su"
+"n.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFix"
+"edZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/x"
+"sd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xs"
+"d/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u001axq\u0000~\u0000\u0019t\u0000\u0000t\u0000\u0007PGNTypeq\u0000~\u0000!\u0000\u0000q\u0000"
+"~\u0000\u001cq\u0000~\u0000\u001ct\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000"
+"\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u000ft\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p"
+"/M/Plt\u0000\u00072p/M/Sgt\u0000\u00073p/F/Plt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/P"
+"lt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000#"
+"sq\u0000~\u0000$q\u0000~\u00005q\u0000~\u00004sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axr\u0000\u001dcom.sun.msv.g"
+"rammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0010accusativeSuffixq\u0000~\u00004sr\u00000com"
+".sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~"
+"\u0000\u0004sq\u0000~\u0000*\u0001q\u0000~\u0000Nsq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+pq\u0000~\u0000\u0014sq\u0000~\u0000It\u0000\u0006dottedq\u0000~\u00004q"
+"\u0000~\u0000Nsq\u0000~\u0000(ppq\u0000~\u0000,sq\u0000~\u0000It\u0000\u0003pgnq\u0000~\u00004sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+psq\u0000~\u0000\u0011"
+"ppsq\u0000~\u0000-q\u0000~\u00004t\u0000\nScriptTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001cq\u0000~\u00006sq\u0000~\u00007w\f\u0000\u0000\u0000\u0010"
+"?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000#sq\u0000~\u0000$q\u0000~"
+"\u0000[q\u0000~\u00004sq\u0000~\u0000It\u0000\u0006scriptq\u0000~\u00004q\u0000~\u0000Nsq\u0000~\u0000(ppsq\u0000~\u0000\u0011ppsq\u0000~\u0000-q\u0000~\u00004t"
+"\u0000\tTenseTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001cq\u0000~\u00006sq\u0000~\u00007w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u0004past"
+"t\u0000\nimperativet\u0000\u0007beinonit\u0000\ninfinitivet\u0000\u0006futuret\u0000\u0006originxq\u0000~\u0000#"
+"sq\u0000~\u0000$q\u0000~\u0000gq\u0000~\u00004sq\u0000~\u0000It\u0000\u0005tenseq\u0000~\u00004sq\u0000~\u0000(ppq\u0000~\u0000\u0014sq\u0000~\u0000It\u0000\u000etra"
+"nsliteratedq\u0000~\u00004sq\u0000~\u0000(ppq\u0000~\u0000\u0014sq\u0000~\u0000It\u0000\bundottedq\u0000~\u00004sq\u0000~\u0000&pps"
+"q\u0000~\u0000(q\u0000~\u0000+psq\u0000~\u0000\u0011ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0017q\u0000~\u0000\u001dt\u0000\u0005QNameq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000}q\u0000~\u0000\u001dsq\u0000~\u0000It"
+"\u0000\u0004typet\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000Nsq\u0000~\u0000"
+"It\u0000\u0006removeq\u0000~\u00004sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$Closed"
+"Hash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N"
+"\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/gram"
+"mar/ExpressionPool;xp\u0000\u0000\u0000\f\u0001pq\u0000~\u0000\tq\u0000~\u0000Wq\u0000~\u0000Pq\u0000~\u0000xq\u0000~\u0000\u0010q\u0000~\u0000\u000bq\u0000~"
+"\u0000\u000eq\u0000~\u0000\fq\u0000~\u0000\'q\u0000~\u0000\rq\u0000~\u0000\nq\u0000~\u0000\u000fx"));
            }
            return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
        }

        public class Unmarshaller
            extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
        {


            public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
                super(context, "----");
            }

            protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
                this(context);
                state = startState;
            }

            public java.lang.Object owner() {
                return lexicon.jaxb.impl.VerbLexiconTypeImpl.RemoveImpl.this;
            }

            public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  0 :
                            if (("remove" == ___local)&&("" == ___uri)) {
                                context.pushAttributes(__atts, true);
                                state = 1;
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "accusativeSuffix");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            break;
                    }
                    super.enterElement(___uri, ___local, ___qname, __atts);
                    break;
                }
            }

            public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  2 :
                            if (("remove" == ___local)&&("" == ___uri)) {
                                context.popAttributes();
                                state = 3;
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromLeaveElement(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "accusativeSuffix");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.leaveElement(___uri, ___local, ___qname);
                    break;
                }
            }

            public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            if (("accusativeSuffix" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.VerbExceptionTypeImpl)lexicon.jaxb.impl.VerbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dotted" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.VerbExceptionTypeImpl)lexicon.jaxb.impl.VerbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("pgn" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.VerbExceptionTypeImpl)lexicon.jaxb.impl.VerbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.enterAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "accusativeSuffix");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.leaveAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void handleText(final java.lang.String value)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    try {
                        switch (state) {
                            case  3 :
                                revertToParentFromText(value);
                                return ;
                            case  1 :
                                attIdx = context.getAttribute("", "accusativeSuffix");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dotted");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "pgn");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                break;
                        }
                    } catch (java.lang.RuntimeException e) {
                        handleUnexpectedTextException(value, e);
                    }
                    break;
                }
            }

        }

    }

    public static class ReplaceImpl
        extends lexicon.jaxb.impl.VerbExceptionTypeImpl
        implements lexicon.jaxb.VerbLexiconType.Replace, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
    {

        public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
        private static com.sun.msv.grammar.Grammar schemaFragment;

        private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
            return (lexicon.jaxb.VerbLexiconType.Replace.class);
        }

        public java.lang.String ____jaxb_ri____getNamespaceURI() {
            return "";
        }

        public java.lang.String ____jaxb_ri____getLocalName() {
            return "replace";
        }

        public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            return new lexicon.jaxb.impl.VerbLexiconTypeImpl.ReplaceImpl.Unmarshaller(context);
        }

        public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
            context.startElement("", "replace");
            super.serializeURIs(context);
            context.endNamespaceDecls();
            super.serializeAttributes(context);
            context.endAttributes();
            super.serializeBody(context);
            context.endElement();
        }

        public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public java.lang.Class getPrimaryInterface() {
            return (lexicon.jaxb.VerbLexiconType.Replace.class);
        }

        public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
            if (schemaFragment == null) {
                schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.gramm"
+"ar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;"
+"L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004p"
+"psr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.su"
+"n.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*"
+"com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com"
+".sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv"
+".datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Lja"
+"va/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001aL\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/"
+"datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001"
+"/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpacePro"
+"cessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.White"
+"SpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expressi"
+"on$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util."
+"StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axp"
+"q\u0000~\u0000\u001eq\u0000~\u0000\u001dsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\b"
+"ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003"
+"L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005va"
+"luexp\u0000psq\u0000~\u0000\u0011ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.dataty"
+"pe.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.su"
+"n.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFix"
+"edZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/x"
+"sd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xs"
+"d/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u001axq\u0000~\u0000\u0019t\u0000\u0000t\u0000\u0007PGNTypeq\u0000~\u0000!\u0000\u0000q\u0000"
+"~\u0000\u001cq\u0000~\u0000\u001ct\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000"
+"\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u000ft\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p"
+"/M/Plt\u0000\u00072p/M/Sgt\u0000\u00073p/F/Plt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/P"
+"lt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000#"
+"sq\u0000~\u0000$q\u0000~\u00005q\u0000~\u00004sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axr\u0000\u001dcom.sun.msv.g"
+"rammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0010accusativeSuffixq\u0000~\u00004sr\u00000com"
+".sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~"
+"\u0000\u0004sq\u0000~\u0000*\u0001q\u0000~\u0000Nsq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+pq\u0000~\u0000\u0014sq\u0000~\u0000It\u0000\u0006dottedq\u0000~\u00004q"
+"\u0000~\u0000Nsq\u0000~\u0000(ppq\u0000~\u0000,sq\u0000~\u0000It\u0000\u0003pgnq\u0000~\u00004sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+psq\u0000~\u0000\u0011"
+"ppsq\u0000~\u0000-q\u0000~\u00004t\u0000\nScriptTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001cq\u0000~\u00006sq\u0000~\u00007w\f\u0000\u0000\u0000\u0010"
+"?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000#sq\u0000~\u0000$q\u0000~"
+"\u0000[q\u0000~\u00004sq\u0000~\u0000It\u0000\u0006scriptq\u0000~\u00004q\u0000~\u0000Nsq\u0000~\u0000(ppsq\u0000~\u0000\u0011ppsq\u0000~\u0000-q\u0000~\u00004t"
+"\u0000\tTenseTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001cq\u0000~\u00006sq\u0000~\u00007w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u0004past"
+"t\u0000\nimperativet\u0000\u0007beinonit\u0000\ninfinitivet\u0000\u0006futuret\u0000\u0006originxq\u0000~\u0000#"
+"sq\u0000~\u0000$q\u0000~\u0000gq\u0000~\u00004sq\u0000~\u0000It\u0000\u0005tenseq\u0000~\u00004sq\u0000~\u0000(ppq\u0000~\u0000\u0014sq\u0000~\u0000It\u0000\u000etra"
+"nsliteratedq\u0000~\u00004sq\u0000~\u0000(ppq\u0000~\u0000\u0014sq\u0000~\u0000It\u0000\bundottedq\u0000~\u00004sq\u0000~\u0000&pps"
+"q\u0000~\u0000(q\u0000~\u0000+psq\u0000~\u0000\u0011ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0017q\u0000~\u0000\u001dt\u0000\u0005QNameq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000}q\u0000~\u0000\u001dsq\u0000~\u0000It"
+"\u0000\u0004typet\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000Nsq\u0000~\u0000"
+"It\u0000\u0007replaceq\u0000~\u00004sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$Close"
+"dHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0"
+"N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/gra"
+"mmar/ExpressionPool;xp\u0000\u0000\u0000\f\u0001pq\u0000~\u0000\tq\u0000~\u0000Wq\u0000~\u0000Pq\u0000~\u0000xq\u0000~\u0000\u0010q\u0000~\u0000\u000bq\u0000"
+"~\u0000\u000eq\u0000~\u0000\fq\u0000~\u0000\'q\u0000~\u0000\rq\u0000~\u0000\nq\u0000~\u0000\u000fx"));
            }
            return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
        }

        public class Unmarshaller
            extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
        {


            public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
                super(context, "----");
            }

            protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
                this(context);
                state = startState;
            }

            public java.lang.Object owner() {
                return lexicon.jaxb.impl.VerbLexiconTypeImpl.ReplaceImpl.this;
            }

            public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "accusativeSuffix");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            break;
                        case  0 :
                            if (("replace" == ___local)&&("" == ___uri)) {
                                context.pushAttributes(__atts, true);
                                state = 1;
                                return ;
                            }
                            break;
                    }
                    super.enterElement(___uri, ___local, ___qname, __atts);
                    break;
                }
            }

            public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromLeaveElement(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "accusativeSuffix");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  2 :
                            if (("replace" == ___local)&&("" == ___uri)) {
                                context.popAttributes();
                                state = 3;
                                return ;
                            }
                            break;
                    }
                    super.leaveElement(___uri, ___local, ___qname);
                    break;
                }
            }

            public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            if (("accusativeSuffix" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.VerbExceptionTypeImpl)lexicon.jaxb.impl.VerbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dotted" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.VerbExceptionTypeImpl)lexicon.jaxb.impl.VerbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("pgn" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.VerbExceptionTypeImpl)lexicon.jaxb.impl.VerbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.enterAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "accusativeSuffix");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "pgn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.leaveAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void handleText(final java.lang.String value)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    try {
                        switch (state) {
                            case  3 :
                                revertToParentFromText(value);
                                return ;
                            case  1 :
                                attIdx = context.getAttribute("", "accusativeSuffix");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dotted");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "pgn");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                break;
                        }
                    } catch (java.lang.RuntimeException e) {
                        handleUnexpectedTextException(value, e);
                    }
                    break;
                }
            }

        }

    }

    public class Unmarshaller
        extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            super(context, "--------------------------------------");
        }

        protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return lexicon.jaxb.impl.VerbLexiconTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "binyan");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "ipSource");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 6;
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  15 :
                        attIdx = context.getAttribute("", "noFuture");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 18;
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 9;
                            continue outer;
                        }
                        break;
                    case  33 :
                        attIdx = context.getAttribute("", "valence");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 36;
                            continue outer;
                        }
                        state = 36;
                        continue outer;
                    case  30 :
                        attIdx = context.getAttribute("", "root");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText7(v);
                            state = 33;
                            continue outer;
                        }
                        break;
                    case  21 :
                        attIdx = context.getAttribute("", "noInfinitive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText8(v);
                            state = 24;
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  37 :
                        if (("add" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.VerbLexiconTypeImpl.AddImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.VerbLexiconTypeImpl.AddImpl.class), 37, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.VerbLexiconTypeImpl.ReplaceImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.VerbLexiconTypeImpl.ReplaceImpl.class), 37, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.VerbLexiconTypeImpl.RemoveImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.VerbLexiconTypeImpl.RemoveImpl.class), 37, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  12 :
                        attIdx = context.getAttribute("", "noBeinoni");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText9(v);
                            state = 15;
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "noImperative");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText10(v);
                            state = 21;
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  27 :
                        attIdx = context.getAttribute("", "noPast");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText11(v);
                            state = 30;
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "noOrigin");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText12(v);
                            state = 27;
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  36 :
                        if (("add" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.VerbLexiconTypeImpl.AddImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.VerbLexiconTypeImpl.AddImpl.class), 37, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.VerbLexiconTypeImpl.ReplaceImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.VerbLexiconTypeImpl.ReplaceImpl.class), 37, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.VerbLexiconTypeImpl.RemoveImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.VerbLexiconTypeImpl.RemoveImpl.class), 37, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 37;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Binyan = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _IpSource = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Feminine = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _NoFuture = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _InflectionPattern = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Valence = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Root = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText8(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _NoInfinitive = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText9(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _NoBeinoni = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText10(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _NoImperative = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText11(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _NoPast = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText12(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _NoOrigin = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "binyan");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "ipSource");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 6;
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  15 :
                        attIdx = context.getAttribute("", "noFuture");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 18;
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 9;
                            continue outer;
                        }
                        break;
                    case  33 :
                        attIdx = context.getAttribute("", "valence");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 36;
                            continue outer;
                        }
                        state = 36;
                        continue outer;
                    case  30 :
                        attIdx = context.getAttribute("", "root");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText7(v);
                            state = 33;
                            continue outer;
                        }
                        break;
                    case  21 :
                        attIdx = context.getAttribute("", "noInfinitive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText8(v);
                            state = 24;
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  37 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  12 :
                        attIdx = context.getAttribute("", "noBeinoni");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText9(v);
                            state = 15;
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "noImperative");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText10(v);
                            state = 21;
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  27 :
                        attIdx = context.getAttribute("", "noPast");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText11(v);
                            state = 30;
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "noOrigin");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText12(v);
                            state = 27;
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  36 :
                        state = 37;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        if (("binyan" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  9 :
                        if (("ipSource" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  3 :
                        if (("feminine" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  15 :
                        if (("noFuture" == ___local)&&("" == ___uri)) {
                            state = 16;
                            return ;
                        }
                        state = 18;
                        continue outer;
                    case  6 :
                        if (("inflectionPattern" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        break;
                    case  33 :
                        if (("valence" == ___local)&&("" == ___uri)) {
                            state = 34;
                            return ;
                        }
                        state = 36;
                        continue outer;
                    case  30 :
                        if (("root" == ___local)&&("" == ___uri)) {
                            state = 31;
                            return ;
                        }
                        break;
                    case  21 :
                        if (("noInfinitive" == ___local)&&("" == ___uri)) {
                            state = 22;
                            return ;
                        }
                        state = 24;
                        continue outer;
                    case  37 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  12 :
                        if (("noBeinoni" == ___local)&&("" == ___uri)) {
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                    case  18 :
                        if (("noImperative" == ___local)&&("" == ___uri)) {
                            state = 19;
                            return ;
                        }
                        state = 21;
                        continue outer;
                    case  27 :
                        if (("noPast" == ___local)&&("" == ___uri)) {
                            state = 28;
                            return ;
                        }
                        state = 30;
                        continue outer;
                    case  24 :
                        if (("noOrigin" == ___local)&&("" == ___uri)) {
                            state = 25;
                            return ;
                        }
                        state = 27;
                        continue outer;
                    case  36 :
                        state = 37;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "binyan");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  17 :
                        if (("noFuture" == ___local)&&("" == ___uri)) {
                            state = 18;
                            return ;
                        }
                        break;
                    case  9 :
                        attIdx = context.getAttribute("", "ipSource");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "feminine");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 6;
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  11 :
                        if (("ipSource" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                    case  14 :
                        if (("noBeinoni" == ___local)&&("" == ___uri)) {
                            state = 15;
                            return ;
                        }
                        break;
                    case  15 :
                        attIdx = context.getAttribute("", "noFuture");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 18;
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  23 :
                        if (("noInfinitive" == ___local)&&("" == ___uri)) {
                            state = 24;
                            return ;
                        }
                        break;
                    case  2 :
                        if (("binyan" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "inflectionPattern");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 9;
                            continue outer;
                        }
                        break;
                    case  5 :
                        if (("feminine" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  33 :
                        attIdx = context.getAttribute("", "valence");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 36;
                            continue outer;
                        }
                        state = 36;
                        continue outer;
                    case  20 :
                        if (("noImperative" == ___local)&&("" == ___uri)) {
                            state = 21;
                            return ;
                        }
                        break;
                    case  35 :
                        if (("valence" == ___local)&&("" == ___uri)) {
                            state = 36;
                            return ;
                        }
                        break;
                    case  30 :
                        attIdx = context.getAttribute("", "root");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText7(v);
                            state = 33;
                            continue outer;
                        }
                        break;
                    case  8 :
                        if (("inflectionPattern" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  21 :
                        attIdx = context.getAttribute("", "noInfinitive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText8(v);
                            state = 24;
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  37 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  26 :
                        if (("noOrigin" == ___local)&&("" == ___uri)) {
                            state = 27;
                            return ;
                        }
                        break;
                    case  12 :
                        attIdx = context.getAttribute("", "noBeinoni");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText9(v);
                            state = 15;
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "noImperative");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText10(v);
                            state = 21;
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  32 :
                        if (("root" == ___local)&&("" == ___uri)) {
                            state = 33;
                            return ;
                        }
                        break;
                    case  27 :
                        attIdx = context.getAttribute("", "noPast");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText11(v);
                            state = 30;
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "noOrigin");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText12(v);
                            state = 27;
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  29 :
                        if (("noPast" == ___local)&&("" == ___uri)) {
                            state = 30;
                            return ;
                        }
                        break;
                    case  36 :
                        state = 37;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  0 :
                            attIdx = context.getAttribute("", "binyan");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 3;
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  10 :
                            eatText2(value);
                            state = 11;
                            return ;
                        case  34 :
                            eatText6(value);
                            state = 35;
                            return ;
                        case  22 :
                            eatText8(value);
                            state = 23;
                            return ;
                        case  19 :
                            eatText10(value);
                            state = 20;
                            return ;
                        case  28 :
                            eatText11(value);
                            state = 29;
                            return ;
                        case  9 :
                            attIdx = context.getAttribute("", "ipSource");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText2(v);
                                state = 12;
                                continue outer;
                            }
                            state = 12;
                            continue outer;
                        case  3 :
                            attIdx = context.getAttribute("", "feminine");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText3(v);
                                state = 6;
                                continue outer;
                            }
                            state = 6;
                            continue outer;
                        case  25 :
                            eatText12(value);
                            state = 26;
                            return ;
                        case  15 :
                            attIdx = context.getAttribute("", "noFuture");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText4(v);
                                state = 18;
                                continue outer;
                            }
                            state = 18;
                            continue outer;
                        case  4 :
                            eatText3(value);
                            state = 5;
                            return ;
                        case  6 :
                            attIdx = context.getAttribute("", "inflectionPattern");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText5(v);
                                state = 9;
                                continue outer;
                            }
                            break;
                        case  31 :
                            eatText7(value);
                            state = 32;
                            return ;
                        case  33 :
                            attIdx = context.getAttribute("", "valence");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText6(v);
                                state = 36;
                                continue outer;
                            }
                            state = 36;
                            continue outer;
                        case  16 :
                            eatText4(value);
                            state = 17;
                            return ;
                        case  13 :
                            eatText9(value);
                            state = 14;
                            return ;
                        case  30 :
                            attIdx = context.getAttribute("", "root");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText7(v);
                                state = 33;
                                continue outer;
                            }
                            break;
                        case  21 :
                            attIdx = context.getAttribute("", "noInfinitive");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText8(v);
                                state = 24;
                                continue outer;
                            }
                            state = 24;
                            continue outer;
                        case  37 :
                            revertToParentFromText(value);
                            return ;
                        case  7 :
                            eatText5(value);
                            state = 8;
                            return ;
                        case  12 :
                            attIdx = context.getAttribute("", "noBeinoni");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText9(v);
                                state = 15;
                                continue outer;
                            }
                            state = 15;
                            continue outer;
                        case  18 :
                            attIdx = context.getAttribute("", "noImperative");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText10(v);
                                state = 21;
                                continue outer;
                            }
                            state = 21;
                            continue outer;
                        case  1 :
                            eatText1(value);
                            state = 2;
                            return ;
                        case  27 :
                            attIdx = context.getAttribute("", "noPast");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText11(v);
                                state = 30;
                                continue outer;
                            }
                            state = 30;
                            continue outer;
                        case  24 :
                            attIdx = context.getAttribute("", "noOrigin");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText12(v);
                                state = 27;
                                continue outer;
                            }
                            state = 27;
                            continue outer;
                        case  36 :
                            state = 37;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
