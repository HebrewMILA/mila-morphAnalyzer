//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.01.03 at 11:50:20 AM IST 
//

package lexicon.jaxb.impl;

public class MultiWordNounAdjectiveLexiconTypeImpl implements
		lexicon.jaxb.MultiWordNounAdjectiveLexiconType,
		com.sun.xml.bind.JAXBObject,
		lexicon.jaxb.impl.runtime.UnmarshallableObject,
		lexicon.jaxb.impl.runtime.XMLSerializable,
		lexicon.jaxb.impl.runtime.ValidatableObject {

	protected java.lang.String _Type;
	protected boolean has_InflectPossessiveS;
	protected boolean _InflectPossessiveS;
	protected java.lang.String _Gender;
	protected java.lang.String _PluralMaleAdjective;
	protected java.lang.String _PluralFemaleAdjective;
	protected java.lang.String _PluralFemaleNoun;
	protected java.lang.String _MwPos;
	protected java.lang.String _Definiteness;
	protected boolean has_Consecutive;
	protected boolean _Consecutive;
	protected java.lang.String _Number;
	protected java.lang.String _PluralMaleNoun;
	protected java.lang.String _FeminineNoun;
	protected boolean has_InflectPossessiveP;
	protected boolean _InflectPossessiveP;
	protected java.lang.String _InflectionBase;
	protected com.sun.xml.bind.util.ListImpl _AddOrReplaceOrRemove;
	protected java.lang.String _FeminineAdjective;
	public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (lexicon.jaxb.MultiWordNounAdjectiveLexiconType.class);
	}

	public java.lang.String getType() {
		if (_Type == null) {
			return "NN";
		} else {
			return _Type;
		}
	}

	public void setType(java.lang.String value) {
		_Type = value;
	}

	public boolean isInflectPossessiveS() {
		if (!has_InflectPossessiveS) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("false"));
		} else {
			return _InflectPossessiveS;
		}
	}

	public void setInflectPossessiveS(boolean value) {
		_InflectPossessiveS = value;
		has_InflectPossessiveS = true;
	}

	public java.lang.String getGender() {
		if (_Gender == null) {
			return "unspecified";
		} else {
			return _Gender;
		}
	}

	public void setGender(java.lang.String value) {
		_Gender = value;
	}

	public java.lang.String getPluralMaleAdjective() {
		if (_PluralMaleAdjective == null) {
			return "im";
		} else {
			return _PluralMaleAdjective;
		}
	}

	public void setPluralMaleAdjective(java.lang.String value) {
		_PluralMaleAdjective = value;
	}

	public java.lang.String getPluralFemaleAdjective() {
		if (_PluralFemaleAdjective == null) {
			return "wt";
		} else {
			return _PluralFemaleAdjective;
		}
	}

	public void setPluralFemaleAdjective(java.lang.String value) {
		_PluralFemaleAdjective = value;
	}

	public java.lang.String getPluralFemaleNoun() {
		if (_PluralFemaleNoun == null) {
			return "wt";
		} else {
			return _PluralFemaleNoun;
		}
	}

	public void setPluralFemaleNoun(java.lang.String value) {
		_PluralFemaleNoun = value;
	}

	public java.lang.String getMwPos() {
		if (_MwPos == null) {
			return "noun";
		} else {
			return _MwPos;
		}
	}

	public void setMwPos(java.lang.String value) {
		_MwPos = value;
	}

	public java.lang.String getDefiniteness() {
		if (_Definiteness == null) {
			return "external";
		} else {
			return _Definiteness;
		}
	}

	public void setDefiniteness(java.lang.String value) {
		_Definiteness = value;
	}

	public boolean isConsecutive() {
		if (!has_Consecutive) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _Consecutive;
		}
	}

	public void setConsecutive(boolean value) {
		_Consecutive = value;
		has_Consecutive = true;
	}

	public java.lang.String getNumber() {
		if (_Number == null) {
			return "unspecified";
		} else {
			return _Number;
		}
	}

	public void setNumber(java.lang.String value) {
		_Number = value;
	}

	public java.lang.String getPluralMaleNoun() {
		if (_PluralMaleNoun == null) {
			return "im";
		} else {
			return _PluralMaleNoun;
		}
	}

	public void setPluralMaleNoun(java.lang.String value) {
		_PluralMaleNoun = value;
	}

	public java.lang.String getFeminineNoun() {
		if (_FeminineNoun == null) {
			return "unspecified";
		} else {
			return _FeminineNoun;
		}
	}

	public void setFeminineNoun(java.lang.String value) {
		_FeminineNoun = value;
	}

	public boolean isInflectPossessiveP() {
		if (!has_InflectPossessiveP) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("false"));
		} else {
			return _InflectPossessiveP;
		}
	}

	public void setInflectPossessiveP(boolean value) {
		_InflectPossessiveP = value;
		has_InflectPossessiveP = true;
	}

	public java.lang.String getInflectionBase() {
		if (_InflectionBase == null) {
			return "";
		} else {
			return _InflectionBase;
		}
	}

	public void setInflectionBase(java.lang.String value) {
		_InflectionBase = value;
	}

	protected com.sun.xml.bind.util.ListImpl _getAddOrReplaceOrRemove() {
		if (_AddOrReplaceOrRemove == null) {
			_AddOrReplaceOrRemove = new com.sun.xml.bind.util.ListImpl(
					new java.util.ArrayList());
		}
		return _AddOrReplaceOrRemove;
	}

	public java.util.List getAddOrReplaceOrRemove() {
		return _getAddOrReplaceOrRemove();
	}

	public java.lang.String getFeminineAdjective() {
		if (_FeminineAdjective == null) {
			return "unspecified";
		} else {
			return _FeminineAdjective;
		}
	}

	public void setFeminineAdjective(java.lang.String value) {
		_FeminineAdjective = value;
	}

	public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
		return new lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.Unmarshaller(
				context);
	}

	public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx15 = 0;
		final int len15 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		while (idx15 != len15) {
			while (idx15 != len15) {
				context.childAsBody(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx15++)), "AddOrReplaceOrRemove");
			}
		}
	}

	public void serializeAttributes(
			lexicon.jaxb.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx15 = 0;
		final int len15 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		if (has_Consecutive) {
			context.startAttribute("", "consecutive");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(((boolean) _Consecutive)), "Consecutive");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Definiteness != null) {
			context.startAttribute("", "definiteness");
			try {
				context.text(((java.lang.String) _Definiteness), "Definiteness");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_FeminineAdjective != null) {
			context.startAttribute("", "feminine_adjective");
			try {
				context.text(((java.lang.String) _FeminineAdjective),
						"FeminineAdjective");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_FeminineNoun != null) {
			context.startAttribute("", "feminine_noun");
			try {
				context.text(((java.lang.String) _FeminineNoun), "FeminineNoun");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Gender != null) {
			context.startAttribute("", "gender");
			try {
				context.text(((java.lang.String) _Gender), "Gender");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectPossessiveP) {
			context.startAttribute("", "inflectPossessiveP");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(((boolean) _InflectPossessiveP)),
						"InflectPossessiveP");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectPossessiveS) {
			context.startAttribute("", "inflectPossessiveS");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(((boolean) _InflectPossessiveS)),
						"InflectPossessiveS");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_InflectionBase != null) {
			context.startAttribute("", "inflectionBase");
			try {
				context.text(((java.lang.String) _InflectionBase),
						"InflectionBase");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_MwPos != null) {
			context.startAttribute("", "mwPos");
			try {
				context.text(((java.lang.String) _MwPos), "MwPos");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Number != null) {
			context.startAttribute("", "number");
			try {
				context.text(((java.lang.String) _Number), "Number");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_PluralFemaleAdjective != null) {
			context.startAttribute("", "plural_female_adjective");
			try {
				context.text(((java.lang.String) _PluralFemaleAdjective),
						"PluralFemaleAdjective");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_PluralFemaleNoun != null) {
			context.startAttribute("", "plural_female_noun");
			try {
				context.text(((java.lang.String) _PluralFemaleNoun),
						"PluralFemaleNoun");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_PluralMaleAdjective != null) {
			context.startAttribute("", "plural_male_adjective");
			try {
				context.text(((java.lang.String) _PluralMaleAdjective),
						"PluralMaleAdjective");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_PluralMaleNoun != null) {
			context.startAttribute("", "plural_male_noun");
			try {
				context.text(((java.lang.String) _PluralMaleNoun),
						"PluralMaleNoun");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Type != null) {
			context.startAttribute("", "type");
			try {
				context.text(((java.lang.String) _Type), "Type");
			} catch (java.lang.Exception e) {
				lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		while (idx15 != len15) {
			while (idx15 != len15) {
				context.childAsAttributes(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx15++)), "AddOrReplaceOrRemove");
			}
		}
	}

	public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx15 = 0;
		final int len15 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		while (idx15 != len15) {
			while (idx15 != len15) {
				context.childAsURIs(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx15++)), "AddOrReplaceOrRemove");
			}
		}
	}

	public java.lang.Class getPrimaryInterface() {
		return (lexicon.jaxb.MultiWordNounAdjectiveLexiconType.class);
	}

	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
							+ "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
							+ "sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~"
							+ "\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
							+ "r\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003p"
							+ "psr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\u0017p"
							+ "psq\u0000~\u0000\u0017ppsq\u0000~\u0000\u0014sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000ps"
							+ "r\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tname"
							+ "Classt\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.gramm"
							+ "ar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcont"
							+ "entModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u001dp\u0000sq\u0000~\u0000\u0017ppsq\u0000~\u0000\u0014q\u0000~\u0000\u001dpsr\u0000 com.sun.ms"
							+ "v.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000"
							+ "\u001fxq\u0000~\u0000\u0003q\u0000~\u0000\u001dpsr\u00002com.sun.msv.grammar.Expression$AnyStringExp"
							+ "ression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u001c\u0001q\u0000~\u0000\'sr\u0000 com.sun.msv.grammar."
							+ "AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000"
							+ "\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpressio"
							+ "n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000(q\u0000~\u0000-sr\u0000#com.sun.msv.grammar.SimpleNa"
							+ "meClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamesp"
							+ "aceURIq\u0000~\u0000/xq\u0000~\u0000*t\u00002lexicon.jaxb.MultiWordNounAdjectiveLexic"
							+ "onType.Addt\u0000+http://java.sun.com/jaxb/xjc/dummy-elementsq\u0000~\u0000"
							+ "-sq\u0000~\u0000\u0014ppsq\u0000~\u0000\u001epp\u0000sq\u0000~\u0000\u0017ppsq\u0000~\u0000\u0014q\u0000~\u0000\u001dpsq\u0000~\u0000$q\u0000~\u0000\u001dpq\u0000~\u0000\'q\u0000~\u0000+"
							+ "q\u0000~\u0000-sq\u0000~\u0000.t\u00006lexicon.jaxb.MultiWordNounAdjectiveLexiconType"
							+ ".Replaceq\u0000~\u00002sq\u0000~\u0000\u0014ppsq\u0000~\u0000\u001epp\u0000sq\u0000~\u0000\u0017ppsq\u0000~\u0000\u0014q\u0000~\u0000\u001dpsq\u0000~\u0000$q\u0000~\u0000"
							+ "\u001dpq\u0000~\u0000\'q\u0000~\u0000+q\u0000~\u0000-sq\u0000~\u0000.t\u00005lexicon.jaxb.MultiWordNounAdjectiv"
							+ "eLexiconType.Removeq\u0000~\u00002sq\u0000~\u0000\u0017ppsq\u0000~\u0000$q\u0000~\u0000\u001dpsr\u0000\u001bcom.sun.msv."
							+ "grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Data"
							+ "type;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq"
							+ "\u0000~\u0000\u0003ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000"
							+ "*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%co"
							+ "m.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.ms"
							+ "v.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000/"
							+ "L\u0000\btypeNameq\u0000~\u0000/L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/Wh"
							+ "iteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0007bo"
							+ "oleansr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collap"
							+ "se\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcesso"
							+ "r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$NullSetExpr"
							+ "ession\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ej"
							+ "B\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000/L\u0000\fnamespaceURIq\u0000~\u0000/xpq\u0000~\u0000Nq\u0000~\u0000Msq\u0000~"
							+ "\u0000.t\u0000\u000bconsecutivet\u0000\u0000q\u0000~\u0000-sq\u0000~\u0000\u0017ppsq\u0000~\u0000$q\u0000~\u0000\u001dpsq\u0000~\u0000Cppsr\u0000)com."
							+ "sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000f"
							+ "Ljava/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataTypeWithValu"
							+ "eConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.Data"
							+ "TypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlag"
							+ "L\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fco"
							+ "ncreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacet"
							+ "Nameq\u0000~\u0000/xq\u0000~\u0000Jq\u0000~\u0000Xt\u0000\u0017AcronymDefinitenessTypeq\u0000~\u0000Q\u0000\u0000sr\u0000\"com"
							+ ".sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.da"
							+ "tatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u0000Hq\u0000~\u0000Mt"
							+ "\u0000\u0005tokenq\u0000~\u0000Q\u0001q\u0000~\u0000ft\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b7"
							+ "4\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0005t\u0000\u0004nonet\u0000\u0015internal and externalt\u0000\u0013extern"
							+ "allyDefinitedt\u0000\bexternalt\u0000\binternalxq\u0000~\u0000Ssq\u0000~\u0000Tq\u0000~\u0000cq\u0000~\u0000Xsq\u0000"
							+ "~\u0000.t\u0000\fdefinitenessq\u0000~\u0000Xq\u0000~\u0000-sq\u0000~\u0000\u0017ppsq\u0000~\u0000$q\u0000~\u0000\u001dpsq\u0000~\u0000Cppsq\u0000~"
							+ "\u0000\\q\u0000~\u0000Xt\u0000\fFeminineTypeq\u0000~\u0000Q\u0000\u0000q\u0000~\u0000fq\u0000~\u0000fq\u0000~\u0000hsq\u0000~\u0000iw\f\u0000\u0000\u0000\u0010?@\u0000\u0000"
							+ "\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000Ssq\u0000~\u0000Tq\u0000~\u0000wq\u0000~\u0000Xsq\u0000~\u0000.t"
							+ "\u0000\u0012feminine_adjectiveq\u0000~\u0000Xq\u0000~\u0000-sq\u0000~\u0000\u0017ppsq\u0000~\u0000$q\u0000~\u0000\u001dpq\u0000~\u0000usq\u0000~\u0000"
							+ ".t\u0000\rfeminine_nounq\u0000~\u0000Xq\u0000~\u0000-sq\u0000~\u0000\u0017ppsq\u0000~\u0000$q\u0000~\u0000\u001dpsq\u0000~\u0000Cppsq\u0000~\u0000"
							+ "\\q\u0000~\u0000Xt\u0000\nGenderTypeq\u0000~\u0000Q\u0000\u0000q\u0000~\u0000fq\u0000~\u0000fq\u0000~\u0000hsq\u0000~\u0000iw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000"
							+ "\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and femininet\u0000\tmascul"
							+ "inexq\u0000~\u0000Ssq\u0000~\u0000Tq\u0000~\u0000\u0088q\u0000~\u0000Xsq\u0000~\u0000.t\u0000\u0006genderq\u0000~\u0000Xq\u0000~\u0000-sq\u0000~\u0000\u0017ppsq"
							+ "\u0000~\u0000$q\u0000~\u0000\u001dpq\u0000~\u0000Fsq\u0000~\u0000.t\u0000\u0012inflectPossessivePq\u0000~\u0000Xq\u0000~\u0000-sq\u0000~\u0000\u0017pp"
							+ "sq\u0000~\u0000$q\u0000~\u0000\u001dpq\u0000~\u0000Fsq\u0000~\u0000.t\u0000\u0012inflectPossessiveSq\u0000~\u0000Xq\u0000~\u0000-sq\u0000~\u0000\u0017"
							+ "ppsq\u0000~\u0000$q\u0000~\u0000\u001dpsq\u0000~\u0000Cppq\u0000~\u0000fq\u0000~\u0000Ssq\u0000~\u0000Tq\u0000~\u0000gq\u0000~\u0000Msq\u0000~\u0000.t\u0000\u000einf"
							+ "lectionBaseq\u0000~\u0000Xq\u0000~\u0000-sq\u0000~\u0000\u0017ppsq\u0000~\u0000$q\u0000~\u0000\u001dpsq\u0000~\u0000Cppsq\u0000~\u0000\\q\u0000~\u0000X"
							+ "t\u0000\u0007PosTypeq\u0000~\u0000Q\u0000\u0000q\u0000~\u0000fq\u0000~\u0000fq\u0000~\u0000hsq\u0000~\u0000iw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\tt\u0000\u000bunspe"
							+ "cifiedt\u0000\u000bprepositiont\u0000\finterjectiont\u0000\u0005titlet\u0000\tadjectivet\u0000\u0004ve"
							+ "rbt\u0000\npropernamet\u0000\u0006adverbt\u0000\u0004nounxq\u0000~\u0000Ssq\u0000~\u0000Tq\u0000~\u0000\u00a3q\u0000~\u0000Xsq\u0000~\u0000.t"
							+ "\u0000\u0005mwPosq\u0000~\u0000Xq\u0000~\u0000-sq\u0000~\u0000\u0017ppsq\u0000~\u0000$q\u0000~\u0000\u001dpsq\u0000~\u0000Cppsq\u0000~\u0000\\q\u0000~\u0000Xt\u0000\nN"
							+ "umberTypeq\u0000~\u0000Q\u0000\u0000q\u0000~\u0000fq\u0000~\u0000fq\u0000~\u0000hsq\u0000~\u0000iw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspec"
							+ "ifiedt\u0000\u0013singular and pluralt\u0000\u0004dualt\u0000\u000fdual and pluralt\u0000\bsingu"
							+ "lart\u0000\u0006pluralxq\u0000~\u0000Ssq\u0000~\u0000Tq\u0000~\u0000\u00b5q\u0000~\u0000Xsq\u0000~\u0000.t\u0000\u0006numberq\u0000~\u0000Xq\u0000~\u0000-s"
							+ "q\u0000~\u0000\u0017ppsq\u0000~\u0000$q\u0000~\u0000\u001dpsq\u0000~\u0000Cppsq\u0000~\u0000\\q\u0000~\u0000Xt\u0000\nPluralTypeq\u0000~\u0000Q\u0000\u0000q\u0000"
							+ "~\u0000fq\u0000~\u0000fq\u0000~\u0000hsq\u0000~\u0000iw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000bunspecifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000"
							+ "\u0002imt\u0000\u0003iimt\u0000\u0001mt\u0000\tim and wtt\u0000\u0003iwtxq\u0000~\u0000Ssq\u0000~\u0000Tq\u0000~\u0000\u00c4q\u0000~\u0000Xsq\u0000~\u0000.t"
							+ "\u0000\u0017plural_female_adjectiveq\u0000~\u0000Xq\u0000~\u0000-sq\u0000~\u0000\u0017ppsq\u0000~\u0000$q\u0000~\u0000\u001dpq\u0000~\u0000\u00c2"
							+ "sq\u0000~\u0000.t\u0000\u0012plural_female_nounq\u0000~\u0000Xq\u0000~\u0000-sq\u0000~\u0000\u0017ppsq\u0000~\u0000$q\u0000~\u0000\u001dpq\u0000~"
							+ "\u0000\u00c2sq\u0000~\u0000.t\u0000\u0015plural_male_adjectiveq\u0000~\u0000Xq\u0000~\u0000-sq\u0000~\u0000\u0017ppsq\u0000~\u0000$q\u0000~\u0000"
							+ "\u001dpq\u0000~\u0000\u00c2sq\u0000~\u0000.t\u0000\u0010plural_male_nounq\u0000~\u0000Xq\u0000~\u0000-sq\u0000~\u0000\u0017ppsq\u0000~\u0000$q\u0000~\u0000"
							+ "\u001dpq\u0000~\u0000\u009bsq\u0000~\u0000.t\u0000\u0004typeq\u0000~\u0000Xq\u0000~\u0000-sr\u0000\"com.sun.msv.grammar.Expres"
							+ "sionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/Expres"
							+ "sionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool"
							+ "$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lc"
							+ "om/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000+\u0001pq\u0000~\u0000\u0007q\u0000~\u0000\u0006q\u0000~\u0000\u0018q\u0000~"
							+ "\u0000\u0080q\u0000~\u0000\tq\u0000~\u0000\u00d9q\u0000~\u0000\u0010q\u0000~\u0000\u000bq\u0000~\u0000\u0005q\u0000~\u0000\u0099q\u0000~\u0000\u0011q\u0000~\u0000Yq\u0000~\u0000Aq\u0000~\u0000\u000eq\u0000~\u0000#q\u0000~"
							+ "\u00006q\u0000~\u0000=q\u0000~\u0000\u000fq\u0000~\u0000\u0012q\u0000~\u0000\rq\u0000~\u0000\u009fq\u0000~\u0000\u00d5q\u0000~\u0000\u0084q\u0000~\u0000\u00b1q\u0000~\u0000\u001aq\u0000~\u0000\nq\u0000~\u0000\u0095q\u0000~"
							+ "\u0000\u001bq\u0000~\u00003q\u0000~\u0000:q\u0000~\u0000\u0013q\u0000~\u0000\u0019q\u0000~\u0000\fq\u0000~\u0000\u0091q\u0000~\u0000\bq\u0000~\u0000sq\u0000~\u0000\u00d1q\u0000~\u0000\u00ddq\u0000~\u0000\u0016q\u0000~"
							+ "\u0000\"q\u0000~\u00005q\u0000~\u0000<q\u0000~\u0000\u00c0x"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	public static class AddImpl extends
			lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl implements
			lexicon.jaxb.MultiWordNounAdjectiveLexiconType.Add,
			com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject,
			lexicon.jaxb.impl.runtime.UnmarshallableObject,
			lexicon.jaxb.impl.runtime.XMLSerializable,
			lexicon.jaxb.impl.runtime.ValidatableObject {

		public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (lexicon.jaxb.MultiWordNounAdjectiveLexiconType.Add.class);
		}

		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		public java.lang.String ____jaxb_ri____getLocalName() {
			return "add";
		}

		public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
			return new lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.Unmarshaller(
					context);
		}

		public void serializeBody(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "add");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		public void serializeAttributes(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		public void serializeURIs(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		public java.lang.Class getPrimaryInterface() {
			return (lexicon.jaxb.MultiWordNounAdjectiveLexiconType.Add.class);
		}

		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
								+ "\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000"
								+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~"
								+ "\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun"
								+ ".msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.dataty"
								+ "pe.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv."
								+ "datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.dat"
								+ "atype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xs"
								+ "d.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/Stri"
								+ "ng;L\u0000\btypeNameq\u0000~\u0000 L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd"
								+ "/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000"
								+ "\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Colla"
								+ "pse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcess"
								+ "or\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetEx"
								+ "pression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t"
								+ "\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000 L\u0000\fnamespaceURIq\u0000~\u0000 xpq\u0000~\u0000$q\u0000~\u0000#sr"
								+ "\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.su"
								+ "n.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClass"
								+ "q\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000"
								+ "\u0017ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L"
								+ "\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataT"
								+ "ypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.dataty"
								+ "pe.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needVal"
								+ "ueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatyp"
								+ "eImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteTy"
								+ "pe;L\u0000\tfacetNameq\u0000~\u0000 xq\u0000~\u0000\u001ft\u0000\u0000t\u0000\u0017AcronymDefinitenessTypeq\u0000~\u0000\'"
								+ "\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"t\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xp"
								+ "w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0005t\u0000\u0004nonet\u0000\u0015internal and externalt\u0000\u0013externallyDe"
								+ "finitedt\u0000\bexternalt\u0000\binternalxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000;q\u0000~\u0000:sr\u0000#com.s"
								+ "un.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000 L\u0000"
								+ "\fnamespaceURIq\u0000~\u0000 xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
								+ "\u0000\u0000xpt\u0000\fdefinitenessq\u0000~\u0000:sr\u00000com.sun.msv.grammar.Expression$E"
								+ "psilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u00000\u0001q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q"
								+ "\u0000~\u00001pq\u0000~\u0000\u001asq\u0000~\u0000Et\u0000\u0006dottedq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000"
								+ "\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\fFeminineTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000"
								+ "\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000Tq\u0000~\u0000:"
								+ "sq\u0000~\u0000Et\u0000\bfeminineq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsq\u0000~\u0000"
								+ "3q\u0000~\u0000:t\u0000\nGenderTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000"
								+ "\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and femininet\u0000\tmascul"
								+ "inexq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000aq\u0000~\u0000:sq\u0000~\u0000Et\u0000\u0006genderq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq"
								+ "\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000"
								+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001dq\u0000~\u0000#t\u0000\u0007booleanq\u0000~\u0000\'q\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000oq\u0000~\u0000#sq\u0000~"
								+ "\u0000Et\u0000\u0012inflectPossessivePq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001pq\u0000~\u0000lsq"
								+ "\u0000~\u0000Et\u0000\u0012inflectPossessiveSq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000"
								+ "\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\nNumberTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000"
								+ "\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and pluralt\u0000\u0004dualt\u0000\u000fdual "
								+ "and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000{q\u0000~\u0000:sq\u0000~\u0000Et\u0000"
								+ "\u0006numberq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\nP"
								+ "luralTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000bunspec"
								+ "ifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000\u0002imt\u0000\u0003iimt\u0000\u0001mt\u0000\tim and wtt\u0000\u0003iwtxq\u0000~\u0000)sq\u0000~\u0000"
								+ "*q\u0000~\u0000\u008aq\u0000~\u0000:sq\u0000~\u0000Et\u0000\u0006pluralq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~"
								+ "\u0000\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\u0007PGNTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000 ?"
								+ "@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p/M/"
								+ "Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/Plt\u0000\u00071p/"
								+ "M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sg"
								+ "t\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000\u009bq\u0000~\u0000:sq\u0000~\u0000"
								+ "Et\u0000\npossessiveq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsq\u0000~\u00003q\u0000"
								+ "~\u0000:t\u0000\fRegisterTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003"
								+ "t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000\u00b7q\u0000~\u0000:sq\u0000~\u0000Et\u0000\br"
								+ "egisterq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\fS"
								+ "pellingTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\tirre"
								+ "gulart\u0000\bstandardxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000\u00c3q\u0000~\u0000:sq\u0000~\u0000Et\u0000\bspellingq\u0000~\u0000:"
								+ "q\u0000~\u0000Jsq\u0000~\u0000.ppq\u0000~\u0000\u001asq\u0000~\u0000Et\u0000\u000etransliteratedq\u0000~\u0000:sq\u0000~\u0000.ppq\u0000~\u0000\u001as"
								+ "q\u0000~\u0000Et\u0000\bundottedq\u0000~\u0000:sq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsr\u0000\"com.sun"
								+ ".msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001dq\u0000~\u0000#t\u0000\u0005QNameq\u0000~"
								+ "\u0000\'q\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000\u00d5q\u0000~\u0000#sq\u0000~\u0000Et\u0000\u0004typet\u0000)http://www.w3.org/200"
								+ "1/XMLSchema-instanceq\u0000~\u0000Jsq\u0000~\u0000Et\u0000\u0003addq\u0000~\u0000:sr\u0000\"com.sun.msv.gr"
								+ "ammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/gr"
								+ "ammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.Ex"
								+ "pressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000"
								+ "\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u001a\u0001pq\u0000~\u0000\nq"
								+ "\u0000~\u0000\u000fq\u0000~\u0000\u0010q\u0000~\u0000sq\u0000~\u0000\u0014q\u0000~\u0000Pq\u0000~\u0000\u00b3q\u0000~\u0000]q\u0000~\u0000\fq\u0000~\u0000\u0015q\u0000~\u0000\u0012q\u0000~\u0000\u0097q\u0000~\u0000\u00d0q"
								+ "\u0000~\u0000-q\u0000~\u0000\u0011q\u0000~\u0000Lq\u0000~\u0000\u00bfq\u0000~\u0000\tq\u0000~\u0000\u000eq\u0000~\u0000\u0013q\u0000~\u0000jq\u0000~\u0000\rq\u0000~\u0000wq\u0000~\u0000\u0016q\u0000~\u0000\u000bq"
								+ "\u0000~\u0000\u0086x"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		public class Unmarshaller extends
				lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					lexicon.jaxb.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			public java.lang.Object owner() {
				return lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.this;
			}

			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					case 0:
						if (("add" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					case 2:
						if (("add" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						if (("definiteness" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("feminine" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("gender" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectPossessiveP" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectPossessiveS" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("number" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("plural" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("possessive" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("register" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("spelling" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 1:
							attIdx = context.getAttribute("", "definiteness");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "feminine");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "gender");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectPossessiveP");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectPossessiveS");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "number");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "plural");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "possessive");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "register");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "spelling");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						case 3:
							revertToParentFromText(value);
							return;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

		}

	}

	public static class RemoveImpl extends
			lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl implements
			lexicon.jaxb.MultiWordNounAdjectiveLexiconType.Remove,
			com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject,
			lexicon.jaxb.impl.runtime.UnmarshallableObject,
			lexicon.jaxb.impl.runtime.XMLSerializable,
			lexicon.jaxb.impl.runtime.ValidatableObject {

		public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (lexicon.jaxb.MultiWordNounAdjectiveLexiconType.Remove.class);
		}

		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		public java.lang.String ____jaxb_ri____getLocalName() {
			return "remove";
		}

		public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
			return new lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.Unmarshaller(
					context);
		}

		public void serializeBody(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "remove");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		public void serializeAttributes(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		public void serializeURIs(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		public java.lang.Class getPrimaryInterface() {
			return (lexicon.jaxb.MultiWordNounAdjectiveLexiconType.Remove.class);
		}

		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
								+ "\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000"
								+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~"
								+ "\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun"
								+ ".msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.dataty"
								+ "pe.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv."
								+ "datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.dat"
								+ "atype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xs"
								+ "d.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/Stri"
								+ "ng;L\u0000\btypeNameq\u0000~\u0000 L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd"
								+ "/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000"
								+ "\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Colla"
								+ "pse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcess"
								+ "or\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetEx"
								+ "pression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t"
								+ "\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000 L\u0000\fnamespaceURIq\u0000~\u0000 xpq\u0000~\u0000$q\u0000~\u0000#sr"
								+ "\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.su"
								+ "n.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClass"
								+ "q\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000"
								+ "\u0017ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L"
								+ "\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataT"
								+ "ypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.dataty"
								+ "pe.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needVal"
								+ "ueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatyp"
								+ "eImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteTy"
								+ "pe;L\u0000\tfacetNameq\u0000~\u0000 xq\u0000~\u0000\u001ft\u0000\u0000t\u0000\u0017AcronymDefinitenessTypeq\u0000~\u0000\'"
								+ "\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"t\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xp"
								+ "w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0005t\u0000\u0004nonet\u0000\u0015internal and externalt\u0000\u0013externallyDe"
								+ "finitedt\u0000\bexternalt\u0000\binternalxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000;q\u0000~\u0000:sr\u0000#com.s"
								+ "un.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000 L\u0000"
								+ "\fnamespaceURIq\u0000~\u0000 xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
								+ "\u0000\u0000xpt\u0000\fdefinitenessq\u0000~\u0000:sr\u00000com.sun.msv.grammar.Expression$E"
								+ "psilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u00000\u0001q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q"
								+ "\u0000~\u00001pq\u0000~\u0000\u001asq\u0000~\u0000Et\u0000\u0006dottedq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000"
								+ "\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\fFeminineTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000"
								+ "\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000Tq\u0000~\u0000:"
								+ "sq\u0000~\u0000Et\u0000\bfeminineq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsq\u0000~\u0000"
								+ "3q\u0000~\u0000:t\u0000\nGenderTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000"
								+ "\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and femininet\u0000\tmascul"
								+ "inexq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000aq\u0000~\u0000:sq\u0000~\u0000Et\u0000\u0006genderq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq"
								+ "\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000"
								+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001dq\u0000~\u0000#t\u0000\u0007booleanq\u0000~\u0000\'q\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000oq\u0000~\u0000#sq\u0000~"
								+ "\u0000Et\u0000\u0012inflectPossessivePq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001pq\u0000~\u0000lsq"
								+ "\u0000~\u0000Et\u0000\u0012inflectPossessiveSq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000"
								+ "\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\nNumberTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000"
								+ "\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and pluralt\u0000\u0004dualt\u0000\u000fdual "
								+ "and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000{q\u0000~\u0000:sq\u0000~\u0000Et\u0000"
								+ "\u0006numberq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\nP"
								+ "luralTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000bunspec"
								+ "ifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000\u0002imt\u0000\u0003iimt\u0000\u0001mt\u0000\tim and wtt\u0000\u0003iwtxq\u0000~\u0000)sq\u0000~\u0000"
								+ "*q\u0000~\u0000\u008aq\u0000~\u0000:sq\u0000~\u0000Et\u0000\u0006pluralq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~"
								+ "\u0000\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\u0007PGNTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000 ?"
								+ "@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p/M/"
								+ "Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/Plt\u0000\u00071p/"
								+ "M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sg"
								+ "t\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000\u009bq\u0000~\u0000:sq\u0000~\u0000"
								+ "Et\u0000\npossessiveq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsq\u0000~\u00003q\u0000"
								+ "~\u0000:t\u0000\fRegisterTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003"
								+ "t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000\u00b7q\u0000~\u0000:sq\u0000~\u0000Et\u0000\br"
								+ "egisterq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\fS"
								+ "pellingTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\tirre"
								+ "gulart\u0000\bstandardxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000\u00c3q\u0000~\u0000:sq\u0000~\u0000Et\u0000\bspellingq\u0000~\u0000:"
								+ "q\u0000~\u0000Jsq\u0000~\u0000.ppq\u0000~\u0000\u001asq\u0000~\u0000Et\u0000\u000etransliteratedq\u0000~\u0000:sq\u0000~\u0000.ppq\u0000~\u0000\u001as"
								+ "q\u0000~\u0000Et\u0000\bundottedq\u0000~\u0000:sq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsr\u0000\"com.sun"
								+ ".msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001dq\u0000~\u0000#t\u0000\u0005QNameq\u0000~"
								+ "\u0000\'q\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000\u00d5q\u0000~\u0000#sq\u0000~\u0000Et\u0000\u0004typet\u0000)http://www.w3.org/200"
								+ "1/XMLSchema-instanceq\u0000~\u0000Jsq\u0000~\u0000Et\u0000\u0006removeq\u0000~\u0000:sr\u0000\"com.sun.msv"
								+ ".grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv"
								+ "/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar"
								+ ".ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersio"
								+ "nL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u001a\u0001pq\u0000~"
								+ "\u0000\nq\u0000~\u0000\u000fq\u0000~\u0000\u0010q\u0000~\u0000sq\u0000~\u0000\u0014q\u0000~\u0000Pq\u0000~\u0000\u00b3q\u0000~\u0000]q\u0000~\u0000\fq\u0000~\u0000\u0015q\u0000~\u0000\u0012q\u0000~\u0000\u0097q\u0000~"
								+ "\u0000\u00d0q\u0000~\u0000-q\u0000~\u0000\u0011q\u0000~\u0000Lq\u0000~\u0000\u00bfq\u0000~\u0000\tq\u0000~\u0000\u000eq\u0000~\u0000\u0013q\u0000~\u0000jq\u0000~\u0000\rq\u0000~\u0000wq\u0000~\u0000\u0016q\u0000~"
								+ "\u0000\u000bq\u0000~\u0000\u0086x"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		public class Unmarshaller extends
				lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					lexicon.jaxb.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			public java.lang.Object owner() {
				return lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.this;
			}

			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					case 0:
						if (("remove" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 2:
						if (("remove" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						if (("definiteness" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("feminine" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("gender" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectPossessiveP" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectPossessiveS" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("number" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("plural" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("possessive" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("register" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("spelling" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 3:
							revertToParentFromText(value);
							return;
						case 1:
							attIdx = context.getAttribute("", "definiteness");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "feminine");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "gender");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectPossessiveP");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectPossessiveS");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "number");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "plural");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "possessive");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "register");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "spelling");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

		}

	}

	public static class ReplaceImpl extends
			lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl implements
			lexicon.jaxb.MultiWordNounAdjectiveLexiconType.Replace,
			com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject,
			lexicon.jaxb.impl.runtime.UnmarshallableObject,
			lexicon.jaxb.impl.runtime.XMLSerializable,
			lexicon.jaxb.impl.runtime.ValidatableObject {

		public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (lexicon.jaxb.MultiWordNounAdjectiveLexiconType.Replace.class);
		}

		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		public java.lang.String ____jaxb_ri____getLocalName() {
			return "replace";
		}

		public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
			return new lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.Unmarshaller(
					context);
		}

		public void serializeBody(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "replace");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		public void serializeAttributes(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		public void serializeURIs(
				lexicon.jaxb.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		public java.lang.Class getPrimaryInterface() {
			return (lexicon.jaxb.MultiWordNounAdjectiveLexiconType.Replace.class);
		}

		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
								+ "\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000"
								+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~"
								+ "\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun"
								+ ".msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.dataty"
								+ "pe.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv."
								+ "datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.dat"
								+ "atype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xs"
								+ "d.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/Stri"
								+ "ng;L\u0000\btypeNameq\u0000~\u0000 L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd"
								+ "/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000"
								+ "\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Colla"
								+ "pse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcess"
								+ "or\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetEx"
								+ "pression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t"
								+ "\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000 L\u0000\fnamespaceURIq\u0000~\u0000 xpq\u0000~\u0000$q\u0000~\u0000#sr"
								+ "\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.su"
								+ "n.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClass"
								+ "q\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000"
								+ "\u0017ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L"
								+ "\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataT"
								+ "ypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.dataty"
								+ "pe.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needVal"
								+ "ueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatyp"
								+ "eImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteTy"
								+ "pe;L\u0000\tfacetNameq\u0000~\u0000 xq\u0000~\u0000\u001ft\u0000\u0000t\u0000\u0017AcronymDefinitenessTypeq\u0000~\u0000\'"
								+ "\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"t\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xp"
								+ "w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0005t\u0000\u0004nonet\u0000\u0015internal and externalt\u0000\u0013externallyDe"
								+ "finitedt\u0000\bexternalt\u0000\binternalxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000;q\u0000~\u0000:sr\u0000#com.s"
								+ "un.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000 L\u0000"
								+ "\fnamespaceURIq\u0000~\u0000 xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
								+ "\u0000\u0000xpt\u0000\fdefinitenessq\u0000~\u0000:sr\u00000com.sun.msv.grammar.Expression$E"
								+ "psilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u00000\u0001q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q"
								+ "\u0000~\u00001pq\u0000~\u0000\u001asq\u0000~\u0000Et\u0000\u0006dottedq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000"
								+ "\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\fFeminineTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000"
								+ "\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000Tq\u0000~\u0000:"
								+ "sq\u0000~\u0000Et\u0000\bfeminineq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsq\u0000~\u0000"
								+ "3q\u0000~\u0000:t\u0000\nGenderTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000"
								+ "\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and femininet\u0000\tmascul"
								+ "inexq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000aq\u0000~\u0000:sq\u0000~\u0000Et\u0000\u0006genderq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq"
								+ "\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000"
								+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001dq\u0000~\u0000#t\u0000\u0007booleanq\u0000~\u0000\'q\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000oq\u0000~\u0000#sq\u0000~"
								+ "\u0000Et\u0000\u0012inflectPossessivePq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001pq\u0000~\u0000lsq"
								+ "\u0000~\u0000Et\u0000\u0012inflectPossessiveSq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000"
								+ "\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\nNumberTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000"
								+ "\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and pluralt\u0000\u0004dualt\u0000\u000fdual "
								+ "and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000{q\u0000~\u0000:sq\u0000~\u0000Et\u0000"
								+ "\u0006numberq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\nP"
								+ "luralTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000bunspec"
								+ "ifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000\u0002imt\u0000\u0003iimt\u0000\u0001mt\u0000\tim and wtt\u0000\u0003iwtxq\u0000~\u0000)sq\u0000~\u0000"
								+ "*q\u0000~\u0000\u008aq\u0000~\u0000:sq\u0000~\u0000Et\u0000\u0006pluralq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~"
								+ "\u0000\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\u0007PGNTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000 ?"
								+ "@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p/M/"
								+ "Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/Plt\u0000\u00071p/"
								+ "M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sg"
								+ "t\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000\u009bq\u0000~\u0000:sq\u0000~\u0000"
								+ "Et\u0000\npossessiveq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsq\u0000~\u00003q\u0000"
								+ "~\u0000:t\u0000\fRegisterTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003"
								+ "t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000\u00b7q\u0000~\u0000:sq\u0000~\u0000Et\u0000\br"
								+ "egisterq\u0000~\u0000:q\u0000~\u0000Jsq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsq\u0000~\u00003q\u0000~\u0000:t\u0000\fS"
								+ "pellingTypeq\u0000~\u0000\'\u0000\u0000q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000<sq\u0000~\u0000=w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\tirre"
								+ "gulart\u0000\bstandardxq\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000\u00c3q\u0000~\u0000:sq\u0000~\u0000Et\u0000\bspellingq\u0000~\u0000:"
								+ "q\u0000~\u0000Jsq\u0000~\u0000.ppq\u0000~\u0000\u001asq\u0000~\u0000Et\u0000\u000etransliteratedq\u0000~\u0000:sq\u0000~\u0000.ppq\u0000~\u0000\u001as"
								+ "q\u0000~\u0000Et\u0000\bundottedq\u0000~\u0000:sq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00001psq\u0000~\u0000\u0017ppsr\u0000\"com.sun"
								+ ".msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001dq\u0000~\u0000#t\u0000\u0005QNameq\u0000~"
								+ "\u0000\'q\u0000~\u0000)sq\u0000~\u0000*q\u0000~\u0000\u00d5q\u0000~\u0000#sq\u0000~\u0000Et\u0000\u0004typet\u0000)http://www.w3.org/200"
								+ "1/XMLSchema-instanceq\u0000~\u0000Jsq\u0000~\u0000Et\u0000\u0007replaceq\u0000~\u0000:sr\u0000\"com.sun.ms"
								+ "v.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/ms"
								+ "v/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.gramma"
								+ "r.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersi"
								+ "onL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u001a\u0001pq\u0000"
								+ "~\u0000\nq\u0000~\u0000\u000fq\u0000~\u0000\u0010q\u0000~\u0000sq\u0000~\u0000\u0014q\u0000~\u0000Pq\u0000~\u0000\u00b3q\u0000~\u0000]q\u0000~\u0000\fq\u0000~\u0000\u0015q\u0000~\u0000\u0012q\u0000~\u0000\u0097q\u0000"
								+ "~\u0000\u00d0q\u0000~\u0000-q\u0000~\u0000\u0011q\u0000~\u0000Lq\u0000~\u0000\u00bfq\u0000~\u0000\tq\u0000~\u0000\u000eq\u0000~\u0000\u0013q\u0000~\u0000jq\u0000~\u0000\rq\u0000~\u0000wq\u0000~\u0000\u0016q\u0000"
								+ "~\u0000\u000bq\u0000~\u0000\u0086x"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		public class Unmarshaller extends
				lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					lexicon.jaxb.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			public java.lang.Object owner() {
				return lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.this;
			}

			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 0:
						if (("replace" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					case 1:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					case 2:
						if (("replace" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						if (("definiteness" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("feminine" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("gender" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectPossessiveP" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectPossessiveS" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("number" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("plural" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("possessive" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("register" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("spelling" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((lexicon.jaxb.impl.MultiWordNounAdjectiveExceptionTypeImpl) lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 3:
							revertToParentFromText(value);
							return;
						case 1:
							attIdx = context.getAttribute("", "definiteness");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "feminine");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "gender");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectPossessiveP");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectPossessiveS");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "number");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "plural");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "possessive");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "register");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "spelling");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

		}

	}

	public class Unmarshaller extends
			lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(
				lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
			super(context, "-----------------------------------------------");
		}

		protected Unmarshaller(
				lexicon.jaxb.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		public java.lang.Object owner() {
			return lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.this;
		}

		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					attIdx = context.getAttribute("", "consecutive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText1(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 36:
					attIdx = context.getAttribute("", "plural_male_adjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText2(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText3(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "inflectionBase");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText4(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "inflectPossessiveS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText5(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText6(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "feminine_noun");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText7(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText8(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "plural_female_noun");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText9(v);
						continue outer;
					}
					state = 36;
					continue outer;
				case 46:
					if (("add" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(((lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl) spawnChildFromEnterElement(
										(lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.class),
										46, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("replace" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(((lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl) spawnChildFromEnterElement(
										(lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.class),
										46, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("remove" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(((lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl) spawnChildFromEnterElement(
										(lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.class),
										46, ___uri, ___local, ___qname, __atts)));
						return;
					}
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 15:
					attIdx = context.getAttribute("", "inflectPossessiveP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText10(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 30:
					attIdx = context
							.getAttribute("", "plural_female_adjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText11(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 42:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 45;
						eatText12(v);
						continue outer;
					}
					state = 45;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "feminine_adjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText13(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 45:
					if (("add" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(((lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl) spawnChildFromEnterElement(
										(lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.AddImpl.class),
										46, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("replace" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(((lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl) spawnChildFromEnterElement(
										(lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.ReplaceImpl.class),
										46, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("remove" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(((lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl) spawnChildFromEnterElement(
										(lexicon.jaxb.impl.MultiWordNounAdjectiveLexiconTypeImpl.RemoveImpl.class),
										46, ___uri, ___local, ___qname, __atts)));
						return;
					}
					state = 46;
					continue outer;
				case 24:
					attIdx = context.getAttribute("", "mwPos");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText14(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 39:
					attIdx = context.getAttribute("", "plural_male_noun");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText15(v);
						continue outer;
					}
					state = 42;
					continue outer;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Consecutive = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_Consecutive = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText2(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_PluralMaleAdjective = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText3(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Gender = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText4(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectionBase = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText5(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectPossessiveS = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectPossessiveS = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText6(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Number = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText7(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_FeminineNoun = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText8(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Definiteness = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText9(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_PluralFemaleNoun = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText10(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectPossessiveP = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectPossessiveP = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText11(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_PluralFemaleAdjective = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText12(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Type = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText13(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_FeminineAdjective = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText14(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_MwPos = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText15(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_PluralMaleNoun = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					attIdx = context.getAttribute("", "consecutive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText1(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 36:
					attIdx = context.getAttribute("", "plural_male_adjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText2(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText3(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "inflectionBase");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText4(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "inflectPossessiveS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText5(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText6(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "feminine_noun");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText7(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText8(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "plural_female_noun");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText9(v);
						continue outer;
					}
					state = 36;
					continue outer;
				case 46:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 15:
					attIdx = context.getAttribute("", "inflectPossessiveP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText10(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 30:
					attIdx = context
							.getAttribute("", "plural_female_adjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText11(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 42:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 45;
						eatText12(v);
						continue outer;
					}
					state = 45;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "feminine_adjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText13(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 45:
					state = 46;
					continue outer;
				case 24:
					attIdx = context.getAttribute("", "mwPos");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText14(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 39:
					attIdx = context.getAttribute("", "plural_male_noun");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText15(v);
						continue outer;
					}
					state = 42;
					continue outer;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					if (("consecutive" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					state = 3;
					continue outer;
				case 36:
					if (("plural_male_adjective" == ___local) && ("" == ___uri)) {
						state = 37;
						return;
					}
					state = 39;
					continue outer;
				case 12:
					if (("gender" == ___local) && ("" == ___uri)) {
						state = 13;
						return;
					}
					state = 15;
					continue outer;
				case 21:
					if (("inflectionBase" == ___local) && ("" == ___uri)) {
						state = 22;
						return;
					}
					state = 24;
					continue outer;
				case 18:
					if (("inflectPossessiveS" == ___local) && ("" == ___uri)) {
						state = 19;
						return;
					}
					state = 21;
					continue outer;
				case 27:
					if (("number" == ___local) && ("" == ___uri)) {
						state = 28;
						return;
					}
					state = 30;
					continue outer;
				case 9:
					if (("feminine_noun" == ___local) && ("" == ___uri)) {
						state = 10;
						return;
					}
					state = 12;
					continue outer;
				case 3:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					state = 6;
					continue outer;
				case 33:
					if (("plural_female_noun" == ___local) && ("" == ___uri)) {
						state = 34;
						return;
					}
					state = 36;
					continue outer;
				case 46:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 15:
					if (("inflectPossessiveP" == ___local) && ("" == ___uri)) {
						state = 16;
						return;
					}
					state = 18;
					continue outer;
				case 30:
					if (("plural_female_adjective" == ___local)
							&& ("" == ___uri)) {
						state = 31;
						return;
					}
					state = 33;
					continue outer;
				case 42:
					if (("type" == ___local) && ("" == ___uri)) {
						state = 43;
						return;
					}
					state = 45;
					continue outer;
				case 6:
					if (("feminine_adjective" == ___local) && ("" == ___uri)) {
						state = 7;
						return;
					}
					state = 9;
					continue outer;
				case 45:
					state = 46;
					continue outer;
				case 24:
					if (("mwPos" == ___local) && ("" == ___uri)) {
						state = 25;
						return;
					}
					state = 27;
					continue outer;
				case 39:
					if (("plural_male_noun" == ___local) && ("" == ___uri)) {
						state = 40;
						return;
					}
					state = 42;
					continue outer;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 8:
					if (("feminine_adjective" == ___local) && ("" == ___uri)) {
						state = 9;
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "consecutive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText1(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 36:
					attIdx = context.getAttribute("", "plural_male_adjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText2(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 20:
					if (("inflectPossessiveS" == ___local) && ("" == ___uri)) {
						state = 21;
						return;
					}
					break;
				case 11:
					if (("feminine_noun" == ___local) && ("" == ___uri)) {
						state = 12;
						return;
					}
					break;
				case 23:
					if (("inflectionBase" == ___local) && ("" == ___uri)) {
						state = 24;
						return;
					}
					break;
				case 12:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText3(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 14:
					if (("gender" == ___local) && ("" == ___uri)) {
						state = 15;
						return;
					}
					break;
				case 21:
					attIdx = context.getAttribute("", "inflectionBase");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText4(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 29:
					if (("number" == ___local) && ("" == ___uri)) {
						state = 30;
						return;
					}
					break;
				case 18:
					attIdx = context.getAttribute("", "inflectPossessiveS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText5(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 5:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				case 27:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText6(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "feminine_noun");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText7(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 17:
					if (("inflectPossessiveP" == ___local) && ("" == ___uri)) {
						state = 18;
						return;
					}
					break;
				case 3:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText8(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "plural_female_noun");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText9(v);
						continue outer;
					}
					state = 36;
					continue outer;
				case 46:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 35:
					if (("plural_female_noun" == ___local) && ("" == ___uri)) {
						state = 36;
						return;
					}
					break;
				case 44:
					if (("type" == ___local) && ("" == ___uri)) {
						state = 45;
						return;
					}
					break;
				case 38:
					if (("plural_male_adjective" == ___local) && ("" == ___uri)) {
						state = 39;
						return;
					}
					break;
				case 32:
					if (("plural_female_adjective" == ___local)
							&& ("" == ___uri)) {
						state = 33;
						return;
					}
					break;
				case 41:
					if (("plural_male_noun" == ___local) && ("" == ___uri)) {
						state = 42;
						return;
					}
					break;
				case 15:
					attIdx = context.getAttribute("", "inflectPossessiveP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText10(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 26:
					if (("mwPos" == ___local) && ("" == ___uri)) {
						state = 27;
						return;
					}
					break;
				case 30:
					attIdx = context
							.getAttribute("", "plural_female_adjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText11(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 42:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 45;
						eatText12(v);
						continue outer;
					}
					state = 45;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "feminine_adjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText13(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 45:
					state = 46;
					continue outer;
				case 2:
					if (("consecutive" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 24:
					attIdx = context.getAttribute("", "mwPos");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText14(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 39:
					attIdx = context.getAttribute("", "plural_male_noun");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText15(v);
						continue outer;
					}
					state = 42;
					continue outer;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 0:
						attIdx = context.getAttribute("", "consecutive");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 3;
							eatText1(v);
							continue outer;
						}
						state = 3;
						continue outer;
					case 36:
						attIdx = context.getAttribute("",
								"plural_male_adjective");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 39;
							eatText2(v);
							continue outer;
						}
						state = 39;
						continue outer;
					case 28:
						state = 29;
						eatText6(value);
						return;
					case 25:
						state = 26;
						eatText14(value);
						return;
					case 12:
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 15;
							eatText3(v);
							continue outer;
						}
						state = 15;
						continue outer;
					case 21:
						attIdx = context.getAttribute("", "inflectionBase");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 24;
							eatText4(v);
							continue outer;
						}
						state = 24;
						continue outer;
					case 18:
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 21;
							eatText5(v);
							continue outer;
						}
						state = 21;
						continue outer;
					case 16:
						state = 17;
						eatText10(value);
						return;
					case 31:
						state = 32;
						eatText11(value);
						return;
					case 27:
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 30;
							eatText6(v);
							continue outer;
						}
						state = 30;
						continue outer;
					case 9:
						attIdx = context.getAttribute("", "feminine_noun");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 12;
							eatText7(v);
							continue outer;
						}
						state = 12;
						continue outer;
					case 34:
						state = 35;
						eatText9(value);
						return;
					case 19:
						state = 20;
						eatText5(value);
						return;
					case 7:
						state = 8;
						eatText13(value);
						return;
					case 3:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 6;
							eatText8(v);
							continue outer;
						}
						state = 6;
						continue outer;
					case 10:
						state = 11;
						eatText7(value);
						return;
					case 43:
						state = 44;
						eatText12(value);
						return;
					case 33:
						attIdx = context.getAttribute("", "plural_female_noun");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 36;
							eatText9(v);
							continue outer;
						}
						state = 36;
						continue outer;
					case 46:
						revertToParentFromText(value);
						return;
					case 40:
						state = 41;
						eatText15(value);
						return;
					case 1:
						state = 2;
						eatText1(value);
						return;
					case 37:
						state = 38;
						eatText2(value);
						return;
					case 15:
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 18;
							eatText10(v);
							continue outer;
						}
						state = 18;
						continue outer;
					case 30:
						attIdx = context.getAttribute("",
								"plural_female_adjective");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 33;
							eatText11(v);
							continue outer;
						}
						state = 33;
						continue outer;
					case 42:
						attIdx = context.getAttribute("", "type");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 45;
							eatText12(v);
							continue outer;
						}
						state = 45;
						continue outer;
					case 6:
						attIdx = context.getAttribute("", "feminine_adjective");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 9;
							eatText13(v);
							continue outer;
						}
						state = 9;
						continue outer;
					case 45:
						state = 46;
						continue outer;
					case 13:
						state = 14;
						eatText3(value);
						return;
					case 22:
						state = 23;
						eatText4(value);
						return;
					case 24:
						attIdx = context.getAttribute("", "mwPos");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 27;
							eatText14(v);
							continue outer;
						}
						state = 27;
						continue outer;
					case 4:
						state = 5;
						eatText8(value);
						return;
					case 39:
						attIdx = context.getAttribute("", "plural_male_noun");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 42;
							eatText15(v);
							continue outer;
						}
						state = 42;
						continue outer;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

	}

}
