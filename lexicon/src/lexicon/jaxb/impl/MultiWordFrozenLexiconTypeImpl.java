//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.06.21 at 03:05:37 PM IDT 
//


package lexicon.jaxb.impl;

public class MultiWordFrozenLexiconTypeImpl implements lexicon.jaxb.MultiWordFrozenLexiconType, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
{

    protected java.lang.String _Type;
    protected boolean has_Construct1;
    protected boolean _Construct1;
    protected boolean has_Prefix;
    protected boolean _Prefix;
    protected java.lang.String _Number;
    protected boolean has_Consecutive;
    protected boolean _Consecutive;
    protected boolean has_Base2;
    protected boolean _Base2;
    protected com.sun.xml.bind.util.ListImpl _AddOrReplaceOrRemove;
    protected java.lang.String _MwPos;
    protected boolean has_Possessive2;
    protected boolean _Possessive2;
    protected boolean has_AcceptDefiniteness;
    protected boolean _AcceptDefiniteness;
    protected boolean has_Definiteness;
    protected boolean _Definiteness;
    public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (lexicon.jaxb.MultiWordFrozenLexiconType.class);
    }

    public java.lang.String getType() {
        if (_Type == null) {
            return "unspecified";
        } else {
            return _Type;
        }
    }

    public void setType(java.lang.String value) {
        _Type = value;
    }

    public boolean isConstruct1() {
        if (!has_Construct1) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Construct1;
        }
    }

    public void setConstruct1(boolean value) {
        _Construct1 = value;
        has_Construct1 = true;
    }

    public boolean isPrefix() {
        if (!has_Prefix) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Prefix;
        }
    }

    public void setPrefix(boolean value) {
        _Prefix = value;
        has_Prefix = true;
    }

    public java.lang.String getNumber() {
        if (_Number == null) {
            return "unspecified";
        } else {
            return _Number;
        }
    }

    public void setNumber(java.lang.String value) {
        _Number = value;
    }

    public boolean isConsecutive() {
        if (!has_Consecutive) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("true"));
        } else {
            return _Consecutive;
        }
    }

    public void setConsecutive(boolean value) {
        _Consecutive = value;
        has_Consecutive = true;
    }

    public boolean isBase2() {
        if (!has_Base2) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Base2;
        }
    }

    public void setBase2(boolean value) {
        _Base2 = value;
        has_Base2 = true;
    }

    protected com.sun.xml.bind.util.ListImpl _getAddOrReplaceOrRemove() {
        if (_AddOrReplaceOrRemove == null) {
            _AddOrReplaceOrRemove = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _AddOrReplaceOrRemove;
    }

    public java.util.List getAddOrReplaceOrRemove() {
        return _getAddOrReplaceOrRemove();
    }

    public java.lang.String getMwPos() {
        return _MwPos;
    }

    public void setMwPos(java.lang.String value) {
        _MwPos = value;
    }

    public boolean isPossessive2() {
        if (!has_Possessive2) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Possessive2;
        }
    }

    public void setPossessive2(boolean value) {
        _Possessive2 = value;
        has_Possessive2 = true;
    }

    public boolean isAcceptDefiniteness() {
        if (!has_AcceptDefiniteness) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _AcceptDefiniteness;
        }
    }

    public void setAcceptDefiniteness(boolean value) {
        _AcceptDefiniteness = value;
        has_AcceptDefiniteness = true;
    }

    public boolean isDefiniteness() {
        if (!has_Definiteness) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Definiteness;
        }
    }

    public void setDefiniteness(boolean value) {
        _Definiteness = value;
        has_Definiteness = true;
    }

    public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
        return new lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx7 = 0;
        final int len7 = ((_AddOrReplaceOrRemove == null)? 0 :_AddOrReplaceOrRemove.size());
        while (idx7 != len7) {
            while (idx7 != len7) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove.get(idx7 ++)), "AddOrReplaceOrRemove");
            }
        }
    }

    public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx7 = 0;
        final int len7 = ((_AddOrReplaceOrRemove == null)? 0 :_AddOrReplaceOrRemove.size());
        if (has_AcceptDefiniteness) {
            context.startAttribute("", "acceptDefiniteness");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _AcceptDefiniteness)), "AcceptDefiniteness");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Base2) {
            context.startAttribute("", "base2");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Base2)), "Base2");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Consecutive) {
            context.startAttribute("", "consecutive");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Consecutive)), "Consecutive");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Construct1) {
            context.startAttribute("", "construct1");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Construct1)), "Construct1");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Definiteness) {
            context.startAttribute("", "definiteness");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Definiteness)), "Definiteness");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_MwPos!= null) {
            context.startAttribute("", "mwPos");
            try {
                context.text(((java.lang.String) _MwPos), "MwPos");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Number!= null) {
            context.startAttribute("", "number");
            try {
                context.text(((java.lang.String) _Number), "Number");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Possessive2) {
            context.startAttribute("", "possessive2");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Possessive2)), "Possessive2");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Prefix) {
            context.startAttribute("", "prefix");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Prefix)), "Prefix");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Type!= null) {
            context.startAttribute("", "type");
            try {
                context.text(((java.lang.String) _Type), "Type");
            } catch (java.lang.Exception e) {
                lexicon.jaxb.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        while (idx7 != len7) {
            while (idx7 != len7) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove.get(idx7 ++)), "AddOrReplaceOrRemove");
            }
        }
    }

    public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx7 = 0;
        final int len7 = ((_AddOrReplaceOrRemove == null)? 0 :_AddOrReplaceOrRemove.size());
        while (idx7 != len7) {
            while (idx7 != len7) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove.get(idx7 ++)), "AddOrReplaceOrRemove");
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (lexicon.jaxb.MultiWordFrozenLexiconType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000 com.sun.msv.grammar.OneO"
+"rMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\u0012ppsq\u0000~\u0000\u0012ppsq\u0000~\u0000\u000fsr\u0000\u0011java.lang.Boolean\u00cd r\u0080"
+"\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.sun.msv.grammar.trex.ElementPatte"
+"rn\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;x"
+"r\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndecla"
+"redAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0018p\u0000sq\u0000~\u0000\u0012ppsq\u0000~\u0000\u000f"
+"q\u0000~\u0000\u0018psr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq"
+"\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u001axq\u0000~\u0000\u0003q\u0000~\u0000\u0018psr\u00002com.sun.msv.grammar.Exp"
+"ression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u0017\u0001q\u0000~\u0000\"sr\u0000 "
+"com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.g"
+"rammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Express"
+"ion$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000#q\u0000~\u0000(sr\u0000#com.sun."
+"msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/l"
+"ang/String;L\u0000\fnamespaceURIq\u0000~\u0000*xq\u0000~\u0000%t\u0000+lexicon.jaxb.MultiWo"
+"rdFrozenLexiconType.Addt\u0000+http://java.sun.com/jaxb/xjc/dummy"
+"-elementsq\u0000~\u0000(sq\u0000~\u0000\u000fppsq\u0000~\u0000\u0019pp\u0000sq\u0000~\u0000\u0012ppsq\u0000~\u0000\u000fq\u0000~\u0000\u0018psq\u0000~\u0000\u001fq\u0000~"
+"\u0000\u0018pq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)t\u0000/lexicon.jaxb.MultiWordFrozenLexic"
+"onType.Replaceq\u0000~\u0000-sq\u0000~\u0000\u000fppsq\u0000~\u0000\u0019pp\u0000sq\u0000~\u0000\u0012ppsq\u0000~\u0000\u000fq\u0000~\u0000\u0018psq\u0000~"
+"\u0000\u001fq\u0000~\u0000\u0018pq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)t\u0000.lexicon.jaxb.MultiWordFrozen"
+"LexiconType.Removeq\u0000~\u0000-sq\u0000~\u0000\u0012ppsq\u0000~\u0000\u001fq\u0000~\u0000\u0018psr\u0000\u001bcom.sun.msv.g"
+"rammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datat"
+"ype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000"
+"~\u0000\u0003ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*"
+"com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com"
+".sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv"
+".datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000*L"
+"\u0000\btypeNameq\u0000~\u0000*L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/Whi"
+"teSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0007boo"
+"leansr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collaps"
+"e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$NullSetExpre"
+"ssion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB"
+"\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000*L\u0000\fnamespaceURIq\u0000~\u0000*xpq\u0000~\u0000Iq\u0000~\u0000Hsq\u0000~\u0000"
+")t\u0000\u0012acceptDefinitenesst\u0000\u0000q\u0000~\u0000(sq\u0000~\u0000\u0012ppsq\u0000~\u0000\u001fq\u0000~\u0000\u0018pq\u0000~\u0000Asq\u0000~\u0000"
+")t\u0000\u0005base2q\u0000~\u0000Sq\u0000~\u0000(sq\u0000~\u0000\u0012ppsq\u0000~\u0000\u001fq\u0000~\u0000\u0018pq\u0000~\u0000Asq\u0000~\u0000)t\u0000\u000bconsecu"
+"tiveq\u0000~\u0000Sq\u0000~\u0000(sq\u0000~\u0000\u0012ppsq\u0000~\u0000\u001fq\u0000~\u0000\u0018pq\u0000~\u0000Asq\u0000~\u0000)t\u0000\nconstruct1q\u0000"
+"~\u0000Sq\u0000~\u0000(sq\u0000~\u0000\u0012ppsq\u0000~\u0000\u001fq\u0000~\u0000\u0018pq\u0000~\u0000Asq\u0000~\u0000)t\u0000\fdefinitenessq\u0000~\u0000Sq"
+"\u0000~\u0000(sq\u0000~\u0000\u0012ppsq\u0000~\u0000\u001fq\u0000~\u0000\u0018psq\u0000~\u0000>ppsr\u0000)com.sun.msv.datatype.xsd"
+".EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009c"
+"om.sun.msv.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro"
+"\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/s"
+"un/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/su"
+"n/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000*xq\u0000~\u0000Eq\u0000~\u0000S"
+"t\u0000\u0007PosTypeq\u0000~\u0000L\u0000\u0000sr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\ri"
+"sAlwaysValidxq\u0000~\u0000Cq\u0000~\u0000Ht\u0000\u0005tokenq\u0000~\u0000L\u0001q\u0000~\u0000qt\u0000\u000benumerationsr\u0000\u0011"
+"java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\tt\u0000\u000bunspecifiedt\u0000"
+"\u000bprepositiont\u0000\finterjectiont\u0000\u0005titlet\u0000\tadjectivet\u0000\u0004verbt\u0000\npro"
+"pernamet\u0000\u0006adverbt\u0000\u0004nounxq\u0000~\u0000Nsq\u0000~\u0000Oq\u0000~\u0000nq\u0000~\u0000Ssq\u0000~\u0000)t\u0000\u0005mwPosq"
+"\u0000~\u0000Sq\u0000~\u0000(sq\u0000~\u0000\u0012ppsq\u0000~\u0000\u001fq\u0000~\u0000\u0018psq\u0000~\u0000>ppsq\u0000~\u0000gq\u0000~\u0000St\u0000\nNumberTyp"
+"eq\u0000~\u0000L\u0000\u0000q\u0000~\u0000qq\u0000~\u0000qq\u0000~\u0000ssq\u0000~\u0000tw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013"
+"singular and pluralt\u0000\u0004dualt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pl"
+"uralxq\u0000~\u0000Nsq\u0000~\u0000Oq\u0000~\u0000\u0086q\u0000~\u0000Ssq\u0000~\u0000)t\u0000\u0006numberq\u0000~\u0000Sq\u0000~\u0000(sq\u0000~\u0000\u0012pps"
+"q\u0000~\u0000\u001fq\u0000~\u0000\u0018pq\u0000~\u0000Asq\u0000~\u0000)t\u0000\u000bpossessive2q\u0000~\u0000Sq\u0000~\u0000(sq\u0000~\u0000\u0012ppsq\u0000~\u0000\u001f"
+"q\u0000~\u0000\u0018pq\u0000~\u0000Asq\u0000~\u0000)t\u0000\u0006prefixq\u0000~\u0000Sq\u0000~\u0000(sq\u0000~\u0000\u0012ppsq\u0000~\u0000\u001fq\u0000~\u0000\u0018psq\u0000~"
+"\u0000>ppq\u0000~\u0000qq\u0000~\u0000Nsq\u0000~\u0000Oq\u0000~\u0000rq\u0000~\u0000Hsq\u0000~\u0000)t\u0000\u0004typeq\u0000~\u0000Sq\u0000~\u0000(sr\u0000\"com"
+".sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom"
+"/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv"
+".grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstre"
+"amVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000"
+"\u0000\u0000!\u0001pq\u0000~\u0000\u0005q\u0000~\u0000dq\u0000~\u0000\u0006q\u0000~\u0000Xq\u0000~\u0000\\q\u0000~\u0000\u0015q\u0000~\u0000\u0013q\u0000~\u0000\u001eq\u0000~\u00001q\u0000~\u00008q\u0000~\u0000\u000e"
+"q\u0000~\u0000\u001dq\u0000~\u00000q\u0000~\u00007q\u0000~\u0000\u0082q\u0000~\u0000\u0007q\u0000~\u0000\u0099q\u0000~\u0000\bq\u0000~\u0000<q\u0000~\u0000\u0095q\u0000~\u0000\nq\u0000~\u0000\u0016q\u0000~\u0000."
+"q\u0000~\u00005q\u0000~\u0000\rq\u0000~\u0000\tq\u0000~\u0000`q\u0000~\u0000\u000bq\u0000~\u0000\u0091q\u0000~\u0000Tq\u0000~\u0000\u0011q\u0000~\u0000\u0014q\u0000~\u0000\fx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public static class AddImpl
        extends lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl
        implements lexicon.jaxb.MultiWordFrozenLexiconType.Add, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
    {

        public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
        private static com.sun.msv.grammar.Grammar schemaFragment;

        private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
            return (lexicon.jaxb.MultiWordFrozenLexiconType.Add.class);
        }

        public java.lang.String ____jaxb_ri____getNamespaceURI() {
            return "";
        }

        public java.lang.String ____jaxb_ri____getLocalName() {
            return "add";
        }

        public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            return new lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.AddImpl.Unmarshaller(context);
        }

        public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
            context.startElement("", "add");
            super.serializeURIs(context);
            context.endNamespaceDecls();
            super.serializeAttributes(context);
            context.endAttributes();
            super.serializeBody(context);
            context.endElement();
        }

        public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public java.lang.Class getPrimaryInterface() {
            return (lexicon.jaxb.MultiWordFrozenLexiconType.Add.class);
        }

        public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
            if (schemaFragment == null) {
                schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.gramm"
+"ar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;"
+"L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004p"
+"psr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.su"
+"n.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*"
+"com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com"
+".sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv"
+".datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Lja"
+"va/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001aL\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/"
+"datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001"
+"/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpacePro"
+"cessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.White"
+"SpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expressi"
+"on$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util."
+"StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axp"
+"q\u0000~\u0000\u001eq\u0000~\u0000\u001dsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\b"
+"ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003"
+"L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005va"
+"luexp\u0000psq\u0000~\u0000\u0011ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0017q\u0000~\u0000\u001dt\u0000\u0007booleanq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000/q\u0000~\u0000\u001dsr\u0000#com"
+".sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001a"
+"L\u0000\fnamespaceURIq\u0000~\u0000\u001axr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0000xpt\u0000\u0012acceptDefinitenesst\u0000\u0000sr\u00000com.sun.msv.grammar.Expres"
+"sion$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000*\u0001q\u0000~\u00007sq\u0000~\u0000&pps"
+"q\u0000~\u0000(q\u0000~\u0000+pq\u0000~\u0000,sq\u0000~\u00001t\u0000\fdefinitenessq\u0000~\u00005q\u0000~\u00007sq\u0000~\u0000&ppsq\u0000~\u0000"
+"(q\u0000~\u0000+pq\u0000~\u0000\u0014sq\u0000~\u00001t\u0000\u0006dottedq\u0000~\u00005q\u0000~\u00007sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+psq\u0000"
+"~\u0000\u0011ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xsd.Dat"
+"aTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.data"
+"type.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needV"
+"alueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatat"
+"ypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/Concrete"
+"Type;L\u0000\tfacetNameq\u0000~\u0000\u001axq\u0000~\u0000\u0019q\u0000~\u00005t\u0000\fRegisterTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001c"
+"q\u0000~\u0000\u001ct\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?"
+"@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000Kq\u0000~\u00005sq\u0000"
+"~\u00001t\u0000\bregisterq\u0000~\u00005q\u0000~\u00007sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+psq\u0000~\u0000\u0011ppsq\u0000~\u0000Dq\u0000"
+"~\u00005t\u0000\fSpellingTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001cq\u0000~\u0000Lsq\u0000~\u0000Mw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002"
+"t\u0000\tirregulart\u0000\bstandardxq\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000Yq\u0000~\u00005sq\u0000~\u00001t\u0000\bspelli"
+"ngq\u0000~\u00005q\u0000~\u00007sq\u0000~\u0000(ppq\u0000~\u0000\u0014sq\u0000~\u00001t\u0000\u000etransliteratedq\u0000~\u00005sq\u0000~\u0000(p"
+"pq\u0000~\u0000\u0014sq\u0000~\u00001t\u0000\bundottedq\u0000~\u00005sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+psq\u0000~\u0000\u0011ppsr\u0000\""
+"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0017q\u0000~\u0000\u001dt\u0000\u0005Q"
+"Nameq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000kq\u0000~\u0000\u001dsq\u0000~\u00001t\u0000\u0004typet\u0000)http://www.w3."
+"org/2001/XMLSchema-instanceq\u0000~\u00007sq\u0000~\u00001t\u0000\u0003addq\u0000~\u00005sr\u0000\"com.sun"
+".msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun"
+"/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.gra"
+"mmar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVe"
+"rsionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u000e\u0001"
+"pq\u0000~\u0000=q\u0000~\u00009q\u0000~\u0000\u0010q\u0000~\u0000\'q\u0000~\u0000Aq\u0000~\u0000\nq\u0000~\u0000\u000fq\u0000~\u0000\u000eq\u0000~\u0000fq\u0000~\u0000\fq\u0000~\u0000\rq\u0000~\u0000"
+"\u000bq\u0000~\u0000\tq\u0000~\u0000Ux"));
            }
            return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
        }

        public class Unmarshaller
            extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
        {


            public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
                super(context, "----");
            }

            protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
                this(context);
                state = startState;
            }

            public java.lang.Object owner() {
                return lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.AddImpl.this;
            }

            public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "acceptDefiniteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        case  0 :
                            if (("add" == ___local)&&("" == ___uri)) {
                                context.pushAttributes(__atts, true);
                                state = 1;
                                return ;
                            }
                            break;
                    }
                    super.enterElement(___uri, ___local, ___qname, __atts);
                    break;
                }
            }

            public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  2 :
                            if (("add" == ___local)&&("" == ___uri)) {
                                context.popAttributes();
                                state = 3;
                                return ;
                            }
                            break;
                        case  1 :
                            attIdx = context.getAttribute("", "acceptDefiniteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromLeaveElement(___uri, ___local, ___qname);
                            return ;
                    }
                    super.leaveElement(___uri, ___local, ___qname);
                    break;
                }
            }

            public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            if (("acceptDefiniteness" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("definiteness" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dotted" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("register" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("spelling" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("transliterated" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.AddImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                            return ;
                    }
                    super.enterAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "acceptDefiniteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                            return ;
                    }
                    super.leaveAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void handleText(final java.lang.String value)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    try {
                        switch (state) {
                            case  1 :
                                attIdx = context.getAttribute("", "acceptDefiniteness");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "definiteness");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dotted");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "register");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "spelling");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "transliterated");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                break;
                            case  3 :
                                revertToParentFromText(value);
                                return ;
                        }
                    } catch (java.lang.RuntimeException e) {
                        handleUnexpectedTextException(value, e);
                    }
                    break;
                }
            }

        }

    }

    public static class RemoveImpl
        extends lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl
        implements lexicon.jaxb.MultiWordFrozenLexiconType.Remove, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
    {

        public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
        private static com.sun.msv.grammar.Grammar schemaFragment;

        private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
            return (lexicon.jaxb.MultiWordFrozenLexiconType.Remove.class);
        }

        public java.lang.String ____jaxb_ri____getNamespaceURI() {
            return "";
        }

        public java.lang.String ____jaxb_ri____getLocalName() {
            return "remove";
        }

        public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            return new lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.RemoveImpl.Unmarshaller(context);
        }

        public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
            context.startElement("", "remove");
            super.serializeURIs(context);
            context.endNamespaceDecls();
            super.serializeAttributes(context);
            context.endAttributes();
            super.serializeBody(context);
            context.endElement();
        }

        public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public java.lang.Class getPrimaryInterface() {
            return (lexicon.jaxb.MultiWordFrozenLexiconType.Remove.class);
        }

        public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
            if (schemaFragment == null) {
                schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.gramm"
+"ar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;"
+"L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004p"
+"psr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.su"
+"n.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*"
+"com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com"
+".sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv"
+".datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Lja"
+"va/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001aL\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/"
+"datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001"
+"/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpacePro"
+"cessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.White"
+"SpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expressi"
+"on$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util."
+"StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axp"
+"q\u0000~\u0000\u001eq\u0000~\u0000\u001dsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\b"
+"ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003"
+"L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005va"
+"luexp\u0000psq\u0000~\u0000\u0011ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0017q\u0000~\u0000\u001dt\u0000\u0007booleanq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000/q\u0000~\u0000\u001dsr\u0000#com"
+".sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001a"
+"L\u0000\fnamespaceURIq\u0000~\u0000\u001axr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0000xpt\u0000\u0012acceptDefinitenesst\u0000\u0000sr\u00000com.sun.msv.grammar.Expres"
+"sion$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000*\u0001q\u0000~\u00007sq\u0000~\u0000&pps"
+"q\u0000~\u0000(q\u0000~\u0000+pq\u0000~\u0000,sq\u0000~\u00001t\u0000\fdefinitenessq\u0000~\u00005q\u0000~\u00007sq\u0000~\u0000&ppsq\u0000~\u0000"
+"(q\u0000~\u0000+pq\u0000~\u0000\u0014sq\u0000~\u00001t\u0000\u0006dottedq\u0000~\u00005q\u0000~\u00007sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+psq\u0000"
+"~\u0000\u0011ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xsd.Dat"
+"aTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.data"
+"type.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needV"
+"alueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatat"
+"ypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/Concrete"
+"Type;L\u0000\tfacetNameq\u0000~\u0000\u001axq\u0000~\u0000\u0019q\u0000~\u00005t\u0000\fRegisterTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001c"
+"q\u0000~\u0000\u001ct\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?"
+"@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000Kq\u0000~\u00005sq\u0000"
+"~\u00001t\u0000\bregisterq\u0000~\u00005q\u0000~\u00007sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+psq\u0000~\u0000\u0011ppsq\u0000~\u0000Dq\u0000"
+"~\u00005t\u0000\fSpellingTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001cq\u0000~\u0000Lsq\u0000~\u0000Mw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002"
+"t\u0000\tirregulart\u0000\bstandardxq\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000Yq\u0000~\u00005sq\u0000~\u00001t\u0000\bspelli"
+"ngq\u0000~\u00005q\u0000~\u00007sq\u0000~\u0000(ppq\u0000~\u0000\u0014sq\u0000~\u00001t\u0000\u000etransliteratedq\u0000~\u00005sq\u0000~\u0000(p"
+"pq\u0000~\u0000\u0014sq\u0000~\u00001t\u0000\bundottedq\u0000~\u00005sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+psq\u0000~\u0000\u0011ppsr\u0000\""
+"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0017q\u0000~\u0000\u001dt\u0000\u0005Q"
+"Nameq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000kq\u0000~\u0000\u001dsq\u0000~\u00001t\u0000\u0004typet\u0000)http://www.w3."
+"org/2001/XMLSchema-instanceq\u0000~\u00007sq\u0000~\u00001t\u0000\u0006removeq\u0000~\u00005sr\u0000\"com."
+"sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/"
+"sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv."
+"grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstrea"
+"mVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000"
+"\u0000\u000e\u0001pq\u0000~\u0000=q\u0000~\u00009q\u0000~\u0000\u0010q\u0000~\u0000\'q\u0000~\u0000Aq\u0000~\u0000\nq\u0000~\u0000\u000fq\u0000~\u0000\u000eq\u0000~\u0000fq\u0000~\u0000\fq\u0000~\u0000\rq"
+"\u0000~\u0000\u000bq\u0000~\u0000\tq\u0000~\u0000Ux"));
            }
            return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
        }

        public class Unmarshaller
            extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
        {


            public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
                super(context, "----");
            }

            protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
                this(context);
                state = startState;
            }

            public java.lang.Object owner() {
                return lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.RemoveImpl.this;
            }

            public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "acceptDefiniteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        case  0 :
                            if (("remove" == ___local)&&("" == ___uri)) {
                                context.pushAttributes(__atts, true);
                                state = 1;
                                return ;
                            }
                            break;
                    }
                    super.enterElement(___uri, ___local, ___qname, __atts);
                    break;
                }
            }

            public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "acceptDefiniteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromLeaveElement(___uri, ___local, ___qname);
                            return ;
                        case  2 :
                            if (("remove" == ___local)&&("" == ___uri)) {
                                context.popAttributes();
                                state = 3;
                                return ;
                            }
                            break;
                    }
                    super.leaveElement(___uri, ___local, ___qname);
                    break;
                }
            }

            public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            if (("acceptDefiniteness" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("definiteness" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dotted" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("register" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("spelling" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("transliterated" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                            return ;
                    }
                    super.enterAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "acceptDefiniteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                        case  3 :
                            revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                            return ;
                    }
                    super.leaveAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void handleText(final java.lang.String value)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    try {
                        switch (state) {
                            case  1 :
                                attIdx = context.getAttribute("", "acceptDefiniteness");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "definiteness");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dotted");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "register");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "spelling");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "transliterated");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                break;
                            case  3 :
                                revertToParentFromText(value);
                                return ;
                        }
                    } catch (java.lang.RuntimeException e) {
                        handleUnexpectedTextException(value, e);
                    }
                    break;
                }
            }

        }

    }

    public static class ReplaceImpl
        extends lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl
        implements lexicon.jaxb.MultiWordFrozenLexiconType.Replace, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, lexicon.jaxb.impl.runtime.UnmarshallableObject, lexicon.jaxb.impl.runtime.XMLSerializable, lexicon.jaxb.impl.runtime.ValidatableObject
    {

        public final static java.lang.Class version = (lexicon.jaxb.impl.JAXBVersion.class);
        private static com.sun.msv.grammar.Grammar schemaFragment;

        private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
            return (lexicon.jaxb.MultiWordFrozenLexiconType.Replace.class);
        }

        public java.lang.String ____jaxb_ri____getNamespaceURI() {
            return "";
        }

        public java.lang.String ____jaxb_ri____getLocalName() {
            return "replace";
        }

        public lexicon.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            return new lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.ReplaceImpl.Unmarshaller(context);
        }

        public void serializeBody(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
            context.startElement("", "replace");
            super.serializeURIs(context);
            context.endNamespaceDecls();
            super.serializeAttributes(context);
            context.endAttributes();
            super.serializeBody(context);
            context.endElement();
        }

        public void serializeAttributes(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public void serializeURIs(lexicon.jaxb.impl.runtime.XMLSerializer context)
            throws org.xml.sax.SAXException
        {
        }

        public java.lang.Class getPrimaryInterface() {
            return (lexicon.jaxb.MultiWordFrozenLexiconType.Replace.class);
        }

        public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
            if (schemaFragment == null) {
                schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.gramm"
+"ar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;"
+"L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004p"
+"psr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.su"
+"n.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*"
+"com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com"
+".sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv"
+".datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Lja"
+"va/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001aL\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/"
+"datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001"
+"/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpacePro"
+"cessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.White"
+"SpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expressi"
+"on$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util."
+"StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axp"
+"q\u0000~\u0000\u001eq\u0000~\u0000\u001dsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\b"
+"ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003"
+"L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005va"
+"luexp\u0000psq\u0000~\u0000\u0011ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0017q\u0000~\u0000\u001dt\u0000\u0007booleanq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000/q\u0000~\u0000\u001dsr\u0000#com"
+".sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001a"
+"L\u0000\fnamespaceURIq\u0000~\u0000\u001axr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0000xpt\u0000\u0012acceptDefinitenesst\u0000\u0000sr\u00000com.sun.msv.grammar.Expres"
+"sion$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000*\u0001q\u0000~\u00007sq\u0000~\u0000&pps"
+"q\u0000~\u0000(q\u0000~\u0000+pq\u0000~\u0000,sq\u0000~\u00001t\u0000\fdefinitenessq\u0000~\u00005q\u0000~\u00007sq\u0000~\u0000&ppsq\u0000~\u0000"
+"(q\u0000~\u0000+pq\u0000~\u0000\u0014sq\u0000~\u00001t\u0000\u0006dottedq\u0000~\u00005q\u0000~\u00007sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+psq\u0000"
+"~\u0000\u0011ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xsd.Dat"
+"aTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.data"
+"type.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needV"
+"alueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatat"
+"ypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/Concrete"
+"Type;L\u0000\tfacetNameq\u0000~\u0000\u001axq\u0000~\u0000\u0019q\u0000~\u00005t\u0000\fRegisterTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001c"
+"q\u0000~\u0000\u001ct\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?"
+"@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u0006formalt\u0000\u0006spokent\u0000\u0007archaicxq\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000Kq\u0000~\u00005sq\u0000"
+"~\u00001t\u0000\bregisterq\u0000~\u00005q\u0000~\u00007sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+psq\u0000~\u0000\u0011ppsq\u0000~\u0000Dq\u0000"
+"~\u00005t\u0000\fSpellingTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001cq\u0000~\u0000Lsq\u0000~\u0000Mw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002"
+"t\u0000\tirregulart\u0000\bstandardxq\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000Yq\u0000~\u00005sq\u0000~\u00001t\u0000\bspelli"
+"ngq\u0000~\u00005q\u0000~\u00007sq\u0000~\u0000(ppq\u0000~\u0000\u0014sq\u0000~\u00001t\u0000\u000etransliteratedq\u0000~\u00005sq\u0000~\u0000(p"
+"pq\u0000~\u0000\u0014sq\u0000~\u00001t\u0000\bundottedq\u0000~\u00005sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000+psq\u0000~\u0000\u0011ppsr\u0000\""
+"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0017q\u0000~\u0000\u001dt\u0000\u0005Q"
+"Nameq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000kq\u0000~\u0000\u001dsq\u0000~\u00001t\u0000\u0004typet\u0000)http://www.w3."
+"org/2001/XMLSchema-instanceq\u0000~\u00007sq\u0000~\u00001t\u0000\u0007replaceq\u0000~\u00005sr\u0000\"com"
+".sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom"
+"/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv"
+".grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstre"
+"amVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000"
+"\u0000\u0000\u000e\u0001pq\u0000~\u0000=q\u0000~\u00009q\u0000~\u0000\u0010q\u0000~\u0000\'q\u0000~\u0000Aq\u0000~\u0000\nq\u0000~\u0000\u000fq\u0000~\u0000\u000eq\u0000~\u0000fq\u0000~\u0000\fq\u0000~\u0000\r"
+"q\u0000~\u0000\u000bq\u0000~\u0000\tq\u0000~\u0000Ux"));
            }
            return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
        }

        public class Unmarshaller
            extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
        {


            public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
                super(context, "----");
            }

            protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
                this(context);
                state = startState;
            }

            public java.lang.Object owner() {
                return lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.ReplaceImpl.this;
            }

            public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        case  0 :
                            if (("replace" == ___local)&&("" == ___uri)) {
                                context.pushAttributes(__atts, true);
                                state = 1;
                                return ;
                            }
                            break;
                        case  1 :
                            attIdx = context.getAttribute("", "acceptDefiniteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                                return ;
                            }
                            break;
                    }
                    super.enterElement(___uri, ___local, ___qname, __atts);
                    break;
                }
            }

            public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromLeaveElement(___uri, ___local, ___qname);
                            return ;
                        case  2 :
                            if (("replace" == ___local)&&("" == ___uri)) {
                                context.popAttributes();
                                state = 3;
                                return ;
                            }
                            break;
                        case  1 :
                            attIdx = context.getAttribute("", "acceptDefiniteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.leaveElement(___uri, ___local, ___qname);
                    break;
                }
            }

            public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            if (("acceptDefiniteness" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("definiteness" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("dotted" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("register" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("spelling" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            if (("transliterated" == ___local)&&("" == ___uri)) {
                                spawnHandlerFromEnterAttribute((((lexicon.jaxb.impl.MultiWordFrozenExceptionTypeImpl)lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.enterAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    switch (state) {
                        case  3 :
                            revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "acceptDefiniteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "dotted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "register");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "spelling");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            attIdx = context.getAttribute("", "transliterated");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                                return ;
                            }
                            break;
                    }
                    super.leaveAttribute(___uri, ___local, ___qname);
                    break;
                }
            }

            public void handleText(final java.lang.String value)
                throws org.xml.sax.SAXException
            {
                int attIdx;
                outer:
                while (true) {
                    try {
                        switch (state) {
                            case  3 :
                                revertToParentFromText(value);
                                return ;
                            case  1 :
                                attIdx = context.getAttribute("", "acceptDefiniteness");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "definiteness");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "dotted");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "register");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "spelling");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                attIdx = context.getAttribute("", "transliterated");
                                if (attIdx >= 0) {
                                    context.consumeAttribute(attIdx);
                                    context.getCurrentHandler().text(value);
                                    return ;
                                }
                                break;
                        }
                    } catch (java.lang.RuntimeException e) {
                        handleUnexpectedTextException(value, e);
                    }
                    break;
                }
            }

        }

    }

    public class Unmarshaller
        extends lexicon.jaxb.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context) {
            super(context, "--------------------------------");
        }

        protected Unmarshaller(lexicon.jaxb.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  12 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText1(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "acceptDefiniteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "consecutive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText3(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  27 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 30;
                            eatText4(v);
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText5(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  15 :
                        attIdx = context.getAttribute("", "mwPos");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText6(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  21 :
                        attIdx = context.getAttribute("", "possessive2");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 24;
                            eatText7(v);
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "base2");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText8(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  30 :
                        if (("add" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.AddImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.AddImpl.class), 31, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.ReplaceImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.ReplaceImpl.class), 31, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.RemoveImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.RemoveImpl.class), 31, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 31;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "prefix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 27;
                            eatText9(v);
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  31 :
                        if (("add" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.AddImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.AddImpl.class), 31, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("replace" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.ReplaceImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.ReplaceImpl.class), 31, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("remove" == ___local)&&("" == ___uri)) {
                            _getAddOrReplaceOrRemove().add(((lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.RemoveImpl) spawnChildFromEnterElement((lexicon.jaxb.impl.MultiWordFrozenLexiconTypeImpl.RemoveImpl.class), 31, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  9 :
                        attIdx = context.getAttribute("", "construct1");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText10(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Definiteness = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Definiteness = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AcceptDefiniteness = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_AcceptDefiniteness = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Consecutive = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Consecutive = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Type = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Number = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _MwPos = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Possessive2 = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Possessive2 = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText8(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Base2 = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Base2 = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText9(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Prefix = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Prefix = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText10(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Construct1 = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Construct1 = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  12 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText1(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "acceptDefiniteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "consecutive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText3(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  27 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 30;
                            eatText4(v);
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText5(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  15 :
                        attIdx = context.getAttribute("", "mwPos");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText6(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  21 :
                        attIdx = context.getAttribute("", "possessive2");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 24;
                            eatText7(v);
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "base2");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText8(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  30 :
                        state = 31;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "prefix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 27;
                            eatText9(v);
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  31 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  9 :
                        attIdx = context.getAttribute("", "construct1");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText10(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  12 :
                        if (("definiteness" == ___local)&&("" == ___uri)) {
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                    case  0 :
                        if (("acceptDefiniteness" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  6 :
                        if (("consecutive" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  27 :
                        if (("type" == ___local)&&("" == ___uri)) {
                            state = 28;
                            return ;
                        }
                        state = 30;
                        continue outer;
                    case  18 :
                        if (("number" == ___local)&&("" == ___uri)) {
                            state = 19;
                            return ;
                        }
                        state = 21;
                        continue outer;
                    case  15 :
                        if (("mwPos" == ___local)&&("" == ___uri)) {
                            state = 16;
                            return ;
                        }
                        state = 18;
                        continue outer;
                    case  21 :
                        if (("possessive2" == ___local)&&("" == ___uri)) {
                            state = 22;
                            return ;
                        }
                        state = 24;
                        continue outer;
                    case  3 :
                        if (("base2" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  30 :
                        state = 31;
                        continue outer;
                    case  24 :
                        if (("prefix" == ___local)&&("" == ___uri)) {
                            state = 25;
                            return ;
                        }
                        state = 27;
                        continue outer;
                    case  31 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  9 :
                        if (("construct1" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        if (("base2" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  12 :
                        attIdx = context.getAttribute("", "definiteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText1(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  26 :
                        if (("prefix" == ___local)&&("" == ___uri)) {
                            state = 27;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "acceptDefiniteness");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "consecutive");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText3(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  8 :
                        if (("consecutive" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  14 :
                        if (("definiteness" == ___local)&&("" == ___uri)) {
                            state = 15;
                            return ;
                        }
                        break;
                    case  27 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 30;
                            eatText4(v);
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  29 :
                        if (("type" == ___local)&&("" == ___uri)) {
                            state = 30;
                            return ;
                        }
                        break;
                    case  18 :
                        attIdx = context.getAttribute("", "number");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText5(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  23 :
                        if (("possessive2" == ___local)&&("" == ___uri)) {
                            state = 24;
                            return ;
                        }
                        break;
                    case  11 :
                        if (("construct1" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                    case  15 :
                        attIdx = context.getAttribute("", "mwPos");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText6(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  21 :
                        attIdx = context.getAttribute("", "possessive2");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 24;
                            eatText7(v);
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "base2");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText8(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  17 :
                        if (("mwPos" == ___local)&&("" == ___uri)) {
                            state = 18;
                            return ;
                        }
                        break;
                    case  30 :
                        state = 31;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "prefix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 27;
                            eatText9(v);
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  20 :
                        if (("number" == ___local)&&("" == ___uri)) {
                            state = 21;
                            return ;
                        }
                        break;
                    case  31 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  9 :
                        attIdx = context.getAttribute("", "construct1");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText10(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  2 :
                        if (("acceptDefiniteness" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  12 :
                            attIdx = context.getAttribute("", "definiteness");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 15;
                                eatText1(v);
                                continue outer;
                            }
                            state = 15;
                            continue outer;
                        case  0 :
                            attIdx = context.getAttribute("", "acceptDefiniteness");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText2(v);
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  6 :
                            attIdx = context.getAttribute("", "consecutive");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 9;
                                eatText3(v);
                                continue outer;
                            }
                            state = 9;
                            continue outer;
                        case  27 :
                            attIdx = context.getAttribute("", "type");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 30;
                                eatText4(v);
                                continue outer;
                            }
                            state = 30;
                            continue outer;
                        case  16 :
                            state = 17;
                            eatText6(value);
                            return ;
                        case  22 :
                            state = 23;
                            eatText7(value);
                            return ;
                        case  13 :
                            state = 14;
                            eatText1(value);
                            return ;
                        case  1 :
                            state = 2;
                            eatText2(value);
                            return ;
                        case  28 :
                            state = 29;
                            eatText4(value);
                            return ;
                        case  18 :
                            attIdx = context.getAttribute("", "number");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 21;
                                eatText5(v);
                                continue outer;
                            }
                            state = 21;
                            continue outer;
                        case  15 :
                            attIdx = context.getAttribute("", "mwPos");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 18;
                                eatText6(v);
                                continue outer;
                            }
                            state = 18;
                            continue outer;
                        case  25 :
                            state = 26;
                            eatText9(value);
                            return ;
                        case  4 :
                            state = 5;
                            eatText8(value);
                            return ;
                        case  21 :
                            attIdx = context.getAttribute("", "possessive2");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 24;
                                eatText7(v);
                                continue outer;
                            }
                            state = 24;
                            continue outer;
                        case  3 :
                            attIdx = context.getAttribute("", "base2");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 6;
                                eatText8(v);
                                continue outer;
                            }
                            state = 6;
                            continue outer;
                        case  10 :
                            state = 11;
                            eatText10(value);
                            return ;
                        case  30 :
                            state = 31;
                            continue outer;
                        case  24 :
                            attIdx = context.getAttribute("", "prefix");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 27;
                                eatText9(v);
                                continue outer;
                            }
                            state = 27;
                            continue outer;
                        case  31 :
                            revertToParentFromText(value);
                            return ;
                        case  9 :
                            attIdx = context.getAttribute("", "construct1");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 12;
                                eatText10(v);
                                continue outer;
                            }
                            state = 12;
                            continue outer;
                        case  7 :
                            state = 8;
                            eatText3(value);
                            return ;
                        case  19 :
                            state = 20;
                            eatText5(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
