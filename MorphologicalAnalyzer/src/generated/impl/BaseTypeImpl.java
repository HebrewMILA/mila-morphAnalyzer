//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.06.14 at 03:41:34 PM IDT 
//

package generated.impl;

public class BaseTypeImpl implements generated.BaseType,
		com.sun.xml.bind.JAXBObject,
		generated.impl.runtime.UnmarshallableObject,
		generated.impl.runtime.XMLSerializable,
		generated.impl.runtime.ValidatableObject {

	public class Unmarshaller extends
			generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(generated.impl.runtime.UnmarshallingContext context) {
			super(context,
					"--------------------------------------------------------------------");
		}

		protected Unmarshaller(
				generated.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_TransliteratedLexiconItem = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText2(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_LexiconItem = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText3(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_DottedLexiconItem = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText4(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_LexiconPointer = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		@Override
		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 48:
					if (("type" == ___local) && ("" == ___uri)) {
						_NumberExpression = ((generated.impl.NumberExpressionTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.NumberExpressionTypeImpl.class),
								49, ___uri, ___local, ___qname));
						return;
					}
					_NumberExpression = ((generated.impl.NumberExpressionTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.NumberExpressionTypeImpl.class),
							49, ___uri, ___local, ___qname));
					return;
				case 22:
					if (("binyan" == ___local) && ("" == ___uri)) {
						_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ParticipleTypeImpl.class), 23,
								___uri, ___local, ___qname));
						return;
					}
					if (("definiteness" == ___local) && ("" == ___uri)) {
						_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ParticipleTypeImpl.class), 23,
								___uri, ___local, ___qname));
						return;
					}
					if (("expansion" == ___local) && ("" == ___uri)) {
						_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ParticipleTypeImpl.class), 23,
								___uri, ___local, ___qname));
						return;
					}
					if (("gender" == ___local) && ("" == ___uri)) {
						_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ParticipleTypeImpl.class), 23,
								___uri, ___local, ___qname));
						return;
					}
					if (("mood" == ___local) && ("" == ___uri)) {
						_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ParticipleTypeImpl.class), 23,
								___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ParticipleTypeImpl.class), 23,
								___uri, ___local, ___qname));
						return;
					}
					if (("person" == ___local) && ("" == ___uri)) {
						_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ParticipleTypeImpl.class), 23,
								___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ParticipleTypeImpl.class), 23,
								___uri, ___local, ___qname));
						return;
					}
					if (("root" == ___local) && ("" == ___uri)) {
						_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ParticipleTypeImpl.class), 23,
								___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ParticipleTypeImpl.class), 23,
								___uri, ___local, ___qname));
						return;
					}
					if (("status" == ___local) && ("" == ___uri)) {
						_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ParticipleTypeImpl.class), 23,
								___uri, ___local, ___qname));
						return;
					}
					if (("subcoordinating" == ___local) && ("" == ___uri)) {
						_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ParticipleTypeImpl.class), 23,
								___uri, ___local, ___qname));
						return;
					}
					if (("type" == ___local) && ("" == ___uri)) {
						_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ParticipleTypeImpl.class), 23,
								___uri, ___local, ___qname));
						return;
					}
					_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.ParticipleTypeImpl.class), 23,
							___uri, ___local, ___qname));
					return;
				case 62:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						_Title = ((generated.impl.TitleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.TitleTypeImpl.class), 63,
								___uri, ___local, ___qname));
						return;
					}
					if (("expansion" == ___local) && ("" == ___uri)) {
						_Title = ((generated.impl.TitleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.TitleTypeImpl.class), 63,
								___uri, ___local, ___qname));
						return;
					}
					if (("gender" == ___local) && ("" == ___uri)) {
						_Title = ((generated.impl.TitleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.TitleTypeImpl.class), 63,
								___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_Title = ((generated.impl.TitleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.TitleTypeImpl.class), 63,
								___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Title = ((generated.impl.TitleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.TitleTypeImpl.class), 63,
								___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Title = ((generated.impl.TitleTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.TitleTypeImpl.class), 63,
								___uri, ___local, ___qname));
						return;
					}
					_Title = ((generated.impl.TitleTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.TitleTypeImpl.class), 63, ___uri,
							___local, ___qname));
					return;
				case 44:
					if (("register" == ___local) && ("" == ___uri)) {
						_Interjection = ((generated.impl.InterjectionTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.InterjectionTypeImpl.class),
								45, ___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Interjection = ((generated.impl.InterjectionTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.InterjectionTypeImpl.class),
								45, ___uri, ___local, ___qname));
						return;
					}
					_Interjection = ((generated.impl.InterjectionTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.InterjectionTypeImpl.class), 45,
							___uri, ___local, ___qname));
					return;
				case 34:
					_Foreign = ((generated.impl.ForeignTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.ForeignTypeImpl.class), 35, ___uri,
							___local, ___qname));
					return;
				case 60:
					if (("gender" == ___local) && ("" == ___uri)) {
						_Existential = ((generated.impl.ExistentialTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ExistentialTypeImpl.class), 61,
								___uri, ___local, ___qname));
						return;
					}
					if (("interrogative" == ___local) && ("" == ___uri)) {
						_Existential = ((generated.impl.ExistentialTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ExistentialTypeImpl.class), 61,
								___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_Existential = ((generated.impl.ExistentialTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ExistentialTypeImpl.class), 61,
								___uri, ___local, ___qname));
						return;
					}
					if (("person" == ___local) && ("" == ___uri)) {
						_Existential = ((generated.impl.ExistentialTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ExistentialTypeImpl.class), 61,
								___uri, ___local, ___qname));
						return;
					}
					if (("polarity" == ___local) && ("" == ___uri)) {
						_Existential = ((generated.impl.ExistentialTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ExistentialTypeImpl.class), 61,
								___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Existential = ((generated.impl.ExistentialTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ExistentialTypeImpl.class), 61,
								___uri, ___local, ___qname));
						return;
					}
					if (("root" == ___local) && ("" == ___uri)) {
						_Existential = ((generated.impl.ExistentialTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ExistentialTypeImpl.class), 61,
								___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Existential = ((generated.impl.ExistentialTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ExistentialTypeImpl.class), 61,
								___uri, ___local, ___qname));
						return;
					}
					if (("tense" == ___local) && ("" == ___uri)) {
						_Existential = ((generated.impl.ExistentialTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ExistentialTypeImpl.class), 61,
								___uri, ___local, ___qname));
						return;
					}
					_Existential = ((generated.impl.ExistentialTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.ExistentialTypeImpl.class), 61,
							___uri, ___local, ___qname));
					return;
				case 13:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						_Unknown = ((generated.impl.UnknownTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.UnknownTypeImpl.class), 14,
								___uri, ___local, ___qname));
						return;
					}
					_Unknown = ((generated.impl.UnknownTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.UnknownTypeImpl.class), 14, ___uri,
							___local, ___qname));
					return;
				case 36:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						_Numeral = ((generated.impl.NumeralTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.NumeralTypeImpl.class), 37,
								___uri, ___local, ___qname));
						return;
					}
					if (("gender" == ___local) && ("" == ___uri)) {
						_Numeral = ((generated.impl.NumeralTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.NumeralTypeImpl.class), 37,
								___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_Numeral = ((generated.impl.NumeralTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.NumeralTypeImpl.class), 37,
								___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Numeral = ((generated.impl.NumeralTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.NumeralTypeImpl.class), 37,
								___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Numeral = ((generated.impl.NumeralTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.NumeralTypeImpl.class), 37,
								___uri, ___local, ___qname));
						return;
					}
					if (("status" == ___local) && ("" == ___uri)) {
						_Numeral = ((generated.impl.NumeralTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.NumeralTypeImpl.class), 37,
								___uri, ___local, ___qname));
						return;
					}
					if (("type" == ___local) && ("" == ___uri)) {
						_Numeral = ((generated.impl.NumeralTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.NumeralTypeImpl.class), 37,
								___uri, ___local, ___qname));
						return;
					}
					if (("value" == ___local) && ("" == ___uri)) {
						_Numeral = ((generated.impl.NumeralTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.NumeralTypeImpl.class), 37,
								___uri, ___local, ___qname));
						return;
					}
					_Numeral = ((generated.impl.NumeralTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.NumeralTypeImpl.class), 37, ___uri,
							___local, ___qname));
					return;
				case 26:
					if (("register" == ___local) && ("" == ___uri)) {
						_Impersonal = ((generated.impl.ImpersonalTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ImpersonalTypeImpl.class), 27,
								___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Impersonal = ((generated.impl.ImpersonalTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ImpersonalTypeImpl.class), 27,
								___uri, ___local, ___qname));
						return;
					}
					_Impersonal = ((generated.impl.ImpersonalTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.ImpersonalTypeImpl.class), 27,
							___uri, ___local, ___qname));
					return;
				case 40:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						_ProperName = ((generated.impl.ProperNameTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ProperNameTypeImpl.class), 41,
								___uri, ___local, ___qname));
						return;
					}
					if (("expansion" == ___local) && ("" == ___uri)) {
						_ProperName = ((generated.impl.ProperNameTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ProperNameTypeImpl.class), 41,
								___uri, ___local, ___qname));
						return;
					}
					if (("gender" == ___local) && ("" == ___uri)) {
						_ProperName = ((generated.impl.ProperNameTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ProperNameTypeImpl.class), 41,
								___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_ProperName = ((generated.impl.ProperNameTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ProperNameTypeImpl.class), 41,
								___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_ProperName = ((generated.impl.ProperNameTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ProperNameTypeImpl.class), 41,
								___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_ProperName = ((generated.impl.ProperNameTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ProperNameTypeImpl.class), 41,
								___uri, ___local, ___qname));
						return;
					}
					if (("type" == ___local) && ("" == ___uri)) {
						_ProperName = ((generated.impl.ProperNameTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ProperNameTypeImpl.class), 41,
								___uri, ___local, ___qname));
						return;
					}
					_ProperName = ((generated.impl.ProperNameTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.ProperNameTypeImpl.class), 41,
							___uri, ___local, ___qname));
					return;
				case 9:
					if (("transliteratedLexiconItem" == ___local)
							&& ("" == ___uri)) {
						state = 10;
						return;
					}
					state = 12;
					continue outer;
				case 32:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						_Noun = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								33, ___uri, ___local, ___qname));
						return;
					}
					if (("expansion" == ___local) && ("" == ___uri)) {
						_Noun = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								33, ___uri, ___local, ___qname));
						return;
					}
					if (("foreign" == ___local) && ("" == ___uri)) {
						_Noun = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								33, ___uri, ___local, ___qname));
						return;
					}
					if (("function" == ___local) && ("" == ___uri)) {
						_Noun = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								33, ___uri, ___local, ___qname));
						return;
					}
					if (("gender" == ___local) && ("" == ___uri)) {
						_Noun = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								33, ___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_Noun = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								33, ___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Noun = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								33, ___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Noun = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								33, ___uri, ___local, ___qname));
						return;
					}
					if (("status" == ___local) && ("" == ___uri)) {
						_Noun = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								33, ___uri, ___local, ___qname));
						return;
					}
					_Noun = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
							33, ___uri, ___local, ___qname));
					return;
				case 16:
					if (("expansion" == ___local) && ("" == ___uri)) {
						_Preposition = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberPersonTypeImpl.class),
								17, ___uri, ___local, ___qname));
						return;
					}
					if (("gender" == ___local) && ("" == ___uri)) {
						_Preposition = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberPersonTypeImpl.class),
								17, ___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_Preposition = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberPersonTypeImpl.class),
								17, ___uri, ___local, ___qname));
						return;
					}
					if (("person" == ___local) && ("" == ___uri)) {
						_Preposition = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberPersonTypeImpl.class),
								17, ___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Preposition = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberPersonTypeImpl.class),
								17, ___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Preposition = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberPersonTypeImpl.class),
								17, ___uri, ___local, ___qname));
						return;
					}
					_Preposition = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.GenderNumberPersonTypeImpl.class),
							17, ___uri, ___local, ___qname));
					return;
				case 18:
					if (("binyan" == ___local) && ("" == ___uri)) {
						_Verb = ((generated.impl.VerbTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.VerbTypeImpl.class), 19,
								___uri, ___local, ___qname));
						return;
					}
					if (("expansion" == ___local) && ("" == ___uri)) {
						_Verb = ((generated.impl.VerbTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.VerbTypeImpl.class), 19,
								___uri, ___local, ___qname));
						return;
					}
					if (("gender" == ___local) && ("" == ___uri)) {
						_Verb = ((generated.impl.VerbTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.VerbTypeImpl.class), 19,
								___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_Verb = ((generated.impl.VerbTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.VerbTypeImpl.class), 19,
								___uri, ___local, ___qname));
						return;
					}
					if (("person" == ___local) && ("" == ___uri)) {
						_Verb = ((generated.impl.VerbTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.VerbTypeImpl.class), 19,
								___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Verb = ((generated.impl.VerbTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.VerbTypeImpl.class), 19,
								___uri, ___local, ___qname));
						return;
					}
					if (("root" == ___local) && ("" == ___uri)) {
						_Verb = ((generated.impl.VerbTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.VerbTypeImpl.class), 19,
								___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Verb = ((generated.impl.VerbTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.VerbTypeImpl.class), 19,
								___uri, ___local, ___qname));
						return;
					}
					if (("tense" == ___local) && ("" == ___uri)) {
						_Verb = ((generated.impl.VerbTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.VerbTypeImpl.class), 19,
								___uri, ___local, ___qname));
						return;
					}
					_Verb = ((generated.impl.VerbTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.VerbTypeImpl.class), 19, ___uri,
							___local, ___qname));
					return;
				case 42:
					if (("expansion" == ___local) && ("" == ___uri)) {
						_Adverb = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberPersonTypeImpl.class),
								43, ___uri, ___local, ___qname));
						return;
					}
					if (("gender" == ___local) && ("" == ___uri)) {
						_Adverb = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberPersonTypeImpl.class),
								43, ___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_Adverb = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberPersonTypeImpl.class),
								43, ___uri, ___local, ___qname));
						return;
					}
					if (("person" == ___local) && ("" == ___uri)) {
						_Adverb = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberPersonTypeImpl.class),
								43, ___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Adverb = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberPersonTypeImpl.class),
								43, ___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Adverb = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberPersonTypeImpl.class),
								43, ___uri, ___local, ___qname));
						return;
					}
					_Adverb = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.GenderNumberPersonTypeImpl.class),
							43, ___uri, ___local, ___qname));
					return;
				case 64:
					_Url = ((generated.impl.URLTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.URLTypeImpl.class), 65, ___uri,
							___local, ___qname));
					return;
				case 3:
					if (("lexiconItem" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					state = 6;
					continue outer;
				case 66:
					if (("expansion" == ___local) && ("" == ___uri)) {
						_Interrogative = ((generated.impl.InterrogativeTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.InterrogativeTypeImpl.class),
								67, ___uri, ___local, ___qname));
						return;
					}
					if (("gender" == ___local) && ("" == ___uri)) {
						_Interrogative = ((generated.impl.InterrogativeTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.InterrogativeTypeImpl.class),
								67, ___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_Interrogative = ((generated.impl.InterrogativeTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.InterrogativeTypeImpl.class),
								67, ___uri, ___local, ___qname));
						return;
					}
					if (("person" == ___local) && ("" == ___uri)) {
						_Interrogative = ((generated.impl.InterrogativeTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.InterrogativeTypeImpl.class),
								67, ___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Interrogative = ((generated.impl.InterrogativeTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.InterrogativeTypeImpl.class),
								67, ___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Interrogative = ((generated.impl.InterrogativeTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.InterrogativeTypeImpl.class),
								67, ___uri, ___local, ___qname));
						return;
					}
					if (("type" == ___local) && ("" == ___uri)) {
						_Interrogative = ((generated.impl.InterrogativeTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.InterrogativeTypeImpl.class),
								67, ___uri, ___local, ___qname));
						return;
					}
					_Interrogative = ((generated.impl.InterrogativeTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.InterrogativeTypeImpl.class), 67,
							___uri, ___local, ___qname));
					return;
				case 38:
					if (("expansion" == ___local) && ("" == ___uri)) {
						_Conjunction = ((generated.impl.ConjunctionTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ConjunctionTypeImpl.class), 39,
								___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Conjunction = ((generated.impl.ConjunctionTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ConjunctionTypeImpl.class), 39,
								___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Conjunction = ((generated.impl.ConjunctionTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ConjunctionTypeImpl.class), 39,
								___uri, ___local, ___qname));
						return;
					}
					if (("type" == ___local) && ("" == ___uri)) {
						_Conjunction = ((generated.impl.ConjunctionTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ConjunctionTypeImpl.class), 39,
								___uri, ___local, ___qname));
						return;
					}
					_Conjunction = ((generated.impl.ConjunctionTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.ConjunctionTypeImpl.class), 39,
							___uri, ___local, ___qname));
					return;
				case 28:
					_Zevel = ((generated.impl.ZVLTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.ZVLTypeImpl.class), 29, ___uri,
							___local, ___qname));
					return;
				case 52:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						_Pronoun = ((generated.impl.PronounTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.PronounTypeImpl.class), 53,
								___uri, ___local, ___qname));
						return;
					}
					if (("gender" == ___local) && ("" == ___uri)) {
						_Pronoun = ((generated.impl.PronounTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.PronounTypeImpl.class), 53,
								___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_Pronoun = ((generated.impl.PronounTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.PronounTypeImpl.class), 53,
								___uri, ___local, ___qname));
						return;
					}
					if (("person" == ___local) && ("" == ___uri)) {
						_Pronoun = ((generated.impl.PronounTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.PronounTypeImpl.class), 53,
								___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Pronoun = ((generated.impl.PronounTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.PronounTypeImpl.class), 53,
								___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Pronoun = ((generated.impl.PronounTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.PronounTypeImpl.class), 53,
								___uri, ___local, ___qname));
						return;
					}
					if (("type" == ___local) && ("" == ___uri)) {
						_Pronoun = ((generated.impl.PronounTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.PronounTypeImpl.class), 53,
								___uri, ___local, ___qname));
						return;
					}
					_Pronoun = ((generated.impl.PronounTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.PronounTypeImpl.class), 53, ___uri,
							___local, ___qname));
					return;
				case 30:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						_Adjective = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								31, ___uri, ___local, ___qname));
						return;
					}
					if (("expansion" == ___local) && ("" == ___uri)) {
						_Adjective = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								31, ___uri, ___local, ___qname));
						return;
					}
					if (("foreign" == ___local) && ("" == ___uri)) {
						_Adjective = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								31, ___uri, ___local, ___qname));
						return;
					}
					if (("function" == ___local) && ("" == ___uri)) {
						_Adjective = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								31, ___uri, ___local, ___qname));
						return;
					}
					if (("gender" == ___local) && ("" == ___uri)) {
						_Adjective = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								31, ___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_Adjective = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								31, ___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Adjective = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								31, ___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Adjective = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								31, ___uri, ___local, ___qname));
						return;
					}
					if (("status" == ___local) && ("" == ___uri)) {
						_Adjective = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								31, ___uri, ___local, ___qname));
						return;
					}
					_Adjective = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
							31, ___uri, ___local, ___qname));
					return;
				case 46:
					if (("type" == ___local) && ("" == ___uri)) {
						_Punctuation = ((generated.impl.PunctuationTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.PunctuationTypeImpl.class), 47,
								___uri, ___local, ___qname));
						return;
					}
					_Punctuation = ((generated.impl.PunctuationTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.PunctuationTypeImpl.class), 47,
							___uri, ___local, ___qname));
					return;
				case 24:
					if (("gender" == ___local) && ("" == ___uri)) {
						_Modal = ((generated.impl.ModalTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ModalTypeImpl.class), 25,
								___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_Modal = ((generated.impl.ModalTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ModalTypeImpl.class), 25,
								___uri, ___local, ___qname));
						return;
					}
					if (("person" == ___local) && ("" == ___uri)) {
						_Modal = ((generated.impl.ModalTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ModalTypeImpl.class), 25,
								___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Modal = ((generated.impl.ModalTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ModalTypeImpl.class), 25,
								___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Modal = ((generated.impl.ModalTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ModalTypeImpl.class), 25,
								___uri, ___local, ___qname));
						return;
					}
					if (("subcoordinating" == ___local) && ("" == ___uri)) {
						_Modal = ((generated.impl.ModalTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ModalTypeImpl.class), 25,
								___uri, ___local, ___qname));
						return;
					}
					if (("tense" == ___local) && ("" == ___uri)) {
						_Modal = ((generated.impl.ModalTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.ModalTypeImpl.class), 25,
								___uri, ___local, ___qname));
						return;
					}
					_Modal = ((generated.impl.ModalTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.ModalTypeImpl.class), 25, ___uri,
							___local, ___qname));
					return;
				case 0:
					if (("dottedLexiconItem" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					state = 3;
					continue outer;
				case 50:
					if (("gender" == ___local) && ("" == ___uri)) {
						_Copula = ((generated.impl.CopulaTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.CopulaTypeImpl.class), 51,
								___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_Copula = ((generated.impl.CopulaTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.CopulaTypeImpl.class), 51,
								___uri, ___local, ___qname));
						return;
					}
					if (("person" == ___local) && ("" == ___uri)) {
						_Copula = ((generated.impl.CopulaTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.CopulaTypeImpl.class), 51,
								___uri, ___local, ___qname));
						return;
					}
					if (("polarity" == ___local) && ("" == ___uri)) {
						_Copula = ((generated.impl.CopulaTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.CopulaTypeImpl.class), 51,
								___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Copula = ((generated.impl.CopulaTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.CopulaTypeImpl.class), 51,
								___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Copula = ((generated.impl.CopulaTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.CopulaTypeImpl.class), 51,
								___uri, ___local, ___qname));
						return;
					}
					if (("tense" == ___local) && ("" == ___uri)) {
						_Copula = ((generated.impl.CopulaTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.CopulaTypeImpl.class), 51,
								___uri, ___local, ___qname));
						return;
					}
					_Copula = ((generated.impl.CopulaTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.CopulaTypeImpl.class), 51, ___uri,
							___local, ___qname));
					return;
				case 6:
					if (("lexiconPointer" == ___local) && ("" == ___uri)) {
						state = 7;
						return;
					}
					state = 9;
					continue outer;
				case 58:
					if (("consecutive" == ___local) && ("" == ___uri)) {
						_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.MWETypeImpl.class), 59, ___uri,
								___local, ___qname));
						return;
					}
					if (("definiteness" == ___local) && ("" == ___uri)) {
						_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.MWETypeImpl.class), 59, ___uri,
								___local, ___qname));
						return;
					}
					if (("gender" == ___local) && ("" == ___uri)) {
						_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.MWETypeImpl.class), 59, ___uri,
								___local, ___qname));
						return;
					}
					if (("id" == ___local) && ("" == ___uri)) {
						_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.MWETypeImpl.class), 59, ___uri,
								___local, ___qname));
						return;
					}
					if (("multiWord" == ___local) && ("" == ___uri)) {
						_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.MWETypeImpl.class), 59, ___uri,
								___local, ___qname));
						return;
					}
					if (("multiWordPrefixExist" == ___local) && ("" == ___uri)) {
						_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.MWETypeImpl.class), 59, ___uri,
								___local, ___qname));
						return;
					}
					if (("multiWordTransliterated" == ___local)
							&& ("" == ___uri)) {
						_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.MWETypeImpl.class), 59, ___uri,
								___local, ___qname));
						return;
					}
					if (("multiWordUndotted" == ___local) && ("" == ___uri)) {
						_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.MWETypeImpl.class), 59, ___uri,
								___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.MWETypeImpl.class), 59, ___uri,
								___local, ___qname));
						return;
					}
					if (("pos" == ___local) && ("" == ___uri)) {
						_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.MWETypeImpl.class), 59, ___uri,
								___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.MWETypeImpl.class), 59, ___uri,
								___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.MWETypeImpl.class), 59, ___uri,
								___local, ___qname));
						return;
					}
					if (("type" == ___local) && ("" == ___uri)) {
						_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.MWETypeImpl.class), 59, ___uri,
								___local, ___qname));
						return;
					}
					_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.MWETypeImpl.class), 59, ___uri,
							___local, ___qname));
					return;
				case 15:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 54:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						_Quantifier = ((generated.impl.QuantifierTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.QuantifierTypeImpl.class), 55,
								___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Quantifier = ((generated.impl.QuantifierTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.QuantifierTypeImpl.class), 55,
								___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Quantifier = ((generated.impl.QuantifierTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.QuantifierTypeImpl.class), 55,
								___uri, ___local, ___qname));
						return;
					}
					if (("status" == ___local) && ("" == ___uri)) {
						_Quantifier = ((generated.impl.QuantifierTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.QuantifierTypeImpl.class), 55,
								___uri, ___local, ___qname));
						return;
					}
					if (("type" == ___local) && ("" == ___uri)) {
						_Quantifier = ((generated.impl.QuantifierTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.QuantifierTypeImpl.class), 55,
								___uri, ___local, ___qname));
						return;
					}
					_Quantifier = ((generated.impl.QuantifierTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.QuantifierTypeImpl.class), 55,
							___uri, ___local, ___qname));
					return;
				case 56:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						_WPrefix = ((generated.impl.WprefixTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.WprefixTypeImpl.class), 57,
								___uri, ___local, ___qname));
						return;
					}
					if (("gender" == ___local) && ("" == ___uri)) {
						_WPrefix = ((generated.impl.WprefixTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.WprefixTypeImpl.class), 57,
								___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_WPrefix = ((generated.impl.WprefixTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.WprefixTypeImpl.class), 57,
								___uri, ___local, ___qname));
						return;
					}
					if (("polarity" == ___local) && ("" == ___uri)) {
						_WPrefix = ((generated.impl.WprefixTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.WprefixTypeImpl.class), 57,
								___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_WPrefix = ((generated.impl.WprefixTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.WprefixTypeImpl.class), 57,
								___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_WPrefix = ((generated.impl.WprefixTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.WprefixTypeImpl.class), 57,
								___uri, ___local, ___qname));
						return;
					}
					_WPrefix = ((generated.impl.WprefixTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.WprefixTypeImpl.class), 57, ___uri,
							___local, ___qname));
					return;
				case 20:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						_Negation = ((generated.impl.NegationTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.NegationTypeImpl.class), 21,
								___uri, ___local, ___qname));
						return;
					}
					if (("register" == ___local) && ("" == ___uri)) {
						_Negation = ((generated.impl.NegationTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.NegationTypeImpl.class), 21,
								___uri, ___local, ___qname));
						return;
					}
					if (("spelling" == ___local) && ("" == ___uri)) {
						_Negation = ((generated.impl.NegationTypeImpl) spawnChildFromEnterAttribute(
								(generated.impl.NegationTypeImpl.class), 21,
								___uri, ___local, ___qname));
						return;
					}
					_Negation = ((generated.impl.NegationTypeImpl) spawnChildFromEnterAttribute(
							(generated.impl.NegationTypeImpl.class), 21,
							___uri, ___local, ___qname));
					return;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 48:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_NumberExpression = ((generated.impl.NumberExpressionTypeImpl) spawnChildFromEnterElement(
							(generated.impl.NumberExpressionTypeImpl.class),
							49, ___uri, ___local, ___qname, __atts));
					return;
				case 22:
					attIdx = context.getAttribute("", "binyan");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "mood");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "subcoordinating");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromEnterElement(
							(generated.impl.ParticipleTypeImpl.class), 23,
							___uri, ___local, ___qname, __atts));
					return;
				case 62:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Title = ((generated.impl.TitleTypeImpl) spawnChildFromEnterElement(
							(generated.impl.TitleTypeImpl.class), 63, ___uri,
							___local, ___qname, __atts));
					return;
				case 44:
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Interjection = ((generated.impl.InterjectionTypeImpl) spawnChildFromEnterElement(
							(generated.impl.InterjectionTypeImpl.class), 45,
							___uri, ___local, ___qname, __atts));
					return;
				case 34:
					_Foreign = ((generated.impl.ForeignTypeImpl) spawnChildFromEnterElement(
							(generated.impl.ForeignTypeImpl.class), 35, ___uri,
							___local, ___qname, __atts));
					return;
				case 12:
					if (("adjective" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 30;
						return;
					}
					if (("adverb" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 42;
						return;
					}
					if (("zevel" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 28;
						return;
					}
					if (("conjunction" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 38;
						return;
					}
					if (("interjection" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 44;
						return;
					}
					if (("interrogative" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 66;
						return;
					}
					if (("negation" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 20;
						return;
					}
					if (("foreign" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 34;
						return;
					}
					if (("url" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 64;
						return;
					}
					if (("noun" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 32;
						return;
					}
					if (("preposition" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 16;
						return;
					}
					if (("pronoun" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 52;
						return;
					}
					if (("properName" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 40;
						return;
					}
					if (("punctuation" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 46;
						return;
					}
					if (("numberExpression" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 48;
						return;
					}
					if (("quantifier" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 54;
						return;
					}
					if (("verb" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 18;
						return;
					}
					if (("participle" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 22;
						return;
					}
					if (("numeral" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 36;
						return;
					}
					if (("existential" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 60;
						return;
					}
					if (("impersonal" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 26;
						return;
					}
					if (("wPrefix" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 56;
						return;
					}
					if (("modal" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 24;
						return;
					}
					if (("copula" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 50;
						return;
					}
					if (("title" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 62;
						return;
					}
					if (("MWE" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 58;
						return;
					}
					if (("unknown" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 13;
						return;
					}
					break;
				case 60:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "interrogative");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "polarity");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Existential = ((generated.impl.ExistentialTypeImpl) spawnChildFromEnterElement(
							(generated.impl.ExistentialTypeImpl.class), 61,
							___uri, ___local, ___qname, __atts));
					return;
				case 13:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Unknown = ((generated.impl.UnknownTypeImpl) spawnChildFromEnterElement(
							(generated.impl.UnknownTypeImpl.class), 14, ___uri,
							___local, ___qname, __atts));
					return;
				case 36:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "value");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Numeral = ((generated.impl.NumeralTypeImpl) spawnChildFromEnterElement(
							(generated.impl.NumeralTypeImpl.class), 37, ___uri,
							___local, ___qname, __atts));
					return;
				case 26:
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Impersonal = ((generated.impl.ImpersonalTypeImpl) spawnChildFromEnterElement(
							(generated.impl.ImpersonalTypeImpl.class), 27,
							___uri, ___local, ___qname, __atts));
					return;
				case 40:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_ProperName = ((generated.impl.ProperNameTypeImpl) spawnChildFromEnterElement(
							(generated.impl.ProperNameTypeImpl.class), 41,
							___uri, ___local, ___qname, __atts));
					return;
				case 9:
					attIdx = context.getAttribute("",
							"transliteratedLexiconItem");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText1(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 32:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "foreign");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Noun = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterElement(
							(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
							33, ___uri, ___local, ___qname, __atts));
					return;
				case 16:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Preposition = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterElement(
							(generated.impl.GenderNumberPersonTypeImpl.class),
							17, ___uri, ___local, ___qname, __atts));
					return;
				case 18:
					attIdx = context.getAttribute("", "binyan");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Verb = ((generated.impl.VerbTypeImpl) spawnChildFromEnterElement(
							(generated.impl.VerbTypeImpl.class), 19, ___uri,
							___local, ___qname, __atts));
					return;
				case 42:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Adverb = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromEnterElement(
							(generated.impl.GenderNumberPersonTypeImpl.class),
							43, ___uri, ___local, ___qname, __atts));
					return;
				case 64:
					_Url = ((generated.impl.URLTypeImpl) spawnChildFromEnterElement(
							(generated.impl.URLTypeImpl.class), 65, ___uri,
							___local, ___qname, __atts));
					return;
				case 3:
					attIdx = context.getAttribute("", "lexiconItem");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText2(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 66:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Interrogative = ((generated.impl.InterrogativeTypeImpl) spawnChildFromEnterElement(
							(generated.impl.InterrogativeTypeImpl.class), 67,
							___uri, ___local, ___qname, __atts));
					return;
				case 38:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Conjunction = ((generated.impl.ConjunctionTypeImpl) spawnChildFromEnterElement(
							(generated.impl.ConjunctionTypeImpl.class), 39,
							___uri, ___local, ___qname, __atts));
					return;
				case 28:
					_Zevel = ((generated.impl.ZVLTypeImpl) spawnChildFromEnterElement(
							(generated.impl.ZVLTypeImpl.class), 29, ___uri,
							___local, ___qname, __atts));
					return;
				case 52:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Pronoun = ((generated.impl.PronounTypeImpl) spawnChildFromEnterElement(
							(generated.impl.PronounTypeImpl.class), 53, ___uri,
							___local, ___qname, __atts));
					return;
				case 30:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "foreign");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Adjective = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromEnterElement(
							(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
							31, ___uri, ___local, ___qname, __atts));
					return;
				case 46:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Punctuation = ((generated.impl.PunctuationTypeImpl) spawnChildFromEnterElement(
							(generated.impl.PunctuationTypeImpl.class), 47,
							___uri, ___local, ___qname, __atts));
					return;
				case 24:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "subcoordinating");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Modal = ((generated.impl.ModalTypeImpl) spawnChildFromEnterElement(
							(generated.impl.ModalTypeImpl.class), 25, ___uri,
							___local, ___qname, __atts));
					return;
				case 0:
					attIdx = context.getAttribute("", "dottedLexiconItem");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText3(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 50:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "polarity");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Copula = ((generated.impl.CopulaTypeImpl) spawnChildFromEnterElement(
							(generated.impl.CopulaTypeImpl.class), 51, ___uri,
							___local, ___qname, __atts));
					return;
				case 6:
					attIdx = context.getAttribute("", "lexiconPointer");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText4(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 58:
					attIdx = context.getAttribute("", "consecutive");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "multiWord");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "multiWordPrefixExist");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context
							.getAttribute("", "multiWordTransliterated");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "multiWordUndotted");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "pos");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_MWE = ((generated.impl.MWETypeImpl) spawnChildFromEnterElement(
							(generated.impl.MWETypeImpl.class), 59, ___uri,
							___local, ___qname, __atts));
					return;
				case 15:
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 54:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Quantifier = ((generated.impl.QuantifierTypeImpl) spawnChildFromEnterElement(
							(generated.impl.QuantifierTypeImpl.class), 55,
							___uri, ___local, ___qname, __atts));
					return;
				case 56:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "polarity");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_WPrefix = ((generated.impl.WprefixTypeImpl) spawnChildFromEnterElement(
							(generated.impl.WprefixTypeImpl.class), 57, ___uri,
							___local, ___qname, __atts));
					return;
				case 20:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Negation = ((generated.impl.NegationTypeImpl) spawnChildFromEnterElement(
							(generated.impl.NegationTypeImpl.class), 21,
							___uri, ___local, ___qname, __atts));
					return;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		@Override
		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 48:
						attIdx = context.getAttribute("", "type");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_NumberExpression = ((generated.impl.NumberExpressionTypeImpl) spawnChildFromText(
								(generated.impl.NumberExpressionTypeImpl.class),
								49, value));
						return;
					case 22:
						attIdx = context.getAttribute("", "binyan");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "expansion");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "mood");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "root");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "status");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "subcoordinating");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "type");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromText(
								(generated.impl.ParticipleTypeImpl.class), 23,
								value));
						return;
					case 62:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "expansion");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Title = ((generated.impl.TitleTypeImpl) spawnChildFromText(
								(generated.impl.TitleTypeImpl.class), 63, value));
						return;
					case 4:
						state = 5;
						eatText2(value);
						return;
					case 44:
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Interjection = ((generated.impl.InterjectionTypeImpl) spawnChildFromText(
								(generated.impl.InterjectionTypeImpl.class),
								45, value));
						return;
					case 1:
						state = 2;
						eatText3(value);
						return;
					case 34:
						_Foreign = ((generated.impl.ForeignTypeImpl) spawnChildFromText(
								(generated.impl.ForeignTypeImpl.class), 35,
								value));
						return;
					case 60:
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "interrogative");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "polarity");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "root");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "tense");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Existential = ((generated.impl.ExistentialTypeImpl) spawnChildFromText(
								(generated.impl.ExistentialTypeImpl.class), 61,
								value));
						return;
					case 13:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Unknown = ((generated.impl.UnknownTypeImpl) spawnChildFromText(
								(generated.impl.UnknownTypeImpl.class), 14,
								value));
						return;
					case 36:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "status");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "type");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "value");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Numeral = ((generated.impl.NumeralTypeImpl) spawnChildFromText(
								(generated.impl.NumeralTypeImpl.class), 37,
								value));
						return;
					case 26:
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Impersonal = ((generated.impl.ImpersonalTypeImpl) spawnChildFromText(
								(generated.impl.ImpersonalTypeImpl.class), 27,
								value));
						return;
					case 40:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "expansion");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "type");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_ProperName = ((generated.impl.ProperNameTypeImpl) spawnChildFromText(
								(generated.impl.ProperNameTypeImpl.class), 41,
								value));
						return;
					case 9:
						attIdx = context.getAttribute("",
								"transliteratedLexiconItem");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 12;
							eatText1(v);
							continue outer;
						}
						state = 12;
						continue outer;
					case 10:
						state = 11;
						eatText1(value);
						return;
					case 32:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "expansion");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "foreign");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "function");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "status");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Noun = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromText(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								33, value));
						return;
					case 16:
						attIdx = context.getAttribute("", "expansion");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Preposition = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromText(
								(generated.impl.GenderNumberPersonTypeImpl.class),
								17, value));
						return;
					case 18:
						attIdx = context.getAttribute("", "binyan");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "expansion");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "root");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "tense");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Verb = ((generated.impl.VerbTypeImpl) spawnChildFromText(
								(generated.impl.VerbTypeImpl.class), 19, value));
						return;
					case 42:
						attIdx = context.getAttribute("", "expansion");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Adverb = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromText(
								(generated.impl.GenderNumberPersonTypeImpl.class),
								43, value));
						return;
					case 64:
						_Url = ((generated.impl.URLTypeImpl) spawnChildFromText(
								(generated.impl.URLTypeImpl.class), 65, value));
						return;
					case 3:
						attIdx = context.getAttribute("", "lexiconItem");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 6;
							eatText2(v);
							continue outer;
						}
						state = 6;
						continue outer;
					case 66:
						attIdx = context.getAttribute("", "expansion");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "type");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Interrogative = ((generated.impl.InterrogativeTypeImpl) spawnChildFromText(
								(generated.impl.InterrogativeTypeImpl.class),
								67, value));
						return;
					case 38:
						attIdx = context.getAttribute("", "expansion");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "type");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Conjunction = ((generated.impl.ConjunctionTypeImpl) spawnChildFromText(
								(generated.impl.ConjunctionTypeImpl.class), 39,
								value));
						return;
					case 28:
						_Zevel = ((generated.impl.ZVLTypeImpl) spawnChildFromText(
								(generated.impl.ZVLTypeImpl.class), 29, value));
						return;
					case 52:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "type");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Pronoun = ((generated.impl.PronounTypeImpl) spawnChildFromText(
								(generated.impl.PronounTypeImpl.class), 53,
								value));
						return;
					case 30:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "expansion");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "foreign");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "function");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "status");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Adjective = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromText(
								(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
								31, value));
						return;
					case 46:
						attIdx = context.getAttribute("", "type");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Punctuation = ((generated.impl.PunctuationTypeImpl) spawnChildFromText(
								(generated.impl.PunctuationTypeImpl.class), 47,
								value));
						return;
					case 24:
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "subcoordinating");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "tense");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Modal = ((generated.impl.ModalTypeImpl) spawnChildFromText(
								(generated.impl.ModalTypeImpl.class), 25, value));
						return;
					case 0:
						attIdx = context.getAttribute("", "dottedLexiconItem");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 3;
							eatText3(v);
							continue outer;
						}
						state = 3;
						continue outer;
					case 50:
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "polarity");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "tense");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Copula = ((generated.impl.CopulaTypeImpl) spawnChildFromText(
								(generated.impl.CopulaTypeImpl.class), 51,
								value));
						return;
					case 6:
						attIdx = context.getAttribute("", "lexiconPointer");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 9;
							eatText4(v);
							continue outer;
						}
						state = 9;
						continue outer;
					case 58:
						attIdx = context.getAttribute("", "consecutive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "id");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "multiWord");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("",
								"multiWordPrefixExist");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("",
								"multiWordTransliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "multiWordUndotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "pos");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "type");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_MWE = ((generated.impl.MWETypeImpl) spawnChildFromText(
								(generated.impl.MWETypeImpl.class), 59, value));
						return;
					case 15:
						revertToParentFromText(value);
						return;
					case 54:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "status");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "type");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Quantifier = ((generated.impl.QuantifierTypeImpl) spawnChildFromText(
								(generated.impl.QuantifierTypeImpl.class), 55,
								value));
						return;
					case 56:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "polarity");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_WPrefix = ((generated.impl.WprefixTypeImpl) spawnChildFromText(
								(generated.impl.WprefixTypeImpl.class), 57,
								value));
						return;
					case 7:
						state = 8;
						eatText4(value);
						return;
					case 20:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Negation = ((generated.impl.NegationTypeImpl) spawnChildFromText(
								(generated.impl.NegationTypeImpl.class), 21,
								value));
						return;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

		@Override
		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 5:
					if (("lexiconItem" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				case 48:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_NumberExpression = ((generated.impl.NumberExpressionTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.NumberExpressionTypeImpl.class),
							49, ___uri, ___local, ___qname));
					return;
				case 22:
					attIdx = context.getAttribute("", "binyan");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "mood");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "subcoordinating");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.ParticipleTypeImpl.class), 23,
							___uri, ___local, ___qname));
					return;
				case 62:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Title = ((generated.impl.TitleTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.TitleTypeImpl.class), 63, ___uri,
							___local, ___qname));
					return;
				case 44:
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Interjection = ((generated.impl.InterjectionTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.InterjectionTypeImpl.class), 45,
							___uri, ___local, ___qname));
					return;
				case 34:
					_Foreign = ((generated.impl.ForeignTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.ForeignTypeImpl.class), 35, ___uri,
							___local, ___qname));
					return;
				case 60:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "interrogative");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "polarity");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Existential = ((generated.impl.ExistentialTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.ExistentialTypeImpl.class), 61,
							___uri, ___local, ___qname));
					return;
				case 13:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Unknown = ((generated.impl.UnknownTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.UnknownTypeImpl.class), 14, ___uri,
							___local, ___qname));
					return;
				case 36:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "value");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Numeral = ((generated.impl.NumeralTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.NumeralTypeImpl.class), 37, ___uri,
							___local, ___qname));
					return;
				case 26:
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Impersonal = ((generated.impl.ImpersonalTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.ImpersonalTypeImpl.class), 27,
							___uri, ___local, ___qname));
					return;
				case 40:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_ProperName = ((generated.impl.ProperNameTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.ProperNameTypeImpl.class), 41,
							___uri, ___local, ___qname));
					return;
				case 9:
					attIdx = context.getAttribute("",
							"transliteratedLexiconItem");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText1(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 32:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "foreign");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Noun = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
							33, ___uri, ___local, ___qname));
					return;
				case 11:
					if (("transliteratedLexiconItem" == ___local)
							&& ("" == ___uri)) {
						state = 12;
						return;
					}
					break;
				case 16:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Preposition = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.GenderNumberPersonTypeImpl.class),
							17, ___uri, ___local, ___qname));
					return;
				case 18:
					attIdx = context.getAttribute("", "binyan");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Verb = ((generated.impl.VerbTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.VerbTypeImpl.class), 19, ___uri,
							___local, ___qname));
					return;
				case 2:
					if (("dottedLexiconItem" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 42:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Adverb = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.GenderNumberPersonTypeImpl.class),
							43, ___uri, ___local, ___qname));
					return;
				case 64:
					_Url = ((generated.impl.URLTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.URLTypeImpl.class), 65, ___uri,
							___local, ___qname));
					return;
				case 3:
					attIdx = context.getAttribute("", "lexiconItem");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText2(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 66:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Interrogative = ((generated.impl.InterrogativeTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.InterrogativeTypeImpl.class), 67,
							___uri, ___local, ___qname));
					return;
				case 38:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Conjunction = ((generated.impl.ConjunctionTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.ConjunctionTypeImpl.class), 39,
							___uri, ___local, ___qname));
					return;
				case 28:
					_Zevel = ((generated.impl.ZVLTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.ZVLTypeImpl.class), 29, ___uri,
							___local, ___qname));
					return;
				case 52:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Pronoun = ((generated.impl.PronounTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.PronounTypeImpl.class), 53, ___uri,
							___local, ___qname));
					return;
				case 30:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "foreign");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Adjective = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
							31, ___uri, ___local, ___qname));
					return;
				case 46:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Punctuation = ((generated.impl.PunctuationTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.PunctuationTypeImpl.class), 47,
							___uri, ___local, ___qname));
					return;
				case 24:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "subcoordinating");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Modal = ((generated.impl.ModalTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.ModalTypeImpl.class), 25, ___uri,
							___local, ___qname));
					return;
				case 0:
					attIdx = context.getAttribute("", "dottedLexiconItem");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText3(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 50:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "polarity");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Copula = ((generated.impl.CopulaTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.CopulaTypeImpl.class), 51, ___uri,
							___local, ___qname));
					return;
				case 6:
					attIdx = context.getAttribute("", "lexiconPointer");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText4(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 58:
					attIdx = context.getAttribute("", "consecutive");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "multiWord");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "multiWordPrefixExist");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context
							.getAttribute("", "multiWordTransliterated");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "multiWordUndotted");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "pos");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_MWE = ((generated.impl.MWETypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.MWETypeImpl.class), 59, ___uri,
							___local, ___qname));
					return;
				case 8:
					if (("lexiconPointer" == ___local) && ("" == ___uri)) {
						state = 9;
						return;
					}
					break;
				case 15:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 54:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Quantifier = ((generated.impl.QuantifierTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.QuantifierTypeImpl.class), 55,
							___uri, ___local, ___qname));
					return;
				case 56:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "polarity");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_WPrefix = ((generated.impl.WprefixTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.WprefixTypeImpl.class), 57, ___uri,
							___local, ___qname));
					return;
				case 20:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Negation = ((generated.impl.NegationTypeImpl) spawnChildFromLeaveAttribute(
							(generated.impl.NegationTypeImpl.class), 21,
							___uri, ___local, ___qname));
					return;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 48:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_NumberExpression = ((generated.impl.NumberExpressionTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.NumberExpressionTypeImpl.class),
							49, ___uri, ___local, ___qname));
					return;
				case 61:
					if (("existential" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 25:
					if (("modal" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 43:
					if (("adverb" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 22:
					attIdx = context.getAttribute("", "binyan");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "mood");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "subcoordinating");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Participle = ((generated.impl.ParticipleTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.ParticipleTypeImpl.class), 23,
							___uri, ___local, ___qname));
					return;
				case 14:
					if (("unknown" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 62:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Title = ((generated.impl.TitleTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.TitleTypeImpl.class), 63, ___uri,
							___local, ___qname));
					return;
				case 33:
					if (("noun" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 44:
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Interjection = ((generated.impl.InterjectionTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.InterjectionTypeImpl.class), 45,
							___uri, ___local, ___qname));
					return;
				case 63:
					if (("title" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 65:
					if (("url" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 67:
					if (("interrogative" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 57:
					if (("wPrefix" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 34:
					_Foreign = ((generated.impl.ForeignTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.ForeignTypeImpl.class), 35, ___uri,
							___local, ___qname));
					return;
				case 41:
					if (("properName" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 60:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "interrogative");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "polarity");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Existential = ((generated.impl.ExistentialTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.ExistentialTypeImpl.class), 61,
							___uri, ___local, ___qname));
					return;
				case 13:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Unknown = ((generated.impl.UnknownTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.UnknownTypeImpl.class), 14, ___uri,
							___local, ___qname));
					return;
				case 36:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "value");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Numeral = ((generated.impl.NumeralTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.NumeralTypeImpl.class), 37, ___uri,
							___local, ___qname));
					return;
				case 26:
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Impersonal = ((generated.impl.ImpersonalTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.ImpersonalTypeImpl.class), 27,
							___uri, ___local, ___qname));
					return;
				case 21:
					if (("negation" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 40:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_ProperName = ((generated.impl.ProperNameTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.ProperNameTypeImpl.class), 41,
							___uri, ___local, ___qname));
					return;
				case 9:
					attIdx = context.getAttribute("",
							"transliteratedLexiconItem");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText1(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 47:
					if (("punctuation" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 53:
					if (("pronoun" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 32:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "foreign");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Noun = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
							33, ___uri, ___local, ___qname));
					return;
				case 16:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Preposition = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.GenderNumberPersonTypeImpl.class),
							17, ___uri, ___local, ___qname));
					return;
				case 18:
					attIdx = context.getAttribute("", "binyan");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Verb = ((generated.impl.VerbTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.VerbTypeImpl.class), 19, ___uri,
							___local, ___qname));
					return;
				case 45:
					if (("interjection" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 42:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Adverb = ((generated.impl.GenderNumberPersonTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.GenderNumberPersonTypeImpl.class),
							43, ___uri, ___local, ___qname));
					return;
				case 64:
					_Url = ((generated.impl.URLTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.URLTypeImpl.class), 65, ___uri,
							___local, ___qname));
					return;
				case 27:
					if (("impersonal" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 3:
					attIdx = context.getAttribute("", "lexiconItem");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText2(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 66:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Interrogative = ((generated.impl.InterrogativeTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.InterrogativeTypeImpl.class), 67,
							___uri, ___local, ___qname));
					return;
				case 38:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Conjunction = ((generated.impl.ConjunctionTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.ConjunctionTypeImpl.class), 39,
							___uri, ___local, ___qname));
					return;
				case 28:
					_Zevel = ((generated.impl.ZVLTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.ZVLTypeImpl.class), 29, ___uri,
							___local, ___qname));
					return;
				case 59:
					if (("MWE" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 37:
					if (("numeral" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 52:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Pronoun = ((generated.impl.PronounTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.PronounTypeImpl.class), 53, ___uri,
							___local, ___qname));
					return;
				case 30:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "foreign");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Adjective = ((generated.impl.GenderNumberStatusDefinitenessTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.GenderNumberStatusDefinitenessTypeImpl.class),
							31, ___uri, ___local, ___qname));
					return;
				case 55:
					if (("quantifier" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 46:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Punctuation = ((generated.impl.PunctuationTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.PunctuationTypeImpl.class), 47,
							___uri, ___local, ___qname));
					return;
				case 24:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "subcoordinating");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Modal = ((generated.impl.ModalTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.ModalTypeImpl.class), 25, ___uri,
							___local, ___qname));
					return;
				case 0:
					attIdx = context.getAttribute("", "dottedLexiconItem");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText3(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 49:
					if (("numberExpression" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 50:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "polarity");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Copula = ((generated.impl.CopulaTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.CopulaTypeImpl.class), 51, ___uri,
							___local, ___qname));
					return;
				case 23:
					if (("participle" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 6:
					attIdx = context.getAttribute("", "lexiconPointer");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText4(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 58:
					attIdx = context.getAttribute("", "consecutive");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "multiWord");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "multiWordPrefixExist");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context
							.getAttribute("", "multiWordTransliterated");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "multiWordUndotted");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "pos");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_MWE = ((generated.impl.MWETypeImpl) spawnChildFromLeaveElement(
							(generated.impl.MWETypeImpl.class), 59, ___uri,
							___local, ___qname));
					return;
				case 19:
					if (("verb" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 15:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 31:
					if (("adjective" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 29:
					if (("zevel" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 39:
					if (("conjunction" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 54:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Quantifier = ((generated.impl.QuantifierTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.QuantifierTypeImpl.class), 55,
							___uri, ___local, ___qname));
					return;
				case 35:
					if (("foreign" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 56:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "polarity");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_WPrefix = ((generated.impl.WprefixTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.WprefixTypeImpl.class), 57, ___uri,
							___local, ___qname));
					return;
				case 17:
					if (("preposition" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 51:
					if (("copula" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 15;
						return;
					}
					break;
				case 20:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Negation = ((generated.impl.NegationTypeImpl) spawnChildFromLeaveElement(
							(generated.impl.NegationTypeImpl.class), 21,
							___uri, ___local, ___qname));
					return;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public java.lang.Object owner() {
			return generated.impl.BaseTypeImpl.this;
		}

	}

	protected generated.NumberExpressionType _NumberExpression;
	protected generated.GenderNumberPersonType _Adverb;
	protected java.lang.String _LexiconItem;
	protected generated.WprefixType _WPrefix;
	protected generated.ForeignType _Foreign;
	protected generated.ParticipleType _Participle;
	protected generated.ZVLType _Zevel;
	protected generated.ProperNameType _ProperName;
	protected generated.ImpersonalType _Impersonal;
	protected generated.ConjunctionType _Conjunction;
	protected generated.GenderNumberStatusDefinitenessType _Adjective;
	protected generated.PunctuationType _Punctuation;
	protected generated.CopulaType _Copula;
	protected java.lang.String _TransliteratedLexiconItem;
	protected generated.InterjectionType _Interjection;
	protected generated.UnknownType _Unknown;
	protected generated.URLType _Url;
	protected generated.ModalType _Modal;
	protected generated.NumeralType _Numeral;
	protected java.lang.String _DottedLexiconItem;
	protected generated.GenderNumberPersonType _Preposition;
	protected generated.QuantifierType _Quantifier;
	protected generated.PronounType _Pronoun;
	protected generated.VerbType _Verb;
	protected java.lang.String _LexiconPointer;
	protected generated.GenderNumberStatusDefinitenessType _Noun;
	protected generated.NegationType _Negation;
	protected generated.ExistentialType _Existential;
	protected generated.InterrogativeType _Interrogative;
	protected generated.TitleType _Title;
	protected generated.MWEType _MWE;
	public final static java.lang.Class version = (generated.impl.JAXBVersion.class);

	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (generated.BaseType.class);
	}

	@Override
	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
							+ "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv."
							+ "grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tpp"
							+ "sq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~"
							+ "\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tpp"
							+ "sq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsq\u0000~\u0000\tppsr\u0000\'"
							+ "com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameCla"
							+ "sst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar."
							+ "ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontent"
							+ "Modelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsr\u0000 com.sun.msv."
							+ "grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.Unary"
							+ "Exp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee"
							+ "\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
							+ "\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000%xq\u0000~\u0000\u0003q\u0000~\u0000/psr\u00002com.sun.msv.gr"
							+ "ammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000.\u0001"
							+ "q\u0000~\u00003sr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom."
							+ "sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.gramma"
							+ "r.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u00004q\u0000~\u00009sr\u0000"
							+ "#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet"
							+ "\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000;xq\u0000~\u00006t\u0000,generated.G"
							+ "enderNumberStatusDefinitenessTypet\u0000+http://java.sun.com/jaxb"
							+ "/xjc/dummy-elementssq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/psr\u0000\u001bcom.sun.msv.gramm"
							+ "ar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;"
							+ "L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003p"
							+ "psr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.su"
							+ "n.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.m"
							+ "sv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datat"
							+ "ype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000;L\u0000\btype"
							+ "Nameq\u0000~\u0000;L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpac"
							+ "eProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005"
							+ "com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
							+ "\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
							+ "\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000"
							+ "\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000"
							+ "\tlocalNameq\u0000~\u0000;L\u0000\fnamespaceURIq\u0000~\u0000;xpq\u0000~\u0000Lq\u0000~\u0000Ksq\u0000~\u0000:t\u0000\u0004type"
							+ "t\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u00009sq\u0000~\u0000:t\u0000\tad"
							+ "jectivet\u0000\u0000sq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~"
							+ "\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000 generated.GenderNumberPerson"
							+ "Typeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u0006adverbq"
							+ "\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000"
							+ "/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u0011generated.ZVLTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~"
							+ "\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u0005zevelq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000pps"
							+ "q\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000"
							+ ":t\u0000\u0019generated.ConjunctionTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq"
							+ "\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u000bconjunctionq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000"
							+ "sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u001agene"
							+ "rated.InterjectionTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~"
							+ "\u00009sq\u0000~\u0000:t\u0000\finterjectionq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\t"
							+ "ppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u001bgenerated."
							+ "InterrogativeTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000"
							+ "~\u0000:t\u0000\rinterrogativeq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq"
							+ "\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u0016generated.Nega"
							+ "tionTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\bneg"
							+ "ationq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~"
							+ "\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u0015generated.ForeignTypeq\u0000~\u0000>sq"
							+ "\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u0007foreignq\u0000~\u0000Ysq\u0000~\u0000$"
							+ "pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~"
							+ "\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u0011generated.URLTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000"
							+ "~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u0003urlq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~"
							+ "\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:q\u0000~\u0000=q\u0000~\u0000>s"
							+ "q\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u0004nounq\u0000~\u0000Ysq\u0000~\u0000$pp"
							+ "\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007"
							+ "q\u0000~\u00009sq\u0000~\u0000:q\u0000~\u0000aq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~"
							+ "\u0000:t\u0000\u000bprepositionq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000"
							+ "+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u0015generated.Pronoun"
							+ "Typeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u0007pronoun"
							+ "q\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~"
							+ "\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u0018generated.ProperNameTypeq\u0000~\u0000>sq\u0000~"
							+ "\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\nproperNameq\u0000~\u0000Ysq\u0000~\u0000"
							+ "$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000"
							+ "~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u0019generated.PunctuationTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u0000"
							+ "0q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u000bpunctuationq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~"
							+ "\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009"
							+ "sq\u0000~\u0000:t\u0000\u001egenerated.NumberExpressionTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000"
							+ "~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u0010numberExpressionq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq"
							+ "\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~"
							+ "\u00009sq\u0000~\u0000:t\u0000\u0018generated.QuantifierTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/p"
							+ "q\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\nquantifierq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~"
							+ "\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000"
							+ "\u0012generated.VerbTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009s"
							+ "q\u0000~\u0000:t\u0000\u0004verbq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~"
							+ "\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u0018generated.ParticipleT"
							+ "ypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\nparticip"
							+ "leq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q"
							+ "\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u0015generated.NumeralTypeq\u0000~\u0000>sq\u0000~\u0000"
							+ "\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u0007numeralq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000"
							+ "sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q"
							+ "\u0000~\u00009sq\u0000~\u0000:t\u0000\u0019generated.ExistentialTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~"
							+ "\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u000bexistentialq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000pp"
							+ "sq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~"
							+ "\u0000:t\u0000\u0018generated.ImpersonalTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq"
							+ "\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\nimpersonalq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000s"
							+ "q\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u0015gener"
							+ "ated.WprefixTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~"
							+ "\u0000:t\u0000\u0007wPrefixq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~"
							+ "\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u0013generated.ModalTypeq\u0000"
							+ "~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u0005modalq\u0000~\u0000Ysq\u0000"
							+ "~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003"
							+ "q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u0014generated.CopulaTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000"
							+ "~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u0006copulaq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~"
							+ "\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000"
							+ "\u0013generated.TitleTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009"
							+ "sq\u0000~\u0000:t\u0000\u0005titleq\u0000~\u0000Ysq\u0000~\u0000$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q"
							+ "\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u0011generated.MWETypeq\u0000"
							+ "~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u0003MWEq\u0000~\u0000Ysq\u0000~\u0000"
							+ "$pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000$pp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u00003q\u0000"
							+ "~\u00007q\u0000~\u00009sq\u0000~\u0000:t\u0000\u0015generated.UnknownTypeq\u0000~\u0000>sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~"
							+ "\u0000/pq\u0000~\u0000Dq\u0000~\u0000Tq\u0000~\u00009sq\u0000~\u0000:t\u0000\u0007unknownq\u0000~\u0000Ysq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/ps"
							+ "q\u0000~\u0000Appsr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#"
							+ "com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysVal"
							+ "idxq\u0000~\u0000Fq\u0000~\u0000Kt\u0000\u0005tokenq\u0000~\u0000O\u0001q\u0000~\u0000Qsq\u0000~\u0000Rq\u0000~\u0001\u0096q\u0000~\u0000Ksq\u0000~\u0000:t\u0000\u0011dot"
							+ "tedLexiconItemq\u0000~\u0000Yq\u0000~\u00009sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0001\u0092sq\u0000~\u0000:t\u0000\u000ble"
							+ "xiconItemq\u0000~\u0000Yq\u0000~\u00009sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0001\u0092sq\u0000~\u0000:t\u0000\u000elexicon"
							+ "Pointerq\u0000~\u0000Yq\u0000~\u00009sq\u0000~\u0000\tppsq\u0000~\u00000q\u0000~\u0000/pq\u0000~\u0001\u0092sq\u0000~\u0000:t\u0000\u0019translite"
							+ "ratedLexiconItemq\u0000~\u0000Yq\u0000~\u00009sr\u0000\"com.sun.msv.grammar.Expression"
							+ "Pool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/Expression"
							+ "Pool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$Clo"
							+ "sedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/s"
							+ "un/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u008e\u0001pq\u0000~\u0001Xq\u0000~\u0000\u0017q\u0000~\u0001Lq\u0000~\u0001@q\u0000"
							+ "~\u00014q\u0000~\u0001(q\u0000~\u0001\u001cq\u0000~\u0001\u0010q\u0000~\u0001\u0004q\u0000~\u0000\u00f8q\u0000~\u0000\u00ecq\u0000~\u0000\u00e0q\u0000~\u0000-q\u0000~\u0000^q\u0000~\u0000jq\u0000~\u0000vq\u0000"
							+ "~\u0000\u0082q\u0000~\u0000\u008eq\u0000~\u0000\u009aq\u0000~\u0000\u00a6q\u0000~\u0000\u00b2q\u0000~\u0000\u00beq\u0000~\u0000\u00c9q\u0000~\u0000\u00d4q\u0000~\u0001dq\u0000~\u0001pq\u0000~\u0001|q\u0000~\u0001\u0088q\u0000"
							+ "~\u0001Uq\u0000~\u0001Iq\u0000~\u0001=q\u0000~\u00011q\u0000~\u0001%q\u0000~\u0001\u0019q\u0000~\u0001\rq\u0000~\u0001\u0001q\u0000~\u0000\u00f5q\u0000~\u0000\u0013q\u0000~\u0000\u00e9q\u0000~\u0000\u00ddq\u0000"
							+ "~\u0000\u00d1q\u0000~\u0000(q\u0000~\u0000[q\u0000~\u0000gq\u0000~\u0000sq\u0000~\u0000\u007fq\u0000~\u0000\u008bq\u0000~\u0000\u0097q\u0000~\u0000\u00a3q\u0000~\u0000\u00afq\u0000~\u0000\u001fq\u0000~\u0000\u00bbq\u0000"
							+ "~\u0000\u00c6q\u0000~\u0001aq\u0000~\u0001mq\u0000~\u0001yq\u0000~\u0001\u0085q\u0000~\u0001\u00a2q\u0000~\u0000\fq\u0000~\u0000\u0019q\u0000~\u0000\u0005q\u0000~\u0001\\q\u0000~\u0001Pq\u0000~\u0001Dq\u0000"
							+ "~\u00018q\u0000~\u0001,q\u0000~\u0001 q\u0000~\u0001\u0014q\u0000~\u0001\bq\u0000~\u0000\u00fcq\u0000~\u0000\u00f0q\u0000~\u0000\u00e4q\u0000~\u0000?q\u0000~\u0000bq\u0000~\u0000nq\u0000~\u0000zq\u0000"
							+ "~\u0000\u0086q\u0000~\u0000\u0092q\u0000~\u0000\u009eq\u0000~\u0000\u00aaq\u0000~\u0000\u00b6q\u0000~\u0000\u00c1q\u0000~\u0000\u00ccq\u0000~\u0000\u00d8q\u0000~\u0001hq\u0000~\u0000\rq\u0000~\u0001tq\u0000~\u0001\u0080q\u0000"
							+ "~\u0001\u008cq\u0000~\u0000\u0007q\u0000~\u0000\u001dq\u0000~\u0000\u001bq\u0000~\u0000\u001eq\u0000~\u0000\u0018q\u0000~\u0001\u0090q\u0000~\u0000\u0010q\u0000~\u0000\nq\u0000~\u0000\u000eq\u0000~\u0000 q\u0000~\u0000\bq\u0000"
							+ "~\u0000\u000bq\u0000~\u0000#q\u0000~\u0000\u0016q\u0000~\u0000\u0012q\u0000~\u0000\u0011q\u0000~\u0000\u0006q\u0000~\u0000\u001cq\u0000~\u0000\u0014q\u0000~\u0001\u009eq\u0000~\u0000\"q\u0000~\u0000!q\u0000~\u0001Wq\u0000"
							+ "~\u0001Kq\u0000~\u0001?q\u0000~\u00013q\u0000~\u0001\'q\u0000~\u0001\u001bq\u0000~\u0001\u000fq\u0000~\u0001\u0003q\u0000~\u0000\u00f7q\u0000~\u0000\u00ebq\u0000~\u0000\u00dfq\u0000~\u0000*q\u0000~\u0000]q\u0000"
							+ "~\u0000iq\u0000~\u0000uq\u0000~\u0000\u0081q\u0000~\u0000\u008dq\u0000~\u0000\u0099q\u0000~\u0000\u00a5q\u0000~\u0000\u00b1q\u0000~\u0000\u00bdq\u0000~\u0000\u00c8q\u0000~\u0000\u00d3q\u0000~\u0001cq\u0000~\u0001oq\u0000"
							+ "~\u0000\u0015q\u0000~\u0001{q\u0000~\u0001\u0087q\u0000~\u0000\u000fq\u0000~\u0001\u009aq\u0000~\u0000\u001ax"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	@Override
	public generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			generated.impl.runtime.UnmarshallingContext context) {
		return new generated.impl.BaseTypeImpl.Unmarshaller(context);
	}

	@Override
	public generated.GenderNumberStatusDefinitenessType getAdjective() {
		return _Adjective;
	}

	@Override
	public generated.GenderNumberPersonType getAdverb() {
		return _Adverb;
	}

	@Override
	public generated.ConjunctionType getConjunction() {
		return _Conjunction;
	}

	@Override
	public generated.CopulaType getCopula() {
		return _Copula;
	}

	@Override
	public java.lang.String getDottedLexiconItem() {
		return _DottedLexiconItem;
	}

	@Override
	public generated.ExistentialType getExistential() {
		return _Existential;
	}

	@Override
	public generated.ForeignType getForeign() {
		return _Foreign;
	}

	@Override
	public generated.ImpersonalType getImpersonal() {
		return _Impersonal;
	}

	@Override
	public generated.InterjectionType getInterjection() {
		return _Interjection;
	}

	@Override
	public generated.InterrogativeType getInterrogative() {
		return _Interrogative;
	}

	@Override
	public java.lang.String getLexiconItem() {
		return _LexiconItem;
	}

	@Override
	public java.lang.String getLexiconPointer() {
		return _LexiconPointer;
	}

	@Override
	public generated.ModalType getModal() {
		return _Modal;
	}

	@Override
	public generated.MWEType getMWE() {
		return _MWE;
	}

	@Override
	public generated.NegationType getNegation() {
		return _Negation;
	}

	@Override
	public generated.GenderNumberStatusDefinitenessType getNoun() {
		return _Noun;
	}

	@Override
	public generated.NumberExpressionType getNumberExpression() {
		return _NumberExpression;
	}

	@Override
	public generated.NumeralType getNumeral() {
		return _Numeral;
	}

	@Override
	public generated.ParticipleType getParticiple() {
		return _Participle;
	}

	@Override
	public generated.GenderNumberPersonType getPreposition() {
		return _Preposition;
	}

	@Override
	public java.lang.Class getPrimaryInterface() {
		return (generated.BaseType.class);
	}

	@Override
	public generated.PronounType getPronoun() {
		return _Pronoun;
	}

	@Override
	public generated.ProperNameType getProperName() {
		return _ProperName;
	}

	@Override
	public generated.PunctuationType getPunctuation() {
		return _Punctuation;
	}

	@Override
	public generated.QuantifierType getQuantifier() {
		return _Quantifier;
	}

	@Override
	public generated.TitleType getTitle() {
		return _Title;
	}

	@Override
	public java.lang.String getTransliteratedLexiconItem() {
		return _TransliteratedLexiconItem;
	}

	@Override
	public generated.UnknownType getUnknown() {
		return _Unknown;
	}

	@Override
	public generated.URLType getUrl() {
		return _Url;
	}

	@Override
	public generated.VerbType getVerb() {
		return _Verb;
	}

	@Override
	public generated.WprefixType getWPrefix() {
		return _WPrefix;
	}

	@Override
	public generated.ZVLType getZevel() {
		return _Zevel;
	}

	@Override
	public void serializeAttributes(generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		if (_DottedLexiconItem != null) {
			context.startAttribute("", "dottedLexiconItem");
			try {
				context.text(_DottedLexiconItem, "DottedLexiconItem");
			} catch (java.lang.Exception e) {
				generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_LexiconItem != null) {
			context.startAttribute("", "lexiconItem");
			try {
				context.text(_LexiconItem, "LexiconItem");
			} catch (java.lang.Exception e) {
				generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_LexiconPointer != null) {
			context.startAttribute("", "lexiconPointer");
			try {
				context.text(_LexiconPointer, "LexiconPointer");
			} catch (java.lang.Exception e) {
				generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_TransliteratedLexiconItem != null) {
			context.startAttribute("", "transliteratedLexiconItem");
			try {
				context.text(_TransliteratedLexiconItem,
						"TransliteratedLexiconItem");
			} catch (java.lang.Exception e) {
				generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
	}

	@Override
	public void serializeBody(generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective != null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
				&& (_Participle == null)) {
			context.startElement("", "adjective");
			context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Adjective),
					"Adjective");
			context.endNamespaceDecls();
			context.childAsAttributes(
					((com.sun.xml.bind.JAXBObject) _Adjective), "Adjective");
			context.endAttributes();
			context.childAsBody(((com.sun.xml.bind.JAXBObject) _Adjective),
					"Adjective");
			context.endElement();
		} else {
			if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb != null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
					&& (_Participle == null)) {
				context.startElement("", "adverb");
				context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Adverb),
						"Adverb");
				context.endNamespaceDecls();
				context.childAsAttributes(
						((com.sun.xml.bind.JAXBObject) _Adverb), "Adverb");
				context.endAttributes();
				context.childAsBody(((com.sun.xml.bind.JAXBObject) _Adverb),
						"Adverb");
				context.endElement();
			} else {
				if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel != null)) && (_Existential == null))
						&& (_Participle == null)) {
					context.startElement("", "zevel");
					context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Zevel),
							"Zevel");
					context.endNamespaceDecls();
					context.childAsAttributes(
							((com.sun.xml.bind.JAXBObject) _Zevel), "Zevel");
					context.endAttributes();
					context.childAsBody(((com.sun.xml.bind.JAXBObject) _Zevel),
							"Zevel");
					context.endElement();
				} else {
					if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction != null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
							&& (_Participle == null)) {
						context.startElement("", "conjunction");
						context.childAsURIs(
								((com.sun.xml.bind.JAXBObject) _Conjunction),
								"Conjunction");
						context.endNamespaceDecls();
						context.childAsAttributes(
								((com.sun.xml.bind.JAXBObject) _Conjunction),
								"Conjunction");
						context.endAttributes();
						context.childAsBody(
								((com.sun.xml.bind.JAXBObject) _Conjunction),
								"Conjunction");
						context.endElement();
					} else {
						if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection != null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
								&& (_Participle == null)) {
							context.startElement("", "interjection");
							context.childAsURIs(
									((com.sun.xml.bind.JAXBObject) _Interjection),
									"Interjection");
							context.endNamespaceDecls();
							context.childAsAttributes(
									((com.sun.xml.bind.JAXBObject) _Interjection),
									"Interjection");
							context.endAttributes();
							context.childAsBody(
									((com.sun.xml.bind.JAXBObject) _Interjection),
									"Interjection");
							context.endElement();
						} else {
							if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative != null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
									&& (_Participle == null)) {
								context.startElement("", "interrogative");
								context.childAsURIs(
										((com.sun.xml.bind.JAXBObject) _Interrogative),
										"Interrogative");
								context.endNamespaceDecls();
								context.childAsAttributes(
										((com.sun.xml.bind.JAXBObject) _Interrogative),
										"Interrogative");
								context.endAttributes();
								context.childAsBody(
										((com.sun.xml.bind.JAXBObject) _Interrogative),
										"Interrogative");
								context.endElement();
							} else {
								if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation != null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
										&& (_Participle == null)) {
									context.startElement("", "negation");
									context.childAsURIs(
											((com.sun.xml.bind.JAXBObject) _Negation),
											"Negation");
									context.endNamespaceDecls();
									context.childAsAttributes(
											((com.sun.xml.bind.JAXBObject) _Negation),
											"Negation");
									context.endAttributes();
									context.childAsBody(
											((com.sun.xml.bind.JAXBObject) _Negation),
											"Negation");
									context.endElement();
								} else {
									if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign != null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
											&& (_Participle == null)) {
										context.startElement("", "foreign");
										context.childAsURIs(
												((com.sun.xml.bind.JAXBObject) _Foreign),
												"Foreign");
										context.endNamespaceDecls();
										context.childAsAttributes(
												((com.sun.xml.bind.JAXBObject) _Foreign),
												"Foreign");
										context.endAttributes();
										context.childAsBody(
												((com.sun.xml.bind.JAXBObject) _Foreign),
												"Foreign");
										context.endElement();
									} else {
										if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url != null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
												&& (_Participle == null)) {
											context.startElement("", "url");
											context.childAsURIs(
													((com.sun.xml.bind.JAXBObject) _Url),
													"Url");
											context.endNamespaceDecls();
											context.childAsAttributes(
													((com.sun.xml.bind.JAXBObject) _Url),
													"Url");
											context.endAttributes();
											context.childAsBody(
													((com.sun.xml.bind.JAXBObject) _Url),
													"Url");
											context.endElement();
										} else {
											if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun != null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
													&& (_Participle == null)) {
												context.startElement("", "noun");
												context.childAsURIs(
														((com.sun.xml.bind.JAXBObject) _Noun),
														"Noun");
												context.endNamespaceDecls();
												context.childAsAttributes(
														((com.sun.xml.bind.JAXBObject) _Noun),
														"Noun");
												context.endAttributes();
												context.childAsBody(
														((com.sun.xml.bind.JAXBObject) _Noun),
														"Noun");
												context.endElement();
											} else {
												if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition != null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
														&& (_Participle == null)) {
													context.startElement("",
															"preposition");
													context.childAsURIs(
															((com.sun.xml.bind.JAXBObject) _Preposition),
															"Preposition");
													context.endNamespaceDecls();
													context.childAsAttributes(
															((com.sun.xml.bind.JAXBObject) _Preposition),
															"Preposition");
													context.endAttributes();
													context.childAsBody(
															((com.sun.xml.bind.JAXBObject) _Preposition),
															"Preposition");
													context.endElement();
												} else {
													if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun != null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
															&& (_Participle == null)) {
														context.startElement(
																"", "pronoun");
														context.childAsURIs(
																((com.sun.xml.bind.JAXBObject) _Pronoun),
																"Pronoun");
														context.endNamespaceDecls();
														context.childAsAttributes(
																((com.sun.xml.bind.JAXBObject) _Pronoun),
																"Pronoun");
														context.endAttributes();
														context.childAsBody(
																((com.sun.xml.bind.JAXBObject) _Pronoun),
																"Pronoun");
														context.endElement();
													} else {
														if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName != null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
																&& (_Participle == null)) {
															context.startElement(
																	"",
																	"properName");
															context.childAsURIs(
																	((com.sun.xml.bind.JAXBObject) _ProperName),
																	"ProperName");
															context.endNamespaceDecls();
															context.childAsAttributes(
																	((com.sun.xml.bind.JAXBObject) _ProperName),
																	"ProperName");
															context.endAttributes();
															context.childAsBody(
																	((com.sun.xml.bind.JAXBObject) _ProperName),
																	"ProperName");
															context.endElement();
														} else {
															if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation != null)) && (_Zevel == null)) && (_Existential == null))
																	&& (_Participle == null)) {
																context.startElement(
																		"",
																		"punctuation");
																context.childAsURIs(
																		((com.sun.xml.bind.JAXBObject) _Punctuation),
																		"Punctuation");
																context.endNamespaceDecls();
																context.childAsAttributes(
																		((com.sun.xml.bind.JAXBObject) _Punctuation),
																		"Punctuation");
																context.endAttributes();
																context.childAsBody(
																		((com.sun.xml.bind.JAXBObject) _Punctuation),
																		"Punctuation");
																context.endElement();
															} else {
																if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression != null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
																		&& (_Participle == null)) {
																	context.startElement(
																			"",
																			"numberExpression");
																	context.childAsURIs(
																			((com.sun.xml.bind.JAXBObject) _NumberExpression),
																			"NumberExpression");
																	context.endNamespaceDecls();
																	context.childAsAttributes(
																			((com.sun.xml.bind.JAXBObject) _NumberExpression),
																			"NumberExpression");
																	context.endAttributes();
																	context.childAsBody(
																			((com.sun.xml.bind.JAXBObject) _NumberExpression),
																			"NumberExpression");
																	context.endElement();
																} else {
																	if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier != null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
																			&& (_Participle == null)) {
																		context.startElement(
																				"",
																				"quantifier");
																		context.childAsURIs(
																				((com.sun.xml.bind.JAXBObject) _Quantifier),
																				"Quantifier");
																		context.endNamespaceDecls();
																		context.childAsAttributes(
																				((com.sun.xml.bind.JAXBObject) _Quantifier),
																				"Quantifier");
																		context.endAttributes();
																		context.childAsBody(
																				((com.sun.xml.bind.JAXBObject) _Quantifier),
																				"Quantifier");
																		context.endElement();
																	} else {
																		if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb != null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
																				&& (_Participle == null)) {
																			context.startElement(
																					"",
																					"verb");
																			context.childAsURIs(
																					((com.sun.xml.bind.JAXBObject) _Verb),
																					"Verb");
																			context.endNamespaceDecls();
																			context.childAsAttributes(
																					((com.sun.xml.bind.JAXBObject) _Verb),
																					"Verb");
																			context.endAttributes();
																			context.childAsBody(
																					((com.sun.xml.bind.JAXBObject) _Verb),
																					"Verb");
																			context.endElement();
																		} else {
																			if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
																					&& (_Participle != null)) {
																				context.startElement(
																						"",
																						"participle");
																				context.childAsURIs(
																						((com.sun.xml.bind.JAXBObject) _Participle),
																						"Participle");
																				context.endNamespaceDecls();
																				context.childAsAttributes(
																						((com.sun.xml.bind.JAXBObject) _Participle),
																						"Participle");
																				context.endAttributes();
																				context.childAsBody(
																						((com.sun.xml.bind.JAXBObject) _Participle),
																						"Participle");
																				context.endElement();
																			} else {
																				if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral != null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
																						&& (_Participle == null)) {
																					context.startElement(
																							"",
																							"numeral");
																					context.childAsURIs(
																							((com.sun.xml.bind.JAXBObject) _Numeral),
																							"Numeral");
																					context.endNamespaceDecls();
																					context.childAsAttributes(
																							((com.sun.xml.bind.JAXBObject) _Numeral),
																							"Numeral");
																					context.endAttributes();
																					context.childAsBody(
																							((com.sun.xml.bind.JAXBObject) _Numeral),
																							"Numeral");
																					context.endElement();
																				} else {
																					if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential != null))
																							&& (_Participle == null)) {
																						context.startElement(
																								"",
																								"existential");
																						context.childAsURIs(
																								((com.sun.xml.bind.JAXBObject) _Existential),
																								"Existential");
																						context.endNamespaceDecls();
																						context.childAsAttributes(
																								((com.sun.xml.bind.JAXBObject) _Existential),
																								"Existential");
																						context.endAttributes();
																						context.childAsBody(
																								((com.sun.xml.bind.JAXBObject) _Existential),
																								"Existential");
																						context.endElement();
																					} else {
																						if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal != null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
																								&& (_Participle == null)) {
																							context.startElement(
																									"",
																									"impersonal");
																							context.childAsURIs(
																									((com.sun.xml.bind.JAXBObject) _Impersonal),
																									"Impersonal");
																							context.endNamespaceDecls();
																							context.childAsAttributes(
																									((com.sun.xml.bind.JAXBObject) _Impersonal),
																									"Impersonal");
																							context.endAttributes();
																							context.childAsBody(
																									((com.sun.xml.bind.JAXBObject) _Impersonal),
																									"Impersonal");
																							context.endElement();
																						} else {
																							if (((((((((((((((((((((((((((_WPrefix != null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
																									&& (_Participle == null)) {
																								context.startElement(
																										"",
																										"wPrefix");
																								context.childAsURIs(
																										((com.sun.xml.bind.JAXBObject) _WPrefix),
																										"WPrefix");
																								context.endNamespaceDecls();
																								context.childAsAttributes(
																										((com.sun.xml.bind.JAXBObject) _WPrefix),
																										"WPrefix");
																								context.endAttributes();
																								context.childAsBody(
																										((com.sun.xml.bind.JAXBObject) _WPrefix),
																										"WPrefix");
																								context.endElement();
																							} else {
																								if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal != null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
																										&& (_Participle == null)) {
																									context.startElement(
																											"",
																											"modal");
																									context.childAsURIs(
																											((com.sun.xml.bind.JAXBObject) _Modal),
																											"Modal");
																									context.endNamespaceDecls();
																									context.childAsAttributes(
																											((com.sun.xml.bind.JAXBObject) _Modal),
																											"Modal");
																									context.endAttributes();
																									context.childAsBody(
																											((com.sun.xml.bind.JAXBObject) _Modal),
																											"Modal");
																									context.endElement();
																								} else {
																									if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula != null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
																											&& (_Participle == null)) {
																										context.startElement(
																												"",
																												"copula");
																										context.childAsURIs(
																												((com.sun.xml.bind.JAXBObject) _Copula),
																												"Copula");
																										context.endNamespaceDecls();
																										context.childAsAttributes(
																												((com.sun.xml.bind.JAXBObject) _Copula),
																												"Copula");
																										context.endAttributes();
																										context.childAsBody(
																												((com.sun.xml.bind.JAXBObject) _Copula),
																												"Copula");
																										context.endElement();
																									} else {
																										if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title != null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
																												&& (_Participle == null)) {
																											context.startElement(
																													"",
																													"title");
																											context.childAsURIs(
																													((com.sun.xml.bind.JAXBObject) _Title),
																													"Title");
																											context.endNamespaceDecls();
																											context.childAsAttributes(
																													((com.sun.xml.bind.JAXBObject) _Title),
																													"Title");
																											context.endAttributes();
																											context.childAsBody(
																													((com.sun.xml.bind.JAXBObject) _Title),
																													"Title");
																											context.endElement();
																										} else {
																											if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown == null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE != null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
																													&& (_Participle == null)) {
																												context.startElement(
																														"",
																														"MWE");
																												context.childAsURIs(
																														((com.sun.xml.bind.JAXBObject) _MWE),
																														"MWE");
																												context.endNamespaceDecls();
																												context.childAsAttributes(
																														((com.sun.xml.bind.JAXBObject) _MWE),
																														"MWE");
																												context.endAttributes();
																												context.childAsBody(
																														((com.sun.xml.bind.JAXBObject) _MWE),
																														"MWE");
																												context.endElement();
																											} else {
																												if (((((((((((((((((((((((((((_WPrefix == null) && (_Quantifier == null)) && (_Modal == null)) && (_Pronoun == null)) && (_Copula == null)) && (_Adverb == null)) && (_Negation == null)) && (_Title == null)) && (_Impersonal == null)) && (_Verb == null)) && (_Numeral == null)) && (_Unknown != null)) && (_Noun == null)) && (_Url == null)) && (_Interjection == null)) && (_ProperName == null)) && (_Adjective == null)) && (_MWE == null)) && (_Interrogative == null)) && (_Foreign == null)) && (_Conjunction == null)) && (_NumberExpression == null)) && (_Preposition == null)) && (_Punctuation == null)) && (_Zevel == null)) && (_Existential == null))
																														&& (_Participle == null)) {
																													context.startElement(
																															"",
																															"unknown");
																													context.childAsURIs(
																															((com.sun.xml.bind.JAXBObject) _Unknown),
																															"Unknown");
																													context.endNamespaceDecls();
																													context.childAsAttributes(
																															((com.sun.xml.bind.JAXBObject) _Unknown),
																															"Unknown");
																													context.endAttributes();
																													context.childAsBody(
																															((com.sun.xml.bind.JAXBObject) _Unknown),
																															"Unknown");
																													context.endElement();
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	@Override
	public void serializeURIs(generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
	}

	@Override
	public void setAdjective(generated.GenderNumberStatusDefinitenessType value) {
		_Adjective = value;
	}

	@Override
	public void setAdverb(generated.GenderNumberPersonType value) {
		_Adverb = value;
	}

	@Override
	public void setConjunction(generated.ConjunctionType value) {
		_Conjunction = value;
	}

	@Override
	public void setCopula(generated.CopulaType value) {
		_Copula = value;
	}

	@Override
	public void setDottedLexiconItem(java.lang.String value) {
		_DottedLexiconItem = value;
	}

	@Override
	public void setExistential(generated.ExistentialType value) {
		_Existential = value;
	}

	@Override
	public void setForeign(generated.ForeignType value) {
		_Foreign = value;
	}

	@Override
	public void setImpersonal(generated.ImpersonalType value) {
		_Impersonal = value;
	}

	@Override
	public void setInterjection(generated.InterjectionType value) {
		_Interjection = value;
	}

	@Override
	public void setInterrogative(generated.InterrogativeType value) {
		_Interrogative = value;
	}

	@Override
	public void setLexiconItem(java.lang.String value) {
		_LexiconItem = value;
	}

	@Override
	public void setLexiconPointer(java.lang.String value) {
		_LexiconPointer = value;
	}

	@Override
	public void setModal(generated.ModalType value) {
		_Modal = value;
	}

	@Override
	public void setMWE(generated.MWEType value) {
		_MWE = value;
	}

	@Override
	public void setNegation(generated.NegationType value) {
		_Negation = value;
	}

	@Override
	public void setNoun(generated.GenderNumberStatusDefinitenessType value) {
		_Noun = value;
	}

	@Override
	public void setNumberExpression(generated.NumberExpressionType value) {
		_NumberExpression = value;
	}

	@Override
	public void setNumeral(generated.NumeralType value) {
		_Numeral = value;
	}

	@Override
	public void setParticiple(generated.ParticipleType value) {
		_Participle = value;
	}

	@Override
	public void setPreposition(generated.GenderNumberPersonType value) {
		_Preposition = value;
	}

	@Override
	public void setPronoun(generated.PronounType value) {
		_Pronoun = value;
	}

	@Override
	public void setProperName(generated.ProperNameType value) {
		_ProperName = value;
	}

	@Override
	public void setPunctuation(generated.PunctuationType value) {
		_Punctuation = value;
	}

	@Override
	public void setQuantifier(generated.QuantifierType value) {
		_Quantifier = value;
	}

	@Override
	public void setTitle(generated.TitleType value) {
		_Title = value;
	}

	@Override
	public void setTransliteratedLexiconItem(java.lang.String value) {
		_TransliteratedLexiconItem = value;
	}

	@Override
	public void setUnknown(generated.UnknownType value) {
		_Unknown = value;
	}

	@Override
	public void setUrl(generated.URLType value) {
		_Url = value;
	}

	@Override
	public void setVerb(generated.VerbType value) {
		_Verb = value;
	}

	@Override
	public void setWPrefix(generated.WprefixType value) {
		_WPrefix = value;
	}

	@Override
	public void setZevel(generated.ZVLType value) {
		_Zevel = value;
	}

}
