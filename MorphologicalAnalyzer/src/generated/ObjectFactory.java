//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.06.14 at 03:41:34 PM IDT 
//

package generated;

import javax.xml.bind.JAXBException;
import javax.xml.bind.PropertyException;

/**
 * This object contains factory methods for each Java content interface and Java
 * element interface generated in the generated package.
 * <p>
 * An ObjectFactory allows you to programatically construct new instances of the
 * Java representation for XML content. The Java representation of XML content
 * can consist of schema derived interfaces and classes representing the binding
 * of schema type definitions, element declarations and model groups. Factory
 * methods for each of these are provided in this class.
 * 
 */
public class ObjectFactory extends
		generated.impl.runtime.DefaultJAXBContextImpl {

	private static java.util.HashMap defaultImplementations = new java.util.HashMap(
			55, 0.75F);
	private static java.util.HashMap rootTagMap = new java.util.HashMap();
	public final static generated.impl.runtime.GrammarInfo grammarInfo = new generated.impl.runtime.GrammarInfoImpl(
			rootTagMap, defaultImplementations, (generated.ObjectFactory.class));
	public final static java.lang.Class version = (generated.impl.JAXBVersion.class);

	static {
		defaultImplementations.put(
				(generated.TransliterationType.StringType.class),
				"generated.impl.TransliterationTypeImpl.StringTypeImpl");
		defaultImplementations.put((generated.InterjectionType.class),
				"generated.impl.InterjectionTypeImpl");
		defaultImplementations.put((generated.WprefixType.class),
				"generated.impl.WprefixTypeImpl");
		defaultImplementations.put((generated.ExistentialType.class),
				"generated.impl.ExistentialTypeImpl");
		defaultImplementations.put((generated.ArticleType.class),
				"generated.impl.ArticleTypeImpl");
		defaultImplementations.put((generated.NegationType.class),
				"generated.impl.NegationTypeImpl");
		defaultImplementations.put((generated.SuffixType.class),
				"generated.impl.SuffixTypeImpl");
		defaultImplementations.put((generated.SourceType.class),
				"generated.impl.SourceTypeImpl");
		defaultImplementations.put((generated.NumeralType.class),
				"generated.impl.NumeralTypeImpl");
		defaultImplementations.put((generated.AnalysisType.class),
				"generated.impl.AnalysisTypeImpl");
		defaultImplementations.put((generated.PronounType.class),
				"generated.impl.PronounTypeImpl");
		defaultImplementations.put((generated.MetadataType.class),
				"generated.impl.MetadataTypeImpl");
		defaultImplementations.put((generated.GenderNumberPersonType.class),
				"generated.impl.GenderNumberPersonTypeImpl");
		defaultImplementations.put((generated.ZVLType.class),
				"generated.impl.ZVLTypeImpl");
		defaultImplementations.put((generated.VerbType.class),
				"generated.impl.VerbTypeImpl");
		defaultImplementations.put(
				(generated.GenderNumberStatusDefinitenessType.class),
				"generated.impl.GenderNumberStatusDefinitenessTypeImpl");
		defaultImplementations.put((generated.UnknownType.class),
				"generated.impl.UnknownTypeImpl");
		defaultImplementations.put((generated.ConjunctionType.class),
				"generated.impl.ConjunctionTypeImpl");
		defaultImplementations.put((generated.MWEType.class),
				"generated.impl.MWETypeImpl");
		defaultImplementations.put((generated.CopulaType.class),
				"generated.impl.CopulaTypeImpl");
		defaultImplementations.put((generated.ImpersonalType.class),
				"generated.impl.ImpersonalTypeImpl");
		defaultImplementations.put((generated.ModalType.class),
				"generated.impl.ModalTypeImpl");
		defaultImplementations.put((generated.GenderNumberStatusType.class),
				"generated.impl.GenderNumberStatusTypeImpl");
		defaultImplementations.put((generated.URLType.class),
				"generated.impl.URLTypeImpl");
		defaultImplementations.put((generated.CorpusType.class),
				"generated.impl.CorpusTypeImpl");
		defaultImplementations.put((generated.TitleType.class),
				"generated.impl.TitleTypeImpl");
		defaultImplementations.put((generated.Corpus.class),
				"generated.impl.CorpusImpl");
		defaultImplementations.put((generated.ProperNameType.class),
				"generated.impl.ProperNameTypeImpl");
		defaultImplementations.put((generated.PrefixType.class),
				"generated.impl.PrefixTypeImpl");
		defaultImplementations.put((generated.TransliterationType.class),
				"generated.impl.TransliterationTypeImpl");
		defaultImplementations.put((generated.SentenceType.class),
				"generated.impl.SentenceTypeImpl");
		defaultImplementations.put((generated.ParagraphType.class),
				"generated.impl.ParagraphTypeImpl");
		defaultImplementations.put((generated.TokenType.class),
				"generated.impl.TokenTypeImpl");
		defaultImplementations.put((generated.QuantifierType.class),
				"generated.impl.QuantifierTypeImpl");
		defaultImplementations.put((generated.InterrogativeType.class),
				"generated.impl.InterrogativeTypeImpl");
		defaultImplementations.put((generated.PunctuationType.class),
				"generated.impl.PunctuationTypeImpl");
		defaultImplementations.put((generated.NumberExpressionType.class),
				"generated.impl.NumberExpressionTypeImpl");
		defaultImplementations.put((generated.ParticipleType.class),
				"generated.impl.ParticipleTypeImpl");
		defaultImplementations.put((generated.ForeignType.class),
				"generated.impl.ForeignTypeImpl");
		defaultImplementations.put((generated.BaseType.class),
				"generated.impl.BaseTypeImpl");
		rootTagMap.put(new javax.xml.namespace.QName("", "corpus"),
				(generated.Corpus.class));
	}

	/**
	 * Create a new ObjectFactory that can be used to create new instances of
	 * schema derived classes for package: generated
	 * 
	 */
	public ObjectFactory() {
		super(grammarInfo);
	}

	/**
	 * Create an instance of AnalysisType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.AnalysisType createAnalysisType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.AnalysisTypeImpl();
	}

	/**
	 * Create an instance of ArticleType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.ArticleType createArticleType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.ArticleTypeImpl();
	}

	/**
	 * Create an instance of BaseType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.BaseType createBaseType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.BaseTypeImpl();
	}

	/**
	 * Create an instance of ConjunctionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.ConjunctionType createConjunctionType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.ConjunctionTypeImpl();
	}

	/**
	 * Create an instance of CopulaType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.CopulaType createCopulaType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.CopulaTypeImpl();
	}

	/**
	 * Create an instance of Corpus
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.Corpus createCorpus() throws javax.xml.bind.JAXBException {
		return new generated.impl.CorpusImpl();
	}

	/**
	 * Create an instance of CorpusType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.CorpusType createCorpusType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.CorpusTypeImpl();
	}

	/**
	 * Create an instance of ExistentialType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.ExistentialType createExistentialType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.ExistentialTypeImpl();
	}

	/**
	 * Create an instance of ForeignType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.ForeignType createForeignType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.ForeignTypeImpl();
	}

	/**
	 * Create an instance of GenderNumberPersonType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.GenderNumberPersonType createGenderNumberPersonType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.GenderNumberPersonTypeImpl();
	}

	/**
	 * Create an instance of GenderNumberStatusDefinitenessType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.GenderNumberStatusDefinitenessType createGenderNumberStatusDefinitenessType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.GenderNumberStatusDefinitenessTypeImpl();
	}

	/**
	 * Create an instance of GenderNumberStatusType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.GenderNumberStatusType createGenderNumberStatusType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.GenderNumberStatusTypeImpl();
	}

	/**
	 * Create an instance of ImpersonalType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.ImpersonalType createImpersonalType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.ImpersonalTypeImpl();
	}

	/**
	 * Create an instance of InterjectionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.InterjectionType createInterjectionType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.InterjectionTypeImpl();
	}

	/**
	 * Create an instance of InterrogativeType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.InterrogativeType createInterrogativeType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.InterrogativeTypeImpl();
	}

	/**
	 * Create an instance of MetadataType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.MetadataType createMetadataType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.MetadataTypeImpl();
	}

	/**
	 * Create an instance of ModalType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.ModalType createModalType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.ModalTypeImpl();
	}

	/**
	 * Create an instance of MWEType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.MWEType createMWEType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.MWETypeImpl();
	}

	/**
	 * Create an instance of NegationType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.NegationType createNegationType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.NegationTypeImpl();
	}

	/**
	 * Create an instance of NumberExpressionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.NumberExpressionType createNumberExpressionType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.NumberExpressionTypeImpl();
	}

	/**
	 * Create an instance of NumeralType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.NumeralType createNumeralType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.NumeralTypeImpl();
	}

	/**
	 * Create an instance of ParagraphType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.ParagraphType createParagraphType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.ParagraphTypeImpl();
	}

	/**
	 * Create an instance of ParticipleType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.ParticipleType createParticipleType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.ParticipleTypeImpl();
	}

	/**
	 * Create an instance of PrefixType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.PrefixType createPrefixType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.PrefixTypeImpl();
	}

	/**
	 * Create an instance of PronounType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.PronounType createPronounType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.PronounTypeImpl();
	}

	/**
	 * Create an instance of ProperNameType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.ProperNameType createProperNameType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.ProperNameTypeImpl();
	}

	/**
	 * Create an instance of PunctuationType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.PunctuationType createPunctuationType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.PunctuationTypeImpl();
	}

	/**
	 * Create an instance of QuantifierType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.QuantifierType createQuantifierType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.QuantifierTypeImpl();
	}

	/**
	 * Create an instance of SentenceType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.SentenceType createSentenceType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.SentenceTypeImpl();
	}

	/**
	 * Create an instance of SourceType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.SourceType createSourceType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.SourceTypeImpl();
	}

	/**
	 * Create an instance of SuffixType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.SuffixType createSuffixType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.SuffixTypeImpl();
	}

	/**
	 * Create an instance of TitleType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.TitleType createTitleType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.TitleTypeImpl();
	}

	/**
	 * Create an instance of TokenType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.TokenType createTokenType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.TokenTypeImpl();
	}

	/**
	 * Create an instance of TransliterationType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.TransliterationType createTransliterationType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.TransliterationTypeImpl();
	}

	/**
	 * Create an instance of TransliterationTypeStringType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.TransliterationType.StringType createTransliterationTypeStringType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.TransliterationTypeImpl.StringTypeImpl();
	}

	/**
	 * Create an instance of UnknownType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.UnknownType createUnknownType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.UnknownTypeImpl();
	}

	/**
	 * Create an instance of URLType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.URLType createURLType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.URLTypeImpl();
	}

	/**
	 * Create an instance of VerbType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.VerbType createVerbType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.VerbTypeImpl();
	}

	/**
	 * Create an instance of WprefixType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.WprefixType createWprefixType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.WprefixTypeImpl();
	}

	/**
	 * Create an instance of ZVLType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public generated.ZVLType createZVLType()
			throws javax.xml.bind.JAXBException {
		return new generated.impl.ZVLTypeImpl();
	}

	/**
	 * Get the specified property. This method can only be used to get provider
	 * specific properties. Attempting to get an undefined property will result
	 * in a PropertyException being thrown.
	 * 
	 * @param name
	 *            the name of the property to retrieve
	 * @return the value of the requested property
	 * @throws PropertyException
	 *             when there is an error retrieving the given property or value
	 */
	@Override
	public java.lang.Object getProperty(java.lang.String name)
			throws javax.xml.bind.PropertyException {
		return super.getProperty(name);
	}

	/**
	 * Create an instance of the specified Java content interface.
	 * 
	 * @param javaContentInterface
	 *            the Class object of the javacontent interface to instantiate
	 * @return a new instance
	 * @throws JAXBException
	 *             if an error occurs
	 */
	@Override
	public java.lang.Object newInstance(java.lang.Class javaContentInterface)
			throws javax.xml.bind.JAXBException {
		return super.newInstance(javaContentInterface);
	}

	/**
	 * Set the specified property. This method can only be used to set provider
	 * specific properties. Attempting to set an undefined property will result
	 * in a PropertyException being thrown.
	 * 
	 * @param value
	 *            the value of the property to be set
	 * @param name
	 *            the name of the property to retrieve
	 * @throws PropertyException
	 *             when there is an error processing the given property or value
	 */
	@Override
	public void setProperty(java.lang.String name, java.lang.Object value)
			throws javax.xml.bind.PropertyException {
		super.setProperty(name, value);
	}

}
